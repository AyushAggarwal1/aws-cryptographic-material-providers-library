# Code generated by smithy-python-codegen DO NOT EDIT.

from Wrappers import Option_None, Option_Some
from _dafny import Map, Seq
import aws_cryptography_keystore.smithygenerated.models
import aws_cryptography_keystore.smithygenerated.smithy_to_dafny
import module_
from software_amazon_cryptography_keystore_internaldafny_types import (
    BeaconKeyMaterials_BeaconKeyMaterials as DafnyBeaconKeyMaterials,
    BranchKeyMaterials_BranchKeyMaterials as DafnyBranchKeyMaterials,
    CreateKeyInput_CreateKeyInput as DafnyCreateKeyInput,
    CreateKeyOutput_CreateKeyOutput as DafnyCreateKeyOutput,
    CreateKeyStoreInput_CreateKeyStoreInput as DafnyCreateKeyStoreInput,
    CreateKeyStoreOutput_CreateKeyStoreOutput as DafnyCreateKeyStoreOutput,
    GetActiveBranchKeyInput_GetActiveBranchKeyInput as DafnyGetActiveBranchKeyInput,
    GetActiveBranchKeyOutput_GetActiveBranchKeyOutput as DafnyGetActiveBranchKeyOutput,
    GetBeaconKeyInput_GetBeaconKeyInput as DafnyGetBeaconKeyInput,
    GetBeaconKeyOutput_GetBeaconKeyOutput as DafnyGetBeaconKeyOutput,
    GetBranchKeyVersionInput_GetBranchKeyVersionInput as DafnyGetBranchKeyVersionInput,
    GetBranchKeyVersionOutput_GetBranchKeyVersionOutput as DafnyGetBranchKeyVersionOutput,
    GetKeyStoreInfoOutput_GetKeyStoreInfoOutput as DafnyGetKeyStoreInfoOutput,
    KMSConfiguration_kmsKeyArn,
    KeyStoreConfig_KeyStoreConfig as DafnyKeyStoreConfig,
    VersionKeyInput_VersionKeyInput as DafnyVersionKeyInput,
    VersionKeyOutput_VersionKeyOutput as DafnyVersionKeyOutput,
)
import software_amazon_cryptography_services_dynamodb_internaldafny
from software_amazon_cryptography_services_dynamodb_internaldafny_types import (
    IDynamoDBClient,
)
import software_amazon_cryptography_services_kms_internaldafny
from software_amazon_cryptography_services_kms_internaldafny_types import IKMSClient


def SmithyToDafny_smithy_api_Unit(input):
    return None

def SmithyToDafny_aws_cryptography_keystore_GetBeaconKeyInput(input):
    return DafnyGetBeaconKeyInput(
        branchKeyIdentifier=Seq(input.branch_key_identifier),
    )

def SmithyToDafny_aws_cryptography_keystore_CreateKeyStoreInput(input):
    return DafnyCreateKeyStoreInput(
    )

def SmithyToDafny_aws_cryptography_keystore_GetBranchKeyVersionInput(input):
    return DafnyGetBranchKeyVersionInput(
        branchKeyIdentifier=Seq(input.branch_key_identifier),
        branchKeyVersion=Seq(input.branch_key_version),
    )

def SmithyToDafny_aws_cryptography_keystore_GetActiveBranchKeyInput(input):
    return DafnyGetActiveBranchKeyInput(
        branchKeyIdentifier=Seq(input.branch_key_identifier),
    )

def SmithyToDafny_aws_cryptography_keystore_CreateKeyInput(input):
    return DafnyCreateKeyInput(
        branchKeyIdentifier=((Option_Some(Seq(input.branch_key_identifier))) if (input.branch_key_identifier is not None) else (Option_None())),
        encryptionContext=((Option_Some(Map({Seq(key): Seq(value) for (key, value) in input.encryption_context.items() }))) if (input.encryption_context is not None) else (Option_None())),
    )

def SmithyToDafny_aws_cryptography_keystore_VersionKeyInput(input):
    return DafnyVersionKeyInput(
        branchKeyIdentifier=Seq(input.branch_key_identifier),
    )

def SmithyToDafny_aws_cryptography_keystore_GetKeyStoreInfoOutput(input):
    return DafnyGetKeyStoreInfoOutput(
        keyStoreId=Seq(input.key_store_id),
        keyStoreName=Seq(input.key_store_name),
        logicalKeyStoreName=Seq(input.logical_key_store_name),
        grantTokens=Seq([Seq(list_element) for list_element in input.grant_tokens]),
        kmsConfiguration=aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_KMSConfiguration(input.kms_configuration),
    )

def SmithyToDafny_aws_cryptography_keystore_KMSConfiguration(input):
    if isinstance(input, aws_cryptography_keystore.smithygenerated.models.KMSConfigurationkmsKeyArn):
        KMSConfiguration_union_value = KMSConfiguration_kmsKeyArn(input.value)
    else:
        raise ValueError("No recognized union value in union type: " + input)

    return KMSConfiguration_union_value

def SmithyToDafny_aws_cryptography_keystore_GetBeaconKeyOutput(input):
    return DafnyGetBeaconKeyOutput(
        beaconKeyMaterials=aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_BeaconKeyMaterials(input.beacon_key_materials),
    )

def SmithyToDafny_aws_cryptography_keystore_BeaconKeyMaterials(input):
    return DafnyBeaconKeyMaterials(
        beaconKeyIdentifier=Seq(input.beacon_key_identifier),
        encryptionContext=Map({Seq(key): Seq(value) for (key, value) in input.encryption_context.items() }),
        beaconKey=((Option_Some(Seq(input.beacon_key))) if (input.beacon_key is not None) else (Option_None())),
        hmacKeys=((Option_Some(Map({Seq(key): Seq(value) for (key, value) in input.hmac_keys.items() }))) if (input.hmac_keys is not None) else (Option_None())),
    )

def SmithyToDafny_aws_cryptography_keystore_CreateKeyStoreOutput(input):
    return DafnyCreateKeyStoreOutput(
        tableArn=Seq(input.table_arn),
    )

def SmithyToDafny_aws_cryptography_keystore_GetBranchKeyVersionOutput(input):
    return DafnyGetBranchKeyVersionOutput(
        branchKeyMaterials=aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_BranchKeyMaterials(input.branch_key_materials),
    )

def SmithyToDafny_aws_cryptography_keystore_BranchKeyMaterials(input):
    return DafnyBranchKeyMaterials(
        branchKeyIdentifier=Seq(input.branch_key_identifier),
        branchKeyVersion=Seq(input.branch_key_version),
        encryptionContext=Map({Seq(key): Seq(value) for (key, value) in input.encryption_context.items() }),
        branchKey=Seq(input.branch_key),
    )

def SmithyToDafny_aws_cryptography_keystore_GetActiveBranchKeyOutput(input):
    return DafnyGetActiveBranchKeyOutput(
        branchKeyMaterials=aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_BranchKeyMaterials(input.branch_key_materials),
    )

def SmithyToDafny_aws_cryptography_keystore_CreateKeyOutput(input):
    return DafnyCreateKeyOutput(
        branchKeyIdentifier=Seq(input.branch_key_identifier),
    )

def SmithyToDafny_aws_cryptography_keystore_VersionKeyOutput(input):
    return DafnyVersionKeyOutput(
    )

def SmithyToDafny_aws_cryptography_keystore_KeyStoreConfig(input):
    return DafnyKeyStoreConfig(
        ddbTableName=Seq(input.ddb_table_name),
        kmsConfiguration=aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_KMSConfiguration(input.kms_configuration),
        logicalKeyStoreName=Seq(input.logical_key_store_name),
        id=Seq(input.id),
        grantTokens=Seq([Seq(list_element) for list_element in input.grant_tokens]),
        ddbClient=aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_DdbClientReference(input.ddb_client),
        kmsClient=aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_KmsClientReference(input.kms_client),
    )

def SmithyToDafny_aws_cryptography_keystore_DdbClientReference(input):
    import com_amazonaws_dynamodb.smithygenerated.config
    com_amazonaws_dynamodb_client = software_amazon_cryptography_services_dynamodb_internaldafny.DynamoDB_20120810Client()
    com_amazonaws_dynamodb_client.ctor__(com_amazonaws_dynamodb.smithygenerated.config.smithy_config_to_dafny_config(input._config))
    return com_amazonaws_dynamodb_client

def SmithyToDafny_aws_cryptography_keystore_KmsClientReference(input):
    import com_amazonaws_kms.smithygenerated.config
    com_amazonaws_kms_client = software_amazon_cryptography_services_kms_internaldafny.TrentServiceClient()
    com_amazonaws_kms_client.ctor__(com_amazonaws_kms.smithygenerated.config.smithy_config_to_dafny_config(input._config))
    return com_amazonaws_kms_client
