# Code generated by smithy-python-codegen DO NOT EDIT.

import abc
import aws_cryptography_keystore.smithygenerated.dafny_to_smithy
import aws_cryptography_keystore.smithygenerated.smithy_to_dafny
import aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy
import aws_cryptography_materialproviders.smithygenerated.smithy_to_dafny
import com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny
import com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk
from typing import Any



class ICryptographicMaterialsCache(metaclass=abc.ABCMeta):
    @classmethod
    def __subclasshook__(cls, subclass):
        return (
            hasattr(subclass, "PutCacheEntry") and callable(subclass.PutCacheEntry) and
            hasattr(subclass, "GetCacheEntry") and callable(subclass.GetCacheEntry) and
            hasattr(subclass, "UpdateUsageMetadata") and callable(subclass.UpdateUsageMetadata) and
            hasattr(subclass, "DeleteCacheEntry") and callable(subclass.DeleteCacheEntry)
        )

    # TODO-Python: Add impl with typehint to ABC

    @abc.abstractmethod
    def PutCacheEntry(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def GetCacheEntry(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def UpdateUsageMetadata(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def DeleteCacheEntry(self, native_input):
        raise NotImplementedError

class CryptographicMaterialsCache(ICryptographicMaterialsCache):
    # TODO-Python: typehint
    _impl: Any

    def __init__(self, _impl):
        self._impl = _impl

    def PutCacheEntry(self, native_input):
        dafny_output = self._impl.PutCacheEntry(aws_cryptography_materialproviders.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_PutCacheEntryInput(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def GetCacheEntry(self, native_input):
        dafny_output = self._impl.GetCacheEntry(aws_cryptography_materialproviders.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_GetCacheEntryInput(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_materialproviders_GetCacheEntryOutput(dafny_output)

    def UpdateUsageMetadata(self, native_input):
        dafny_output = self._impl.UpdateUsageMetadata(aws_cryptography_materialproviders.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_UpdateUsageMetadataInput(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def DeleteCacheEntry(self, native_input):
        dafny_output = self._impl.DeleteCacheEntry(aws_cryptography_materialproviders.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_DeleteCacheEntryInput(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

class ICryptographicMaterialsManager(metaclass=abc.ABCMeta):
    @classmethod
    def __subclasshook__(cls, subclass):
        return (
            hasattr(subclass, "GetEncryptionMaterials") and callable(subclass.GetEncryptionMaterials) and
            hasattr(subclass, "DecryptMaterials") and callable(subclass.DecryptMaterials)
        )

    # TODO-Python: Add impl with typehint to ABC

    @abc.abstractmethod
    def GetEncryptionMaterials(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def DecryptMaterials(self, native_input):
        raise NotImplementedError

class CryptographicMaterialsManager(ICryptographicMaterialsManager):
    # TODO-Python: typehint
    _impl: Any

    def __init__(self, _impl):
        self._impl = _impl

    def GetEncryptionMaterials(self, native_input):
        dafny_output = self._impl.GetEncryptionMaterials(aws_cryptography_materialproviders.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_GetEncryptionMaterialsInput(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_materialproviders_GetEncryptionMaterialsOutput(dafny_output)

    def DecryptMaterials(self, native_input):
        dafny_output = self._impl.DecryptMaterials(aws_cryptography_materialproviders.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_DecryptMaterialsInput(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_materialproviders_DecryptMaterialsOutput(dafny_output)

class ITrentService(metaclass=abc.ABCMeta):
    @classmethod
    def __subclasshook__(cls, subclass):
        return (
            hasattr(subclass, "CancelKeyDeletion") and callable(subclass.CancelKeyDeletion) and
            hasattr(subclass, "ConnectCustomKeyStore") and callable(subclass.ConnectCustomKeyStore) and
            hasattr(subclass, "CreateAlias") and callable(subclass.CreateAlias) and
            hasattr(subclass, "CreateCustomKeyStore") and callable(subclass.CreateCustomKeyStore) and
            hasattr(subclass, "CreateGrant") and callable(subclass.CreateGrant) and
            hasattr(subclass, "CreateKey") and callable(subclass.CreateKey) and
            hasattr(subclass, "Decrypt") and callable(subclass.Decrypt) and
            hasattr(subclass, "DeleteAlias") and callable(subclass.DeleteAlias) and
            hasattr(subclass, "DeleteCustomKeyStore") and callable(subclass.DeleteCustomKeyStore) and
            hasattr(subclass, "DeleteImportedKeyMaterial") and callable(subclass.DeleteImportedKeyMaterial) and
            hasattr(subclass, "DescribeCustomKeyStores") and callable(subclass.DescribeCustomKeyStores) and
            hasattr(subclass, "DescribeKey") and callable(subclass.DescribeKey) and
            hasattr(subclass, "DisableKey") and callable(subclass.DisableKey) and
            hasattr(subclass, "DisableKeyRotation") and callable(subclass.DisableKeyRotation) and
            hasattr(subclass, "DisconnectCustomKeyStore") and callable(subclass.DisconnectCustomKeyStore) and
            hasattr(subclass, "EnableKey") and callable(subclass.EnableKey) and
            hasattr(subclass, "EnableKeyRotation") and callable(subclass.EnableKeyRotation) and
            hasattr(subclass, "Encrypt") and callable(subclass.Encrypt) and
            hasattr(subclass, "GenerateDataKey") and callable(subclass.GenerateDataKey) and
            hasattr(subclass, "GenerateDataKeyPair") and callable(subclass.GenerateDataKeyPair) and
            hasattr(subclass, "GenerateDataKeyPairWithoutPlaintext") and callable(subclass.GenerateDataKeyPairWithoutPlaintext) and
            hasattr(subclass, "GenerateDataKeyWithoutPlaintext") and callable(subclass.GenerateDataKeyWithoutPlaintext) and
            hasattr(subclass, "GenerateRandom") and callable(subclass.GenerateRandom) and
            hasattr(subclass, "GetKeyPolicy") and callable(subclass.GetKeyPolicy) and
            hasattr(subclass, "GetKeyRotationStatus") and callable(subclass.GetKeyRotationStatus) and
            hasattr(subclass, "GetParametersForImport") and callable(subclass.GetParametersForImport) and
            hasattr(subclass, "GetPublicKey") and callable(subclass.GetPublicKey) and
            hasattr(subclass, "ImportKeyMaterial") and callable(subclass.ImportKeyMaterial) and
            hasattr(subclass, "ListAliases") and callable(subclass.ListAliases) and
            hasattr(subclass, "ListGrants") and callable(subclass.ListGrants) and
            hasattr(subclass, "ListKeyPolicies") and callable(subclass.ListKeyPolicies) and
            hasattr(subclass, "ListResourceTags") and callable(subclass.ListResourceTags) and
            hasattr(subclass, "PutKeyPolicy") and callable(subclass.PutKeyPolicy) and
            hasattr(subclass, "ReEncrypt") and callable(subclass.ReEncrypt) and
            hasattr(subclass, "ReplicateKey") and callable(subclass.ReplicateKey) and
            hasattr(subclass, "RetireGrant") and callable(subclass.RetireGrant) and
            hasattr(subclass, "RevokeGrant") and callable(subclass.RevokeGrant) and
            hasattr(subclass, "ScheduleKeyDeletion") and callable(subclass.ScheduleKeyDeletion) and
            hasattr(subclass, "Sign") and callable(subclass.Sign) and
            hasattr(subclass, "TagResource") and callable(subclass.TagResource) and
            hasattr(subclass, "UntagResource") and callable(subclass.UntagResource) and
            hasattr(subclass, "UpdateAlias") and callable(subclass.UpdateAlias) and
            hasattr(subclass, "UpdateCustomKeyStore") and callable(subclass.UpdateCustomKeyStore) and
            hasattr(subclass, "UpdateKeyDescription") and callable(subclass.UpdateKeyDescription) and
            hasattr(subclass, "UpdatePrimaryRegion") and callable(subclass.UpdatePrimaryRegion) and
            hasattr(subclass, "Verify") and callable(subclass.Verify)
        )

    # TODO-Python: Add impl with typehint to ABC

    @abc.abstractmethod
    def CancelKeyDeletion(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def ConnectCustomKeyStore(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def CreateAlias(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def CreateCustomKeyStore(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def CreateGrant(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def CreateKey(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def Decrypt(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def DeleteAlias(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def DeleteCustomKeyStore(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def DeleteImportedKeyMaterial(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def DescribeCustomKeyStores(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def DescribeKey(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def DisableKey(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def DisableKeyRotation(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def DisconnectCustomKeyStore(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def EnableKey(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def EnableKeyRotation(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def Encrypt(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def GenerateDataKey(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def GenerateDataKeyPair(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def GenerateDataKeyPairWithoutPlaintext(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def GenerateDataKeyWithoutPlaintext(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def GenerateRandom(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def GetKeyPolicy(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def GetKeyRotationStatus(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def GetParametersForImport(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def GetPublicKey(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def ImportKeyMaterial(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def ListAliases(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def ListGrants(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def ListKeyPolicies(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def ListResourceTags(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def PutKeyPolicy(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def ReEncrypt(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def ReplicateKey(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def RetireGrant(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def RevokeGrant(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def ScheduleKeyDeletion(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def Sign(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def TagResource(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def UntagResource(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def UpdateAlias(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def UpdateCustomKeyStore(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def UpdateKeyDescription(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def UpdatePrimaryRegion(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def Verify(self, native_input):
        raise NotImplementedError

class TrentService(ITrentService):
    # TODO-Python: typehint
    _impl: Any

    def __init__(self, _impl):
        self._impl = _impl

    def CancelKeyDeletion(self, native_input):
        dafny_output = self._impl.CancelKeyDeletion(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_CancelKeyDeletionRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_CancelKeyDeletionResponse(dafny_output)

    def ConnectCustomKeyStore(self, native_input):
        dafny_output = self._impl.ConnectCustomKeyStore(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_ConnectCustomKeyStoreRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ConnectCustomKeyStoreResponse(dafny_output)

    def CreateAlias(self, native_input):
        dafny_output = self._impl.CreateAlias(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_CreateAliasRequest(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def CreateCustomKeyStore(self, native_input):
        dafny_output = self._impl.CreateCustomKeyStore(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_CreateCustomKeyStoreRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_CreateCustomKeyStoreResponse(dafny_output)

    def CreateGrant(self, native_input):
        dafny_output = self._impl.CreateGrant(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_CreateGrantRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_CreateGrantResponse(dafny_output)

    def CreateKey(self, native_input):
        dafny_output = self._impl.CreateKey(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_CreateKeyRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_CreateKeyResponse(dafny_output)

    def Decrypt(self, native_input):
        dafny_output = self._impl.Decrypt(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_DecryptRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DecryptResponse(dafny_output)

    def DeleteAlias(self, native_input):
        dafny_output = self._impl.DeleteAlias(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_DeleteAliasRequest(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def DeleteCustomKeyStore(self, native_input):
        dafny_output = self._impl.DeleteCustomKeyStore(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_DeleteCustomKeyStoreRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DeleteCustomKeyStoreResponse(dafny_output)

    def DeleteImportedKeyMaterial(self, native_input):
        dafny_output = self._impl.DeleteImportedKeyMaterial(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_DeleteImportedKeyMaterialRequest(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def DescribeCustomKeyStores(self, native_input):
        dafny_output = self._impl.DescribeCustomKeyStores(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_DescribeCustomKeyStoresRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DescribeCustomKeyStoresResponse(dafny_output)

    def DescribeKey(self, native_input):
        dafny_output = self._impl.DescribeKey(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_DescribeKeyRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DescribeKeyResponse(dafny_output)

    def DisableKey(self, native_input):
        dafny_output = self._impl.DisableKey(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_DisableKeyRequest(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def DisableKeyRotation(self, native_input):
        dafny_output = self._impl.DisableKeyRotation(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_DisableKeyRotationRequest(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def DisconnectCustomKeyStore(self, native_input):
        dafny_output = self._impl.DisconnectCustomKeyStore(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_DisconnectCustomKeyStoreRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DisconnectCustomKeyStoreResponse(dafny_output)

    def EnableKey(self, native_input):
        dafny_output = self._impl.EnableKey(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_EnableKeyRequest(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def EnableKeyRotation(self, native_input):
        dafny_output = self._impl.EnableKeyRotation(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_EnableKeyRotationRequest(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def Encrypt(self, native_input):
        dafny_output = self._impl.Encrypt(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_EncryptRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_EncryptResponse(dafny_output)

    def GenerateDataKey(self, native_input):
        dafny_output = self._impl.GenerateDataKey(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_GenerateDataKeyRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GenerateDataKeyResponse(dafny_output)

    def GenerateDataKeyPair(self, native_input):
        dafny_output = self._impl.GenerateDataKeyPair(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_GenerateDataKeyPairRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GenerateDataKeyPairResponse(dafny_output)

    def GenerateDataKeyPairWithoutPlaintext(self, native_input):
        dafny_output = self._impl.GenerateDataKeyPairWithoutPlaintext(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_GenerateDataKeyPairWithoutPlaintextRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GenerateDataKeyPairWithoutPlaintextResponse(dafny_output)

    def GenerateDataKeyWithoutPlaintext(self, native_input):
        dafny_output = self._impl.GenerateDataKeyWithoutPlaintext(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_GenerateDataKeyWithoutPlaintextRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GenerateDataKeyWithoutPlaintextResponse(dafny_output)

    def GenerateRandom(self, native_input):
        dafny_output = self._impl.GenerateRandom(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_GenerateRandomRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GenerateRandomResponse(dafny_output)

    def GetKeyPolicy(self, native_input):
        dafny_output = self._impl.GetKeyPolicy(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_GetKeyPolicyRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GetKeyPolicyResponse(dafny_output)

    def GetKeyRotationStatus(self, native_input):
        dafny_output = self._impl.GetKeyRotationStatus(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_GetKeyRotationStatusRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GetKeyRotationStatusResponse(dafny_output)

    def GetParametersForImport(self, native_input):
        dafny_output = self._impl.GetParametersForImport(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_GetParametersForImportRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GetParametersForImportResponse(dafny_output)

    def GetPublicKey(self, native_input):
        dafny_output = self._impl.GetPublicKey(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_GetPublicKeyRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GetPublicKeyResponse(dafny_output)

    def ImportKeyMaterial(self, native_input):
        dafny_output = self._impl.ImportKeyMaterial(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_ImportKeyMaterialRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ImportKeyMaterialResponse(dafny_output)

    def ListAliases(self, native_input):
        dafny_output = self._impl.ListAliases(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_ListAliasesRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ListAliasesResponse(dafny_output)

    def ListGrants(self, native_input):
        dafny_output = self._impl.ListGrants(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_ListGrantsRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ListGrantsResponse(dafny_output)

    def ListKeyPolicies(self, native_input):
        dafny_output = self._impl.ListKeyPolicies(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_ListKeyPoliciesRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ListKeyPoliciesResponse(dafny_output)

    def ListResourceTags(self, native_input):
        dafny_output = self._impl.ListResourceTags(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_ListResourceTagsRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ListResourceTagsResponse(dafny_output)

    def PutKeyPolicy(self, native_input):
        dafny_output = self._impl.PutKeyPolicy(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_PutKeyPolicyRequest(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def ReEncrypt(self, native_input):
        dafny_output = self._impl.ReEncrypt(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_ReEncryptRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ReEncryptResponse(dafny_output)

    def ReplicateKey(self, native_input):
        dafny_output = self._impl.ReplicateKey(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_ReplicateKeyRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ReplicateKeyResponse(dafny_output)

    def RetireGrant(self, native_input):
        dafny_output = self._impl.RetireGrant(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_RetireGrantRequest(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def RevokeGrant(self, native_input):
        dafny_output = self._impl.RevokeGrant(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_RevokeGrantRequest(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def ScheduleKeyDeletion(self, native_input):
        dafny_output = self._impl.ScheduleKeyDeletion(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_ScheduleKeyDeletionRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ScheduleKeyDeletionResponse(dafny_output)

    def Sign(self, native_input):
        dafny_output = self._impl.Sign(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_SignRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_SignResponse(dafny_output)

    def TagResource(self, native_input):
        dafny_output = self._impl.TagResource(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_TagResourceRequest(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def UntagResource(self, native_input):
        dafny_output = self._impl.UntagResource(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_UntagResourceRequest(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def UpdateAlias(self, native_input):
        dafny_output = self._impl.UpdateAlias(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_UpdateAliasRequest(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def UpdateCustomKeyStore(self, native_input):
        dafny_output = self._impl.UpdateCustomKeyStore(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_UpdateCustomKeyStoreRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_UpdateCustomKeyStoreResponse(dafny_output)

    def UpdateKeyDescription(self, native_input):
        dafny_output = self._impl.UpdateKeyDescription(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_UpdateKeyDescriptionRequest(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def UpdatePrimaryRegion(self, native_input):
        dafny_output = self._impl.UpdatePrimaryRegion(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_UpdatePrimaryRegionRequest(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def Verify(self, native_input):
        dafny_output = self._impl.Verify(com_amazonaws_kms.smithygenerated.aws_sdk_to_dafny.AwsSdkToDafny_com_amazonaws_kms_VerifyRequest(native_input))
        return com_amazonaws_kms.smithygenerated.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_VerifyResponse(dafny_output)

class IKeyStore(metaclass=abc.ABCMeta):
    @classmethod
    def __subclasshook__(cls, subclass):
        return (
            hasattr(subclass, "GetKeyStoreInfo") and callable(subclass.GetKeyStoreInfo) and
            hasattr(subclass, "CreateKeyStore") and callable(subclass.CreateKeyStore) and
            hasattr(subclass, "CreateKey") and callable(subclass.CreateKey) and
            hasattr(subclass, "VersionKey") and callable(subclass.VersionKey) and
            hasattr(subclass, "GetActiveBranchKey") and callable(subclass.GetActiveBranchKey) and
            hasattr(subclass, "GetBranchKeyVersion") and callable(subclass.GetBranchKeyVersion) and
            hasattr(subclass, "GetBeaconKey") and callable(subclass.GetBeaconKey)
        )

    # TODO-Python: Add impl with typehint to ABC

    @abc.abstractmethod
    def GetKeyStoreInfo(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def CreateKeyStore(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def CreateKey(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def VersionKey(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def GetActiveBranchKey(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def GetBranchKeyVersion(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def GetBeaconKey(self, native_input):
        raise NotImplementedError

class KeyStore(IKeyStore):
    # TODO-Python: typehint
    _impl: Any

    def __init__(self, _impl):
        self._impl = _impl

    def GetKeyStoreInfo(self, native_input):
        dafny_output = self._impl.GetKeyStoreInfo(aws_cryptography_materialproviders.smithygenerated.smithy_to_dafny.SmithyToDafny_smithy_api_Unit(native_input))
        return aws_cryptography_keystore.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_keystore_GetKeyStoreInfoOutput(dafny_output)

    def CreateKeyStore(self, native_input):
        dafny_output = self._impl.CreateKeyStore(aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_CreateKeyStoreInput(native_input))
        return aws_cryptography_keystore.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_keystore_CreateKeyStoreOutput(dafny_output)

    def CreateKey(self, native_input):
        dafny_output = self._impl.CreateKey(aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_CreateKeyInput(native_input))
        return aws_cryptography_keystore.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_keystore_CreateKeyOutput(dafny_output)

    def VersionKey(self, native_input):
        dafny_output = self._impl.VersionKey(aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_VersionKeyInput(native_input))
        return aws_cryptography_keystore.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_keystore_VersionKeyOutput(dafny_output)

    def GetActiveBranchKey(self, native_input):
        dafny_output = self._impl.GetActiveBranchKey(aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_GetActiveBranchKeyInput(native_input))
        return aws_cryptography_keystore.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_keystore_GetActiveBranchKeyOutput(dafny_output)

    def GetBranchKeyVersion(self, native_input):
        dafny_output = self._impl.GetBranchKeyVersion(aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_GetBranchKeyVersionInput(native_input))
        return aws_cryptography_keystore.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_keystore_GetBranchKeyVersionOutput(dafny_output)

    def GetBeaconKey(self, native_input):
        dafny_output = self._impl.GetBeaconKey(aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_GetBeaconKeyInput(native_input))
        return aws_cryptography_keystore.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_keystore_GetBeaconKeyOutput(dafny_output)

class IKeyring(metaclass=abc.ABCMeta):
    @classmethod
    def __subclasshook__(cls, subclass):
        return (
            hasattr(subclass, "OnEncrypt") and callable(subclass.OnEncrypt) and
            hasattr(subclass, "OnDecrypt") and callable(subclass.OnDecrypt)
        )

    # TODO-Python: Add impl with typehint to ABC

    @abc.abstractmethod
    def OnEncrypt(self, native_input):
        raise NotImplementedError

    @abc.abstractmethod
    def OnDecrypt(self, native_input):
        raise NotImplementedError

class Keyring(IKeyring):
    # TODO-Python: typehint
    _impl: Any

    def __init__(self, _impl):
        self._impl = _impl

    def OnEncrypt(self, native_input):
        dafny_output = self._impl.OnEncrypt(aws_cryptography_materialproviders.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_OnEncryptInput(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_materialproviders_OnEncryptOutput(dafny_output)

    def OnDecrypt(self, native_input):
        dafny_output = self._impl.OnDecrypt(aws_cryptography_materialproviders.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_OnDecryptInput(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_materialproviders_OnDecryptOutput(dafny_output)

class IBranchKeyIdSupplier(metaclass=abc.ABCMeta):
    @classmethod
    def __subclasshook__(cls, subclass):
        return (
            hasattr(subclass, "GetBranchKeyId") and callable(subclass.GetBranchKeyId)
        )

    # TODO-Python: Add impl with typehint to ABC

    @abc.abstractmethod
    def GetBranchKeyId(self, native_input):
        raise NotImplementedError

class BranchKeyIdSupplier(IBranchKeyIdSupplier):
    # TODO-Python: typehint
    _impl: Any

    def __init__(self, _impl):
        self._impl = _impl

    def GetBranchKeyId(self, native_input):
        dafny_output = self._impl.GetBranchKeyId(aws_cryptography_materialproviders.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_GetBranchKeyIdInput(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_materialproviders_GetBranchKeyIdOutput(dafny_output)

class IClientSupplier(metaclass=abc.ABCMeta):
    @classmethod
    def __subclasshook__(cls, subclass):
        return (
            hasattr(subclass, "GetClient") and callable(subclass.GetClient)
        )

    # TODO-Python: Add impl with typehint to ABC

    @abc.abstractmethod
    def GetClient(self, native_input):
        raise NotImplementedError

class ClientSupplier(IClientSupplier):
    # TODO-Python: typehint
    _impl: Any

    def __init__(self, _impl):
        self._impl = _impl

    def GetClient(self, native_input):
        dafny_output = self._impl.GetClient(aws_cryptography_materialproviders.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_GetClientInput(native_input))
        return aws_cryptography_materialproviders.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_materialproviders_GetClientOutput(dafny_output)
