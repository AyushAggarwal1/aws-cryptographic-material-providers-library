# Code generated by smithy-python-codegen DO NOT EDIT.

import abc
import aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.dafny_to_smithy
import aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models
import aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny
import botocore.client
import software_amazon_cryptography_materialproviders_internaldafny_types
from typing import Any, Dict



class IBranchKeyIdSupplier(metaclass=abc.ABCMeta):

    @classmethod
    def __subclasshook__(cls, subclass):
        return (
            hasattr(subclass, "GetBranchKeyId") and callable(subclass.GetBranchKeyId)
        )

    @abc.abstractmethod
    def GetBranchKeyId(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.GetBranchKeyIdInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.GetBranchKeyIdOutput':
        """Given the Encryption Context associated with this encryption or decryption,
        returns the branch key that should be responsible for unwrapping or wrapping the
        data key.
        :param input: Inputs for determining the Branch Key which should be used to wrap
        or unwrap the data key for this encryption or decryption
        :returns: Outputs for the Branch Key responsible for wrapping or unwrapping the
        data key in this encryption or decryption.
        """
        raise NotImplementedError

class BranchKeyIdSupplier(IBranchKeyIdSupplier):

    _impl: software_amazon_cryptography_materialproviders_internaldafny_types.IBranchKeyIdSupplier

    def __init__(self, _impl: software_amazon_cryptography_materialproviders_internaldafny_types.IBranchKeyIdSupplier):
        self._impl = _impl

    def GetBranchKeyId(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.GetBranchKeyIdInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.GetBranchKeyIdOutput':
        """Given the Encryption Context associated with this encryption or decryption,
        returns the branch key that should be responsible for unwrapping or wrapping the
        data key.
        :param input: Inputs for determining the Branch Key which should be used to wrap
        or unwrap the data key for this encryption or decryption
        :returns: Outputs for the Branch Key responsible for wrapping or unwrapping the
        data key in this encryption or decryption.
        """
        dafny_output = self._impl.GetBranchKeyId(aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_GetBranchKeyIdInput(input)).value
        return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.dafny_to_smithy.DafnyToSmithy_aws_cryptography_materialproviders_GetBranchKeyIdOutput(dafny_output)

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> 'BranchKeyIdSupplier':
        return BranchKeyIdSupplier(d['_impl'])

    def as_dict(self) -> Dict[str, Any]:
        return {'_impl': self._impl}

class IClientSupplier(metaclass=abc.ABCMeta):

    @classmethod
    def __subclasshook__(cls, subclass):
        return (
            hasattr(subclass, "GetClient") and callable(subclass.GetClient)
        )

    @abc.abstractmethod
    def GetClient(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.GetClientInput') -> 'botocore.client.BaseClient':
        """Returns an AWS KMS Client.
        :param input: Inputs for getting a AWS KMS Client.
        """
        raise NotImplementedError

class ClientSupplier(IClientSupplier):

    _impl: software_amazon_cryptography_materialproviders_internaldafny_types.IClientSupplier

    def __init__(self, _impl: software_amazon_cryptography_materialproviders_internaldafny_types.IClientSupplier):
        self._impl = _impl

    def GetClient(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.GetClientInput') -> 'botocore.client.BaseClient':
        """Returns an AWS KMS Client.
        :param input: Inputs for getting a AWS KMS Client.
        """
        dafny_output = self._impl.GetClient(aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_GetClientInput(input)).value
        return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.dafny_to_smithy.DafnyToSmithy_aws_cryptography_materialproviders_GetClientOutput(dafny_output)

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> 'ClientSupplier':
        return ClientSupplier(d['_impl'])

    def as_dict(self) -> Dict[str, Any]:
        return {'_impl': self._impl}

class ICryptographicMaterialsCache(metaclass=abc.ABCMeta):

    @classmethod
    def __subclasshook__(cls, subclass):
        return (
            hasattr(subclass, "PutCacheEntry") and callable(subclass.PutCacheEntry) and
            hasattr(subclass, "GetCacheEntry") and callable(subclass.GetCacheEntry) and
            hasattr(subclass, "UpdateUsageMetadata") and callable(subclass.UpdateUsageMetadata) and
            hasattr(subclass, "DeleteCacheEntry") and callable(subclass.DeleteCacheEntry)
        )

    @abc.abstractmethod
    def PutCacheEntry(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.PutCacheEntryInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.Unit':
        raise NotImplementedError

    @abc.abstractmethod
    def GetCacheEntry(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.GetCacheEntryInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.GetCacheEntryOutput':
        raise NotImplementedError

    @abc.abstractmethod
    def UpdateUsageMetadata(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.UpdateUsageMetadataInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.Unit':
        raise NotImplementedError

    @abc.abstractmethod
    def DeleteCacheEntry(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.DeleteCacheEntryInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.Unit':
        raise NotImplementedError

class CryptographicMaterialsCache(ICryptographicMaterialsCache):

    _impl: software_amazon_cryptography_materialproviders_internaldafny_types.ICryptographicMaterialsCache

    def __init__(self, _impl: software_amazon_cryptography_materialproviders_internaldafny_types.ICryptographicMaterialsCache):
        self._impl = _impl

    def PutCacheEntry(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.PutCacheEntryInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.Unit':
        dafny_output = self._impl.PutCacheEntry(aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_PutCacheEntryInput(input)).value
        return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def GetCacheEntry(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.GetCacheEntryInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.GetCacheEntryOutput':
        dafny_output = self._impl.GetCacheEntry(aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_GetCacheEntryInput(input)).value
        return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.dafny_to_smithy.DafnyToSmithy_aws_cryptography_materialproviders_GetCacheEntryOutput(dafny_output)

    def UpdateUsageMetadata(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.UpdateUsageMetadataInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.Unit':
        dafny_output = self._impl.UpdateUsageMetadata(aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_UpdateUsageMetadataInput(input)).value
        return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    def DeleteCacheEntry(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.DeleteCacheEntryInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.Unit':
        dafny_output = self._impl.DeleteCacheEntry(aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_DeleteCacheEntryInput(input)).value
        return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> 'CryptographicMaterialsCache':
        return CryptographicMaterialsCache(d['_impl'])

    def as_dict(self) -> Dict[str, Any]:
        return {'_impl': self._impl}

class ICryptographicMaterialsManager(metaclass=abc.ABCMeta):

    @classmethod
    def __subclasshook__(cls, subclass):
        return (
            hasattr(subclass, "GetEncryptionMaterials") and callable(subclass.GetEncryptionMaterials) and
            hasattr(subclass, "DecryptMaterials") and callable(subclass.DecryptMaterials)
        )

    @abc.abstractmethod
    def GetEncryptionMaterials(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.GetEncryptionMaterialsInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.GetEncryptionMaterialsOutput':
        raise NotImplementedError

    @abc.abstractmethod
    def DecryptMaterials(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.DecryptMaterialsInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.DecryptMaterialsOutput':
        raise NotImplementedError

class CryptographicMaterialsManager(ICryptographicMaterialsManager):

    _impl: software_amazon_cryptography_materialproviders_internaldafny_types.ICryptographicMaterialsManager

    def __init__(self, _impl: software_amazon_cryptography_materialproviders_internaldafny_types.ICryptographicMaterialsManager):
        self._impl = _impl

    def GetEncryptionMaterials(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.GetEncryptionMaterialsInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.GetEncryptionMaterialsOutput':
        dafny_output = self._impl.GetEncryptionMaterials(aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_GetEncryptionMaterialsInput(input)).value
        return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.dafny_to_smithy.DafnyToSmithy_aws_cryptography_materialproviders_GetEncryptionMaterialsOutput(dafny_output)

    def DecryptMaterials(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.DecryptMaterialsInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.DecryptMaterialsOutput':
        dafny_output = self._impl.DecryptMaterials(aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_DecryptMaterialsInput(input)).value
        return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.dafny_to_smithy.DafnyToSmithy_aws_cryptography_materialproviders_DecryptMaterialsOutput(dafny_output)

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> 'CryptographicMaterialsManager':
        return CryptographicMaterialsManager(d['_impl'])

    def as_dict(self) -> Dict[str, Any]:
        return {'_impl': self._impl}

class IKeyring(metaclass=abc.ABCMeta):

    @classmethod
    def __subclasshook__(cls, subclass):
        return (
            hasattr(subclass, "OnEncrypt") and callable(subclass.OnEncrypt) and
            hasattr(subclass, "OnDecrypt") and callable(subclass.OnDecrypt)
        )

    @abc.abstractmethod
    def OnEncrypt(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.OnEncryptInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.OnEncryptOutput':
        raise NotImplementedError

    @abc.abstractmethod
    def OnDecrypt(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.OnDecryptInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.OnDecryptOutput':
        raise NotImplementedError

class Keyring(IKeyring):

    _impl: software_amazon_cryptography_materialproviders_internaldafny_types.IKeyring

    def __init__(self, _impl: software_amazon_cryptography_materialproviders_internaldafny_types.IKeyring):
        self._impl = _impl

    def OnEncrypt(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.OnEncryptInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.OnEncryptOutput':
        dafny_output = self._impl.OnEncrypt(aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_OnEncryptInput(input)).value
        return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.dafny_to_smithy.DafnyToSmithy_aws_cryptography_materialproviders_OnEncryptOutput(dafny_output)

    def OnDecrypt(self, input: 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.OnDecryptInput') -> 'aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.OnDecryptOutput':
        dafny_output = self._impl.OnDecrypt(aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.SmithyToDafny_aws_cryptography_materialproviders_OnDecryptInput(input)).value
        return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.dafny_to_smithy.DafnyToSmithy_aws_cryptography_materialproviders_OnDecryptOutput(dafny_output)

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> 'Keyring':
        return Keyring(d['_impl'])

    def as_dict(self) -> Dict[str, Any]:
        return {'_impl': self._impl}
