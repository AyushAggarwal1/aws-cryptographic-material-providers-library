# Code generated by smithy-python-codegen DO NOT EDIT.

import aws_cryptography_keystore.smithygenerated.dafny_to_smithy
import aws_cryptography_keystore.smithygenerated.errors
import aws_cryptography_keystore.smithygenerated.models
import aws_cryptography_keystore.smithygenerated.smithy_to_dafny
import module_
from software_amazon_cryptography_keystore_internaldafny_types import (
    CreateKeyInput_CreateKeyInput as DafnyCreateKeyInput,
    CreateKeyOutput_CreateKeyOutput as DafnyCreateKeyOutput,
    CreateKeyStoreInput_CreateKeyStoreInput as DafnyCreateKeyStoreInput,
    CreateKeyStoreOutput_CreateKeyStoreOutput as DafnyCreateKeyStoreOutput,
    GetActiveBranchKeyInput_GetActiveBranchKeyInput as DafnyGetActiveBranchKeyInput,
    GetActiveBranchKeyOutput_GetActiveBranchKeyOutput as DafnyGetActiveBranchKeyOutput,
    GetBeaconKeyInput_GetBeaconKeyInput as DafnyGetBeaconKeyInput,
    GetBeaconKeyOutput_GetBeaconKeyOutput as DafnyGetBeaconKeyOutput,
    GetBranchKeyVersionInput_GetBranchKeyVersionInput as DafnyGetBranchKeyVersionInput,
    GetBranchKeyVersionOutput_GetBranchKeyVersionOutput as DafnyGetBranchKeyVersionOutput,
    GetKeyStoreInfoOutput_GetKeyStoreInfoOutput as DafnyGetKeyStoreInfoOutput,
    VersionKeyInput_VersionKeyInput as DafnyVersionKeyInput,
    VersionKeyOutput_VersionKeyOutput as DafnyVersionKeyOutput,
)

from .errors import (
    CollectionOfErrors,
    DynamoDB_20120810,
    OpaqueError,
    ServiceError,
    TrentService,
)
from com_amazonaws_dynamodb.smithygenerated.shim import (
    smithy_error_to_dafny_error as com_amazonaws_dynamodb_smithy_error_to_dafny_error,
)
from com_amazonaws_kms.smithygenerated.shim import (
    smithy_error_to_dafny_error as com_amazonaws_kms_smithy_error_to_dafny_error,
)


import Wrappers
import asyncio
import software_amazon_cryptography_keystore_internaldafny_types
import aws_cryptography_keystore.smithygenerated.client as client_impl

def smithy_error_to_dafny_error(e: ServiceError):
    '''
    Converts the provided native Smithy-modelled error
    into the corresponding Dafny error.
    '''
    if isinstance(e, aws_cryptography_keystore.smithygenerated.errors.KeyStoreException):
        return software_amazon_cryptography_keystore_internaldafny_types.Error_KeyStoreException(message=e.message)

    if isinstance(e, DynamoDB_20120810):
        return software_amazon_cryptography_keystore_internaldafny_types.Error_DynamoDB_20120810(com_amazonaws_dynamodb_smithy_error_to_dafny_error(e.message))

    if isinstance(e, TrentService):
        return software_amazon_cryptography_keystore_internaldafny_types.Error_TrentService(com_amazonaws_kms_smithy_error_to_dafny_error(e.message))

    if isinstance(e, CollectionOfErrors):
        return software_amazon_cryptography_keystore_internaldafny_types.Error_CollectionOfErrors(message=e.message, list=e.list)

    if isinstance(e, OpaqueError):
        return software_amazon_cryptography_keystore_internaldafny_types.Error_Opaque(obj=e.obj)

class KeyStoreShim(software_amazon_cryptography_keystore_internaldafny_types.IKeyStoreClient):
    def __init__(self, _impl: client_impl) :
        self._impl = _impl

    def GetKeyStoreInfo(self, ) -> DafnyGetKeyStoreInfoOutput:
        smithy_client_request: Unit = aws_cryptography_keystore.smithygenerated.dafny_to_smithy.DafnyToSmithy_smithy_api_Unit()
        try:
            smithy_client_response = asyncio.run(self._impl.get_key_store_info(smithy_client_request))
        except ServiceError as e:
            return Wrappers.Result_Failure(smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_GetKeyStoreInfoOutput(smithy_client_response))

    def CreateKeyStore(self, input: DafnyCreateKeyStoreInput) -> DafnyCreateKeyStoreOutput:
        smithy_client_request: CreateKeyStoreInput = aws_cryptography_keystore.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_keystore_CreateKeyStoreInput(input)
        try:
            smithy_client_response = asyncio.run(self._impl.create_key_store(smithy_client_request))
        except ServiceError as e:
            return Wrappers.Result_Failure(smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_CreateKeyStoreOutput(smithy_client_response))

    def CreateKey(self, input: DafnyCreateKeyInput) -> DafnyCreateKeyOutput:
        smithy_client_request: CreateKeyInput = aws_cryptography_keystore.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_keystore_CreateKeyInput(input)
        try:
            smithy_client_response = asyncio.run(self._impl.create_key(smithy_client_request))
        except ServiceError as e:
            return Wrappers.Result_Failure(smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_CreateKeyOutput(smithy_client_response))

    def VersionKey(self, input: DafnyVersionKeyInput) -> DafnyVersionKeyOutput:
        smithy_client_request: VersionKeyInput = aws_cryptography_keystore.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_keystore_VersionKeyInput(input)
        try:
            smithy_client_response = asyncio.run(self._impl.version_key(smithy_client_request))
        except ServiceError as e:
            return Wrappers.Result_Failure(smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_VersionKeyOutput(smithy_client_response))

    def GetActiveBranchKey(self, input: DafnyGetActiveBranchKeyInput) -> DafnyGetActiveBranchKeyOutput:
        smithy_client_request: GetActiveBranchKeyInput = aws_cryptography_keystore.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_keystore_GetActiveBranchKeyInput(input)
        try:
            smithy_client_response = asyncio.run(self._impl.get_active_branch_key(smithy_client_request))
        except ServiceError as e:
            return Wrappers.Result_Failure(smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_GetActiveBranchKeyOutput(smithy_client_response))

    def GetBranchKeyVersion(self, input: DafnyGetBranchKeyVersionInput) -> DafnyGetBranchKeyVersionOutput:
        smithy_client_request: GetBranchKeyVersionInput = aws_cryptography_keystore.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_keystore_GetBranchKeyVersionInput(input)
        try:
            smithy_client_response = asyncio.run(self._impl.get_branch_key_version(smithy_client_request))
        except ServiceError as e:
            return Wrappers.Result_Failure(smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_GetBranchKeyVersionOutput(smithy_client_response))

    def GetBeaconKey(self, input: DafnyGetBeaconKeyInput) -> DafnyGetBeaconKeyOutput:
        smithy_client_request: GetBeaconKeyInput = aws_cryptography_keystore.smithygenerated.dafny_to_smithy.DafnyToSmithy_aws_cryptography_keystore_GetBeaconKeyInput(input)
        try:
            smithy_client_response = asyncio.run(self._impl.get_beacon_key(smithy_client_request))
        except ServiceError as e:
            return Wrappers.Result_Failure(smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_keystore.smithygenerated.smithy_to_dafny.SmithyToDafny_aws_cryptography_keystore_GetBeaconKeyOutput(smithy_client_response))
