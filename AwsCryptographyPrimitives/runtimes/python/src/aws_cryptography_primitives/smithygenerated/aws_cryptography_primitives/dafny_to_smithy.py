# Code generated by smithy-python-codegen DO NOT EDIT.

import aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.config
import aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy
import aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models


def DafnyToSmithy_aws_cryptography_primitives_GenerateRandomBytesInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GenerateRandomBytesInput(
        length=input.length,
    )

def DafnyToSmithy_aws_cryptography_primitives_DigestInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.DigestInput(
        digest_algorithm=input.digestAlgorithm,
        message=bytes(input.message),
    )

def DafnyToSmithy_aws_cryptography_primitives_HMacInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.HMacInput(
        digest_algorithm=input.digestAlgorithm,
        key=bytes(input.key),
        message=bytes(input.message),
    )

def DafnyToSmithy_aws_cryptography_primitives_HkdfExtractInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.HkdfExtractInput(
        digest_algorithm=input.digestAlgorithm,
        salt=(bytes(input.salt.value)) if (input.salt.is_Some) else None,
        ikm=bytes(input.ikm),
    )

def DafnyToSmithy_aws_cryptography_primitives_HkdfExpandInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.HkdfExpandInput(
        digest_algorithm=input.digestAlgorithm,
        prk=bytes(input.prk),
        info=bytes(input.info),
        expected_length=input.expectedLength,
    )

def DafnyToSmithy_aws_cryptography_primitives_HkdfInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.HkdfInput(
        digest_algorithm=input.digestAlgorithm,
        salt=(bytes(input.salt.value)) if (input.salt.is_Some) else None,
        ikm=bytes(input.ikm),
        info=bytes(input.info),
        expected_length=input.expectedLength,
    )

def DafnyToSmithy_aws_cryptography_primitives_KdfCtrInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.KdfCtrInput(
        digest_algorithm=input.digestAlgorithm,
        ikm=bytes(input.ikm),
        expected_length=input.expectedLength,
        purpose=(bytes(input.purpose.value)) if (input.purpose.is_Some) else None,
        nonce=(bytes(input.nonce.value)) if (input.nonce.is_Some) else None,
    )

def DafnyToSmithy_aws_cryptography_primitives_AesKdfCtrInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.AesKdfCtrInput(
        ikm=bytes(input.ikm),
        expected_length=input.expectedLength,
        nonce=(bytes(input.nonce.value)) if (input.nonce.is_Some) else None,
    )

def DafnyToSmithy_aws_cryptography_primitives_AES_GCM(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.AES_GCM(
        key_length=input.keyLength,
        tag_length=input.tagLength,
        iv_length=input.ivLength,
    )

def DafnyToSmithy_aws_cryptography_primitives_AESEncryptInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.AESEncryptInput(
        enc_alg=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.DafnyToSmithy_aws_cryptography_primitives_AES_GCM(input.encAlg),
        iv=bytes(input.iv),
        key=bytes(input.key),
        msg=bytes(input.msg),
        aad=bytes(input.aad),
    )

def DafnyToSmithy_aws_cryptography_primitives_AESDecryptInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.AESDecryptInput(
        enc_alg=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.DafnyToSmithy_aws_cryptography_primitives_AES_GCM(input.encAlg),
        key=bytes(input.key),
        cipher_txt=bytes(input.cipherTxt),
        auth_tag=bytes(input.authTag),
        iv=bytes(input.iv),
        aad=bytes(input.aad),
    )

def DafnyToSmithy_aws_cryptography_primitives_GenerateRSAKeyPairInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GenerateRSAKeyPairInput(
        length_bits=input.lengthBits,
    )

def DafnyToSmithy_aws_cryptography_primitives_GetRSAKeyModulusLengthInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GetRSAKeyModulusLengthInput(
        public_key=bytes(input.publicKey),
    )

def DafnyToSmithy_aws_cryptography_primitives_RSADecryptInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.RSADecryptInput(
        padding=input.padding,
        private_key=bytes(input.privateKey),
        cipher_text=bytes(input.cipherText),
    )

def DafnyToSmithy_aws_cryptography_primitives_RSAEncryptInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.RSAEncryptInput(
        padding=input.padding,
        public_key=bytes(input.publicKey),
        plaintext=bytes(input.plaintext),
    )

def DafnyToSmithy_aws_cryptography_primitives_GenerateECDSASignatureKeyInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GenerateECDSASignatureKeyInput(
        signature_algorithm=input.signatureAlgorithm,
    )

def DafnyToSmithy_aws_cryptography_primitives_ECDSASignInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.ECDSASignInput(
        signature_algorithm=input.signatureAlgorithm,
        signing_key=bytes(input.signingKey),
        message=bytes(input.message),
    )

def DafnyToSmithy_aws_cryptography_primitives_ECDSAVerifyInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.ECDSAVerifyInput(
        signature_algorithm=input.signatureAlgorithm,
        verification_key=bytes(input.verificationKey),
        message=bytes(input.message),
        signature=bytes(input.signature),
    )

def DafnyToSmithy_aws_cryptography_primitives_GenerateRandomBytesOutput(input):
    return bytes(input)

def DafnyToSmithy_aws_cryptography_primitives_DigestOutput(input):
    return bytes(input)

def DafnyToSmithy_aws_cryptography_primitives_HMacOutput(input):
    return bytes(input)

def DafnyToSmithy_aws_cryptography_primitives_HkdfExtractOutput(input):
    return bytes(input)

def DafnyToSmithy_aws_cryptography_primitives_HkdfExpandOutput(input):
    return bytes(input)

def DafnyToSmithy_aws_cryptography_primitives_HkdfOutput(input):
    return bytes(input)

def DafnyToSmithy_aws_cryptography_primitives_KdfCtrOutput(input):
    return bytes(input)

def DafnyToSmithy_aws_cryptography_primitives_AesKdfCtrOutput(input):
    return bytes(input)

def DafnyToSmithy_aws_cryptography_primitives_AESEncryptOutput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.AESEncryptOutput(
        cipher_text=bytes(input.cipherText),
        auth_tag=bytes(input.authTag),
    )

def DafnyToSmithy_aws_cryptography_primitives_AESDecryptOutput(input):
    return bytes(input)

def DafnyToSmithy_aws_cryptography_primitives_RSAPublicKey(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.RSAPublicKey(
        length_bits=input.lengthBits,
        pem=bytes(input.pem),
    )

def DafnyToSmithy_aws_cryptography_primitives_RSAPrivateKey(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.RSAPrivateKey(
        length_bits=input.lengthBits,
        pem=bytes(input.pem),
    )

def DafnyToSmithy_aws_cryptography_primitives_GenerateRSAKeyPairOutput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GenerateRSAKeyPairOutput(
        public_key=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.DafnyToSmithy_aws_cryptography_primitives_RSAPublicKey(input.publicKey),
        private_key=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.DafnyToSmithy_aws_cryptography_primitives_RSAPrivateKey(input.privateKey),
    )

def DafnyToSmithy_aws_cryptography_primitives_GetRSAKeyModulusLengthOutput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GetRSAKeyModulusLengthOutput(
        length=input.length,
    )

def DafnyToSmithy_aws_cryptography_primitives_RSADecryptOutput(input):
    return bytes(input)

def DafnyToSmithy_aws_cryptography_primitives_RSAEncryptOutput(input):
    return bytes(input)

def DafnyToSmithy_aws_cryptography_primitives_GenerateECDSASignatureKeyOutput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GenerateECDSASignatureKeyOutput(
        signature_algorithm=input.signatureAlgorithm,
        verification_key=bytes(input.verificationKey),
        signing_key=bytes(input.signingKey),
    )

def DafnyToSmithy_aws_cryptography_primitives_ECDSASignOutput(input):
    return bytes(input)

def DafnyToSmithy_aws_cryptography_primitives_ECDSAVerifyOutput(input):
    return input

def DafnyToSmithy_aws_cryptography_primitives_CryptoConfig(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.config.CryptoConfig(
    )
