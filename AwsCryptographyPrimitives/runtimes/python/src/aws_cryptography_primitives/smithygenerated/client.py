# Code generated by smithy-python-codegen DO NOT EDIT.

from typing import TypeVar

from .plugin import set_config_impl

from .config import Config, Plugin
from .models import (
    AESDecryptInput,
    AESDecryptOutput,
    AESEncryptInput,
    AESEncryptOutput,
    AesKdfCtrInput,
    AesKdfCtrOutput,
    DigestInput,
    DigestOutput,
    ECDSASignInput,
    ECDSASignOutput,
    ECDSAVerifyInput,
    ECDSAVerifyOutput,
    GenerateECDSASignatureKeyInput,
    GenerateECDSASignatureKeyOutput,
    GenerateRSAKeyPairInput,
    GenerateRSAKeyPairOutput,
    GenerateRandomBytesInput,
    GenerateRandomBytesOutput,
    GetRSAKeyModulusLengthInput,
    GetRSAKeyModulusLengthOutput,
    HMacInput,
    HMacOutput,
    HkdfExpandInput,
    HkdfExpandOutput,
    HkdfExtractInput,
    HkdfExtractOutput,
    HkdfInput,
    HkdfOutput,
    KdfCtrInput,
    KdfCtrOutput,
    RSADecryptInput,
    RSADecryptOutput,
    RSAEncryptInput,
    RSAEncryptOutput,
)


Input = TypeVar("Input")
Output = TypeVar("Output")

class AwsCryptographicPrimitives:
    """Client for AwsCryptographicPrimitives

    :param config: Optional configuration for the client. Here you can set things like the
    endpoint for HTTP services or auth credentials.

    :param plugins: A list of callables that modify the configuration dynamically. These
    can be used to set defaults, for example.
    """
    def __init__(self, config: Config | None = None, plugins: list[Plugin] | None = None):
        self._config = config or Config()

        client_plugins: list[Plugin] = [
            set_config_impl,
        ]
        if plugins:
            client_plugins.extend(plugins)

        for plugin in client_plugins:
            plugin(self._config)

    async def aes_decrypt(self, input: AESDecryptInput, plugins: list[Plugin] | None = None) -> AESDecryptOutput:
        """Invokes the AESDecrypt operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()

    async def aes_encrypt(self, input: AESEncryptInput, plugins: list[Plugin] | None = None) -> AESEncryptOutput:
        """Invokes the AESEncrypt operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()

    async def aes_kdf_counter_mode(self, input: AesKdfCtrInput, plugins: list[Plugin] | None = None) -> AesKdfCtrOutput:
        """Invokes the AesKdfCounterMode operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()

    async def digest(self, input: DigestInput, plugins: list[Plugin] | None = None) -> DigestOutput:
        """Invokes the Digest operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()

    async def ecdsa_sign(self, input: ECDSASignInput, plugins: list[Plugin] | None = None) -> ECDSASignOutput:
        """Invokes the ECDSASign operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()

    async def ecdsa_verify(self, input: ECDSAVerifyInput, plugins: list[Plugin] | None = None) -> ECDSAVerifyOutput:
        """Invokes the ECDSAVerify operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()

    async def generate_ecdsa_signature_key(self, input: GenerateECDSASignatureKeyInput, plugins: list[Plugin] | None = None) -> GenerateECDSASignatureKeyOutput:
        """Invokes the GenerateECDSASignatureKey operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()

    async def generate_random_bytes(self, input: GenerateRandomBytesInput, plugins: list[Plugin] | None = None) -> GenerateRandomBytesOutput:
        """Invokes the GenerateRandomBytes operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()

    async def generate_rsa_key_pair(self, input: GenerateRSAKeyPairInput, plugins: list[Plugin] | None = None) -> GenerateRSAKeyPairOutput:
        """Invokes the GenerateRSAKeyPair operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()

    async def get_rsa_key_modulus_length(self, input: GetRSAKeyModulusLengthInput, plugins: list[Plugin] | None = None) -> GetRSAKeyModulusLengthOutput:
        """Invokes the GetRSAKeyModulusLength operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()

    async def hkdf(self, input: HkdfInput, plugins: list[Plugin] | None = None) -> HkdfOutput:
        """Invokes the Hkdf operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()

    async def hkdf_expand(self, input: HkdfExpandInput, plugins: list[Plugin] | None = None) -> HkdfExpandOutput:
        """Invokes the HkdfExpand operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()

    async def hkdf_extract(self, input: HkdfExtractInput, plugins: list[Plugin] | None = None) -> HkdfExtractOutput:
        """Invokes the HkdfExtract operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()

    async def h_mac(self, input: HMacInput, plugins: list[Plugin] | None = None) -> HMacOutput:
        """Invokes the HMac operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()

    async def kdf_counter_mode(self, input: KdfCtrInput, plugins: list[Plugin] | None = None) -> KdfCtrOutput:
        """Invokes the KdfCounterMode operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()

    async def rsa_decrypt(self, input: RSADecryptInput, plugins: list[Plugin] | None = None) -> RSADecryptOutput:
        """Invokes the RSADecrypt operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()

    async def rsa_encrypt(self, input: RSAEncryptInput, plugins: list[Plugin] | None = None) -> RSAEncryptOutput:
        """Invokes the RSAEncrypt operation.

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        raise NotImplementedError()
