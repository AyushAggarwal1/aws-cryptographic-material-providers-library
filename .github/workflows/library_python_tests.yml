# This workflow performs tests in Python.
name: Library Python tests

on:
  workflow_call:
    inputs:
      dafny:
        description: "The Dafny version to run"
        required: true
        type: string

jobs:
  testPython:
    strategy:
      matrix:
        library:
          [
            AwsCryptographyPrimitives,
            ComAmazonawsKms,
            ComAmazonawsDynamodb,
            AwsCryptographicMaterialProviders,
            TestVectorsAwsCryptographicMaterialProviders,
            StandardLibrary,
          ]
        os: [
            # TODO just test on mac for now
            # windows-latest,
            ubuntu-latest,
            macos-latest,
          ]
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Support longpaths on Git checkout
        run: |
          git config --global core.longpaths true
      # KMS and MPL tests need to use credentials which can call KMS
      - name: Configure AWS Credentials for Tests
        uses: aws-actions/configure-aws-credentials@v2
        if: matrix.library == 'ComAmazonawsKms' || matrix.library == 'ComAmazonawsDynamodb' || matrix.library == 'AwsCryptographicMaterialProviders' || matrix.library == 'TestVectorsAwsCryptographicMaterialProviders'
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::370957321024:role/GitHub-CI-MPL-Dafny-Role-us-west-2
          role-session-name: PythonTests

      - uses: actions/checkout@v3
        with:
          submodules: recursive
      # The specification submodule is private so we don't have access, but we don't need
      # it to verify the Dafny code. Instead we manually pull the submodule we DO need.
      - run: git submodule update --init libraries

      - name: Setup Dafny
        uses: dafny-lang/setup-dafny-action@v1.6.1
        with:
          dafny-version: ${{ inputs.dafny }}

      - name: Setup Python for running tests
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          architecture: x64
      - run: |
          python -m pip install --upgrade pip
          pip install --upgrade tox
          pip install poetry

      - name: Build ${{ matrix.library }} implementation
        shell: bash
        working-directory: ./${{ matrix.library }}
        run: |
          # This works because `node` is installed by default on GHA runners
          CORES=$(node -e 'console.log(os.cpus().length)')
          make transpile_python CORES=$CORES

      - name: Test ${{ matrix.library }}
        working-directory: ./${{ matrix.library }}
        shell: bash
        run: |
          make test_python