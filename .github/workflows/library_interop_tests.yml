# This workflow performs interoperability tests across the supported runtimes of the MPL.
name: Library Interoperability Tests

on:
  workflow_call:
    inputs:
      dafny:
        description: "The Dafny version to run"
        required: true
        type: string

jobs:
  testInteroperablity:
    strategy:
      matrix:
        library: [TestVectorsAwsCryptographicMaterialProviders]
        os: [
            # TODO just test on mac and ubuntu for now
            # windows-latest,
            ubuntu-latest,
            macos-latest,
          ]
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Support longpaths on Git checkout
        run: |
          git config --global core.longpaths true
      # KMS and MPL tests need to use credentials which can call KMS
      - name: Configure AWS Credentials for Tests
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::370957321024:role/GitHub-CI-MPL-Dafny-Role-us-west-2
          role-session-name: InterOpTests

      - uses: actions/checkout@v3
      # The specification submodule is private so we don't have access, but we don't need
      # it to verify the Dafny code. Instead we manually pull the submodule we DO need.
      - run: git submodule update --init libraries

      - name: Setup Dafny
        uses: dafny-lang/setup-dafny-action@v1.6.1
        with:
          dafny-version: ${{ inputs.dafny }}

      - name: Build ${{ matrix.library }} implementation
        shell: bash
        working-directory: ./${{ matrix.library }}
        run: |
          # This works because `node` is installed by default on GHA runners
          CORES=$(node -e 'console.log(os.cpus().length)')
          make build_java CORES=$CORES

      # Check that Java can continue to read its own produced manifest and hand it to .NET
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "corretto"
          java-version: 17

      - name: Clean for next Java
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean
          build-root-directory: ./${{ matrix.library }}/runtimes/java

      - name: Compile Java 17
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build
          build-root-directory: ./${{ matrix.library }}/runtimes/java

      - name: Create a manifest for Java to read and write
        uses: gradle/gradle-build-action@v2
        with:
          arguments: run --args="encrypt-manifest --encrypt-manifest-output ."
          build-root-directory: ./${{ matrix.library }}/runtimes/java

      - name: Copy over keys.json so that it is discoverable by the CLI
        uses: gradle/gradle-build-action@v2
        with:
          arguments: copyKeysJSONCurr
          build-root-directory: ./${{ matrix.library }}/runtimes/java

      - name: Create encrypt manifest
        uses: gradle/gradle-build-action@v2
        with:
          arguments: run --args="encrypt --manifest-path . --decrypt-manifest-path ."
          build-root-directory: ./${{ matrix.library }}/runtimes/java

      - name: Decrypt encrypt manifest
        uses: gradle/gradle-build-action@v2
        with:
          arguments: run --args="decrypt --manifest-path ."
          build-root-directory: ./${{ matrix.library }}/runtimes/java

      # Check that .NET can continue to read its own produced manifest and hand it to Java
