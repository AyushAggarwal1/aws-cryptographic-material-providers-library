# Code generated by smithy-python-codegen DO NOT EDIT.

from Wrappers import Option_None, Option_Some
from _dafny import Map, Seq
import module_
from software_amazon_cryptography_services_dynamodb_internaldafny_types import (
    ArchivalSummary_ArchivalSummary as DafnyArchivalSummary,
    AttributeDefinition_AttributeDefinition as DafnyAttributeDefinition,
    AttributeValueUpdate_AttributeValueUpdate as DafnyAttributeValueUpdate,
    AttributeValue_B,
    AttributeValue_BOOL,
    AttributeValue_BS,
    AttributeValue_L,
    AttributeValue_M,
    AttributeValue_N,
    AttributeValue_NS,
    AttributeValue_NULL,
    AttributeValue_S,
    AttributeValue_SS,
    AutoScalingPolicyDescription_AutoScalingPolicyDescription as DafnyAutoScalingPolicyDescription,
    AutoScalingPolicyUpdate_AutoScalingPolicyUpdate as DafnyAutoScalingPolicyUpdate,
    AutoScalingSettingsDescription_AutoScalingSettingsDescription as DafnyAutoScalingSettingsDescription,
    AutoScalingSettingsUpdate_AutoScalingSettingsUpdate as DafnyAutoScalingSettingsUpdate,
    AutoScalingTargetTrackingScalingPolicyConfigurationDescription_AutoScalingTargetTrackingScalingPolicyConfigurationDescription as DafnyAutoScalingTargetTrackingScalingPolicyConfigurationDescription,
    AutoScalingTargetTrackingScalingPolicyConfigurationUpdate_AutoScalingTargetTrackingScalingPolicyConfigurationUpdate as DafnyAutoScalingTargetTrackingScalingPolicyConfigurationUpdate,
    BackupDescription_BackupDescription as DafnyBackupDescription,
    BackupDetails_BackupDetails as DafnyBackupDetails,
    BackupSummary_BackupSummary as DafnyBackupSummary,
    BatchExecuteStatementInput_BatchExecuteStatementInput as DafnyBatchExecuteStatementInput,
    BatchExecuteStatementOutput_BatchExecuteStatementOutput as DafnyBatchExecuteStatementOutput,
    BatchGetItemInput_BatchGetItemInput as DafnyBatchGetItemInput,
    BatchGetItemOutput_BatchGetItemOutput as DafnyBatchGetItemOutput,
    BatchStatementError_BatchStatementError as DafnyBatchStatementError,
    BatchStatementRequest_BatchStatementRequest as DafnyBatchStatementRequest,
    BatchStatementResponse_BatchStatementResponse as DafnyBatchStatementResponse,
    BatchWriteItemInput_BatchWriteItemInput as DafnyBatchWriteItemInput,
    BatchWriteItemOutput_BatchWriteItemOutput as DafnyBatchWriteItemOutput,
    BillingModeSummary_BillingModeSummary as DafnyBillingModeSummary,
    Capacity_Capacity as DafnyCapacity,
    ConditionCheck_ConditionCheck as DafnyConditionCheck,
    Condition_Condition as DafnyCondition,
    ConsumedCapacity_ConsumedCapacity as DafnyConsumedCapacity,
    ContinuousBackupsDescription_ContinuousBackupsDescription as DafnyContinuousBackupsDescription,
    ContributorInsightsSummary_ContributorInsightsSummary as DafnyContributorInsightsSummary,
    CreateBackupInput_CreateBackupInput as DafnyCreateBackupInput,
    CreateBackupOutput_CreateBackupOutput as DafnyCreateBackupOutput,
    CreateGlobalSecondaryIndexAction_CreateGlobalSecondaryIndexAction as DafnyCreateGlobalSecondaryIndexAction,
    CreateGlobalTableInput_CreateGlobalTableInput as DafnyCreateGlobalTableInput,
    CreateGlobalTableOutput_CreateGlobalTableOutput as DafnyCreateGlobalTableOutput,
    CreateReplicaAction_CreateReplicaAction as DafnyCreateReplicaAction,
    CreateReplicationGroupMemberAction_CreateReplicationGroupMemberAction as DafnyCreateReplicationGroupMemberAction,
    CreateTableInput_CreateTableInput as DafnyCreateTableInput,
    CreateTableOutput_CreateTableOutput as DafnyCreateTableOutput,
    CsvOptions_CsvOptions as DafnyCsvOptions,
    DeleteBackupInput_DeleteBackupInput as DafnyDeleteBackupInput,
    DeleteBackupOutput_DeleteBackupOutput as DafnyDeleteBackupOutput,
    DeleteGlobalSecondaryIndexAction_DeleteGlobalSecondaryIndexAction as DafnyDeleteGlobalSecondaryIndexAction,
    DeleteItemInput_DeleteItemInput as DafnyDeleteItemInput,
    DeleteItemOutput_DeleteItemOutput as DafnyDeleteItemOutput,
    DeleteReplicaAction_DeleteReplicaAction as DafnyDeleteReplicaAction,
    DeleteReplicationGroupMemberAction_DeleteReplicationGroupMemberAction as DafnyDeleteReplicationGroupMemberAction,
    DeleteRequest_DeleteRequest as DafnyDeleteRequest,
    DeleteTableInput_DeleteTableInput as DafnyDeleteTableInput,
    DeleteTableOutput_DeleteTableOutput as DafnyDeleteTableOutput,
    Delete_Delete as DafnyDelete,
    DescribeBackupInput_DescribeBackupInput as DafnyDescribeBackupInput,
    DescribeBackupOutput_DescribeBackupOutput as DafnyDescribeBackupOutput,
    DescribeContinuousBackupsInput_DescribeContinuousBackupsInput as DafnyDescribeContinuousBackupsInput,
    DescribeContinuousBackupsOutput_DescribeContinuousBackupsOutput as DafnyDescribeContinuousBackupsOutput,
    DescribeContributorInsightsInput_DescribeContributorInsightsInput as DafnyDescribeContributorInsightsInput,
    DescribeContributorInsightsOutput_DescribeContributorInsightsOutput as DafnyDescribeContributorInsightsOutput,
    DescribeEndpointsRequest_DescribeEndpointsRequest as DafnyDescribeEndpointsRequest,
    DescribeEndpointsResponse_DescribeEndpointsResponse as DafnyDescribeEndpointsResponse,
    DescribeExportInput_DescribeExportInput as DafnyDescribeExportInput,
    DescribeExportOutput_DescribeExportOutput as DafnyDescribeExportOutput,
    DescribeGlobalTableInput_DescribeGlobalTableInput as DafnyDescribeGlobalTableInput,
    DescribeGlobalTableOutput_DescribeGlobalTableOutput as DafnyDescribeGlobalTableOutput,
    DescribeGlobalTableSettingsInput_DescribeGlobalTableSettingsInput as DafnyDescribeGlobalTableSettingsInput,
    DescribeGlobalTableSettingsOutput_DescribeGlobalTableSettingsOutput as DafnyDescribeGlobalTableSettingsOutput,
    DescribeImportInput_DescribeImportInput as DafnyDescribeImportInput,
    DescribeImportOutput_DescribeImportOutput as DafnyDescribeImportOutput,
    DescribeKinesisStreamingDestinationInput_DescribeKinesisStreamingDestinationInput as DafnyDescribeKinesisStreamingDestinationInput,
    DescribeKinesisStreamingDestinationOutput_DescribeKinesisStreamingDestinationOutput as DafnyDescribeKinesisStreamingDestinationOutput,
    DescribeLimitsInput_DescribeLimitsInput as DafnyDescribeLimitsInput,
    DescribeLimitsOutput_DescribeLimitsOutput as DafnyDescribeLimitsOutput,
    DescribeTableInput_DescribeTableInput as DafnyDescribeTableInput,
    DescribeTableOutput_DescribeTableOutput as DafnyDescribeTableOutput,
    DescribeTableReplicaAutoScalingInput_DescribeTableReplicaAutoScalingInput as DafnyDescribeTableReplicaAutoScalingInput,
    DescribeTableReplicaAutoScalingOutput_DescribeTableReplicaAutoScalingOutput as DafnyDescribeTableReplicaAutoScalingOutput,
    DescribeTimeToLiveInput_DescribeTimeToLiveInput as DafnyDescribeTimeToLiveInput,
    DescribeTimeToLiveOutput_DescribeTimeToLiveOutput as DafnyDescribeTimeToLiveOutput,
    DisableKinesisStreamingDestinationInput_DisableKinesisStreamingDestinationInput as DafnyDisableKinesisStreamingDestinationInput,
    DisableKinesisStreamingDestinationOutput_DisableKinesisStreamingDestinationOutput as DafnyDisableKinesisStreamingDestinationOutput,
    EnableKinesisStreamingDestinationInput_EnableKinesisStreamingDestinationInput as DafnyEnableKinesisStreamingDestinationInput,
    EnableKinesisStreamingDestinationOutput_EnableKinesisStreamingDestinationOutput as DafnyEnableKinesisStreamingDestinationOutput,
    Endpoint_Endpoint as DafnyEndpoint,
    ExecuteStatementInput_ExecuteStatementInput as DafnyExecuteStatementInput,
    ExecuteStatementOutput_ExecuteStatementOutput as DafnyExecuteStatementOutput,
    ExecuteTransactionInput_ExecuteTransactionInput as DafnyExecuteTransactionInput,
    ExecuteTransactionOutput_ExecuteTransactionOutput as DafnyExecuteTransactionOutput,
    ExpectedAttributeValue_ExpectedAttributeValue as DafnyExpectedAttributeValue,
    ExportDescription_ExportDescription as DafnyExportDescription,
    ExportSummary_ExportSummary as DafnyExportSummary,
    ExportTableToPointInTimeInput_ExportTableToPointInTimeInput as DafnyExportTableToPointInTimeInput,
    ExportTableToPointInTimeOutput_ExportTableToPointInTimeOutput as DafnyExportTableToPointInTimeOutput,
    FailureException_FailureException as DafnyFailureException,
    GetItemInput_GetItemInput as DafnyGetItemInput,
    GetItemOutput_GetItemOutput as DafnyGetItemOutput,
    Get_Get as DafnyGet,
    GlobalSecondaryIndexAutoScalingUpdate_GlobalSecondaryIndexAutoScalingUpdate as DafnyGlobalSecondaryIndexAutoScalingUpdate,
    GlobalSecondaryIndexDescription_GlobalSecondaryIndexDescription as DafnyGlobalSecondaryIndexDescription,
    GlobalSecondaryIndexInfo_GlobalSecondaryIndexInfo as DafnyGlobalSecondaryIndexInfo,
    GlobalSecondaryIndexUpdate_GlobalSecondaryIndexUpdate as DafnyGlobalSecondaryIndexUpdate,
    GlobalSecondaryIndex_GlobalSecondaryIndex as DafnyGlobalSecondaryIndex,
    GlobalTableDescription_GlobalTableDescription as DafnyGlobalTableDescription,
    GlobalTableGlobalSecondaryIndexSettingsUpdate_GlobalTableGlobalSecondaryIndexSettingsUpdate as DafnyGlobalTableGlobalSecondaryIndexSettingsUpdate,
    GlobalTable_GlobalTable as DafnyGlobalTable,
    ImportSummary_ImportSummary as DafnyImportSummary,
    ImportTableDescription_ImportTableDescription as DafnyImportTableDescription,
    ImportTableInput_ImportTableInput as DafnyImportTableInput,
    ImportTableOutput_ImportTableOutput as DafnyImportTableOutput,
    InputFormatOptions_InputFormatOptions as DafnyInputFormatOptions,
    ItemCollectionMetrics_ItemCollectionMetrics as DafnyItemCollectionMetrics,
    ItemResponse_ItemResponse as DafnyItemResponse,
    KeySchemaElement_KeySchemaElement as DafnyKeySchemaElement,
    KeysAndAttributes_KeysAndAttributes as DafnyKeysAndAttributes,
    KinesisDataStreamDestination_KinesisDataStreamDestination as DafnyKinesisDataStreamDestination,
    ListBackupsInput_ListBackupsInput as DafnyListBackupsInput,
    ListBackupsOutput_ListBackupsOutput as DafnyListBackupsOutput,
    ListContributorInsightsInput_ListContributorInsightsInput as DafnyListContributorInsightsInput,
    ListContributorInsightsOutput_ListContributorInsightsOutput as DafnyListContributorInsightsOutput,
    ListExportsInput_ListExportsInput as DafnyListExportsInput,
    ListExportsOutput_ListExportsOutput as DafnyListExportsOutput,
    ListGlobalTablesInput_ListGlobalTablesInput as DafnyListGlobalTablesInput,
    ListGlobalTablesOutput_ListGlobalTablesOutput as DafnyListGlobalTablesOutput,
    ListImportsInput_ListImportsInput as DafnyListImportsInput,
    ListImportsOutput_ListImportsOutput as DafnyListImportsOutput,
    ListTablesInput_ListTablesInput as DafnyListTablesInput,
    ListTablesOutput_ListTablesOutput as DafnyListTablesOutput,
    ListTagsOfResourceInput_ListTagsOfResourceInput as DafnyListTagsOfResourceInput,
    ListTagsOfResourceOutput_ListTagsOfResourceOutput as DafnyListTagsOfResourceOutput,
    LocalSecondaryIndexDescription_LocalSecondaryIndexDescription as DafnyLocalSecondaryIndexDescription,
    LocalSecondaryIndexInfo_LocalSecondaryIndexInfo as DafnyLocalSecondaryIndexInfo,
    LocalSecondaryIndex_LocalSecondaryIndex as DafnyLocalSecondaryIndex,
    ParameterizedStatement_ParameterizedStatement as DafnyParameterizedStatement,
    PointInTimeRecoveryDescription_PointInTimeRecoveryDescription as DafnyPointInTimeRecoveryDescription,
    PointInTimeRecoverySpecification_PointInTimeRecoverySpecification as DafnyPointInTimeRecoverySpecification,
    Projection_Projection as DafnyProjection,
    ProvisionedThroughputDescription_ProvisionedThroughputDescription as DafnyProvisionedThroughputDescription,
    ProvisionedThroughputOverride_ProvisionedThroughputOverride as DafnyProvisionedThroughputOverride,
    ProvisionedThroughput_ProvisionedThroughput as DafnyProvisionedThroughput,
    PutItemInput_PutItemInput as DafnyPutItemInput,
    PutItemOutput_PutItemOutput as DafnyPutItemOutput,
    PutRequest_PutRequest as DafnyPutRequest,
    Put_Put as DafnyPut,
    QueryInput_QueryInput as DafnyQueryInput,
    QueryOutput_QueryOutput as DafnyQueryOutput,
    ReplicaAutoScalingDescription_ReplicaAutoScalingDescription as DafnyReplicaAutoScalingDescription,
    ReplicaAutoScalingUpdate_ReplicaAutoScalingUpdate as DafnyReplicaAutoScalingUpdate,
    ReplicaDescription_ReplicaDescription as DafnyReplicaDescription,
    ReplicaGlobalSecondaryIndexAutoScalingDescription_ReplicaGlobalSecondaryIndexAutoScalingDescription as DafnyReplicaGlobalSecondaryIndexAutoScalingDescription,
    ReplicaGlobalSecondaryIndexAutoScalingUpdate_ReplicaGlobalSecondaryIndexAutoScalingUpdate as DafnyReplicaGlobalSecondaryIndexAutoScalingUpdate,
    ReplicaGlobalSecondaryIndexDescription_ReplicaGlobalSecondaryIndexDescription as DafnyReplicaGlobalSecondaryIndexDescription,
    ReplicaGlobalSecondaryIndexSettingsDescription_ReplicaGlobalSecondaryIndexSettingsDescription as DafnyReplicaGlobalSecondaryIndexSettingsDescription,
    ReplicaGlobalSecondaryIndexSettingsUpdate_ReplicaGlobalSecondaryIndexSettingsUpdate as DafnyReplicaGlobalSecondaryIndexSettingsUpdate,
    ReplicaGlobalSecondaryIndex_ReplicaGlobalSecondaryIndex as DafnyReplicaGlobalSecondaryIndex,
    ReplicaSettingsDescription_ReplicaSettingsDescription as DafnyReplicaSettingsDescription,
    ReplicaSettingsUpdate_ReplicaSettingsUpdate as DafnyReplicaSettingsUpdate,
    ReplicaUpdate_ReplicaUpdate as DafnyReplicaUpdate,
    Replica_Replica as DafnyReplica,
    ReplicationGroupUpdate_ReplicationGroupUpdate as DafnyReplicationGroupUpdate,
    RestoreSummary_RestoreSummary as DafnyRestoreSummary,
    RestoreTableFromBackupInput_RestoreTableFromBackupInput as DafnyRestoreTableFromBackupInput,
    RestoreTableFromBackupOutput_RestoreTableFromBackupOutput as DafnyRestoreTableFromBackupOutput,
    RestoreTableToPointInTimeInput_RestoreTableToPointInTimeInput as DafnyRestoreTableToPointInTimeInput,
    RestoreTableToPointInTimeOutput_RestoreTableToPointInTimeOutput as DafnyRestoreTableToPointInTimeOutput,
    S3BucketSource_S3BucketSource as DafnyS3BucketSource,
    SSEDescription_SSEDescription as DafnySSEDescription,
    SSESpecification_SSESpecification as DafnySSESpecification,
    ScanInput_ScanInput as DafnyScanInput,
    ScanOutput_ScanOutput as DafnyScanOutput,
    SourceTableDetails_SourceTableDetails as DafnySourceTableDetails,
    SourceTableFeatureDetails_SourceTableFeatureDetails as DafnySourceTableFeatureDetails,
    StreamSpecification_StreamSpecification as DafnyStreamSpecification,
    TableAutoScalingDescription_TableAutoScalingDescription as DafnyTableAutoScalingDescription,
    TableClassSummary_TableClassSummary as DafnyTableClassSummary,
    TableCreationParameters_TableCreationParameters as DafnyTableCreationParameters,
    TableDescription_TableDescription as DafnyTableDescription,
    TagResourceInput_TagResourceInput as DafnyTagResourceInput,
    Tag_Tag as DafnyTag,
    TimeToLiveDescription_TimeToLiveDescription as DafnyTimeToLiveDescription,
    TimeToLiveSpecification_TimeToLiveSpecification as DafnyTimeToLiveSpecification,
    TransactGetItem_TransactGetItem as DafnyTransactGetItem,
    TransactGetItemsInput_TransactGetItemsInput as DafnyTransactGetItemsInput,
    TransactGetItemsOutput_TransactGetItemsOutput as DafnyTransactGetItemsOutput,
    TransactWriteItem_TransactWriteItem as DafnyTransactWriteItem,
    TransactWriteItemsInput_TransactWriteItemsInput as DafnyTransactWriteItemsInput,
    TransactWriteItemsOutput_TransactWriteItemsOutput as DafnyTransactWriteItemsOutput,
    UntagResourceInput_UntagResourceInput as DafnyUntagResourceInput,
    UpdateContinuousBackupsInput_UpdateContinuousBackupsInput as DafnyUpdateContinuousBackupsInput,
    UpdateContinuousBackupsOutput_UpdateContinuousBackupsOutput as DafnyUpdateContinuousBackupsOutput,
    UpdateContributorInsightsInput_UpdateContributorInsightsInput as DafnyUpdateContributorInsightsInput,
    UpdateContributorInsightsOutput_UpdateContributorInsightsOutput as DafnyUpdateContributorInsightsOutput,
    UpdateGlobalSecondaryIndexAction_UpdateGlobalSecondaryIndexAction as DafnyUpdateGlobalSecondaryIndexAction,
    UpdateGlobalTableInput_UpdateGlobalTableInput as DafnyUpdateGlobalTableInput,
    UpdateGlobalTableOutput_UpdateGlobalTableOutput as DafnyUpdateGlobalTableOutput,
    UpdateGlobalTableSettingsInput_UpdateGlobalTableSettingsInput as DafnyUpdateGlobalTableSettingsInput,
    UpdateGlobalTableSettingsOutput_UpdateGlobalTableSettingsOutput as DafnyUpdateGlobalTableSettingsOutput,
    UpdateItemInput_UpdateItemInput as DafnyUpdateItemInput,
    UpdateItemOutput_UpdateItemOutput as DafnyUpdateItemOutput,
    UpdateReplicationGroupMemberAction_UpdateReplicationGroupMemberAction as DafnyUpdateReplicationGroupMemberAction,
    UpdateTableInput_UpdateTableInput as DafnyUpdateTableInput,
    UpdateTableOutput_UpdateTableOutput as DafnyUpdateTableOutput,
    UpdateTableReplicaAutoScalingInput_UpdateTableReplicaAutoScalingInput as DafnyUpdateTableReplicaAutoScalingInput,
    UpdateTableReplicaAutoScalingOutput_UpdateTableReplicaAutoScalingOutput as DafnyUpdateTableReplicaAutoScalingOutput,
    UpdateTimeToLiveInput_UpdateTimeToLiveInput as DafnyUpdateTimeToLiveInput,
    UpdateTimeToLiveOutput_UpdateTimeToLiveOutput as DafnyUpdateTimeToLiveOutput,
    Update_Update as DafnyUpdate,
    WriteRequest_WriteRequest as DafnyWriteRequest,
)


def AwsSdkToDafny_com_amazonaws_dynamodb_BatchExecuteStatementInput(input):
    return DafnyBatchExecuteStatementInput(
        Statements=
        Seq([AwsSdkToDafny_com_amazonaws_dynamodb_BatchStatementRequest(list_element) for list_element in input["Statements"]]),
        ReturnConsumedCapacity=Option_Some(Seq(input["ReturnConsumedCapacity"])) if "ReturnConsumedCapacity" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_BatchStatementRequest(input):
    return DafnyBatchStatementRequest(
        Statement=Seq(input["Statement"]),
        Parameters=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(list_element) for list_element in input["Parameters"]])) if "Parameters" in input.keys() else Option_None(),
        ConsistentRead=Option_Some(input["ConsistentRead"]) if "ConsistentRead" in input.keys() else Option_None(),
    )

def SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(input):
    if "S" in input.keys():
        AttributeValue_union_value = AttributeValue_S(Seq(input["S"]))
    elif "N" in input.keys():
        AttributeValue_union_value = AttributeValue_N(Seq(input["N"]))
    elif "B" in input.keys():
        AttributeValue_union_value = AttributeValue_B(Seq(input["B"]))

    elif "SS" in input.keys():
        AttributeValue_union_value = AttributeValue_SS(Seq([Seq(list_element) for list_element in input["SS"]]))

    elif "NS" in input.keys():
        AttributeValue_union_value = AttributeValue_NS(Seq([Seq(list_element) for list_element in input["NS"]]))

    elif "BS" in input.keys():
        AttributeValue_union_value = AttributeValue_BS(Seq([Seq(list_element) for list_element in input["BS"]]))

    elif "M" in input.keys():
        AttributeValue_union_value = AttributeValue_M(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["M"].items() }))

    elif "L" in input.keys():
        AttributeValue_union_value = AttributeValue_L(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(list_element) for list_element in input["L"]]))
    elif "NULL" in input.keys():
        AttributeValue_union_value = AttributeValue_NULL(input["NULL"])
    elif "BOOL" in input.keys():
        AttributeValue_union_value = AttributeValue_BOOL(input["BOOL"])
    else:
        raise ValueError("No recognized union value in union type: " + input)

    return AttributeValue_union_value

def AwsSdkToDafny_com_amazonaws_dynamodb_BatchExecuteStatementOutput(input):
    return DafnyBatchExecuteStatementOutput(
        Responses=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_BatchStatementResponse(list_element) for list_element in input["Responses"]])) if "Responses" in input.keys() else Option_None(),
        ConsumedCapacity=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ConsumedCapacity(list_element) for list_element in input["ConsumedCapacity"]])) if "ConsumedCapacity" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_BatchStatementResponse(input):
    return DafnyBatchStatementResponse(
        Error=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_BatchStatementError(input["Error"])) if "Error" in input.keys() else Option_None(),
        TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
        Item=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Item"].items() })) if "Item" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_BatchStatementError(input):
    return DafnyBatchStatementError(
        Code=Option_Some(Seq(input["Code"])) if "Code" in input.keys() else Option_None(),
        Message=Option_Some(Seq(input["Message"])) if "Message" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ConsumedCapacity(input):
    return DafnyConsumedCapacity(
        TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
        CapacityUnits=Option_Some(input["CapacityUnits"]) if "CapacityUnits" in input.keys() else Option_None(),
        ReadCapacityUnits=Option_Some(input["ReadCapacityUnits"]) if "ReadCapacityUnits" in input.keys() else Option_None(),
        WriteCapacityUnits=Option_Some(input["WriteCapacityUnits"]) if "WriteCapacityUnits" in input.keys() else Option_None(),
        Table=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_Capacity(input["Table"])) if "Table" in input.keys() else Option_None(),
        LocalSecondaryIndexes=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_Capacity(value) for (key, value) in input["LocalSecondaryIndexes"].items() })) if "LocalSecondaryIndexes" in input.keys() else Option_None(),
        GlobalSecondaryIndexes=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_Capacity(value) for (key, value) in input["GlobalSecondaryIndexes"].items() })) if "GlobalSecondaryIndexes" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_Capacity(input):
    return DafnyCapacity(
        ReadCapacityUnits=Option_Some(input["ReadCapacityUnits"]) if "ReadCapacityUnits" in input.keys() else Option_None(),
        WriteCapacityUnits=Option_Some(input["WriteCapacityUnits"]) if "WriteCapacityUnits" in input.keys() else Option_None(),
        CapacityUnits=Option_Some(input["CapacityUnits"]) if "CapacityUnits" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_BatchGetItemInput(input):
    return DafnyBatchGetItemInput(
        RequestItems=
        Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_KeysAndAttributes(value) for (key, value) in input["RequestItems"].items() }),
        ReturnConsumedCapacity=Option_Some(Seq(input["ReturnConsumedCapacity"])) if "ReturnConsumedCapacity" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_KeysAndAttributes(input):
    return DafnyKeysAndAttributes(
        Keys=

        Seq([Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in list_element.items() }) for list_element in input["Keys"]]),
        AttributesToGet=
        Option_Some(Seq([Seq(list_element) for list_element in input["AttributesToGet"]])) if "AttributesToGet" in input.keys() else Option_None(),
        ConsistentRead=Option_Some(input["ConsistentRead"]) if "ConsistentRead" in input.keys() else Option_None(),
        ProjectionExpression=Option_Some(Seq(input["ProjectionExpression"])) if "ProjectionExpression" in input.keys() else Option_None(),
        ExpressionAttributeNames=
        Option_Some(Map({Seq(key): Seq(value) for (key, value) in input["ExpressionAttributeNames"].items() })) if "ExpressionAttributeNames" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_BatchGetItemOutput(input):
    return DafnyBatchGetItemOutput(
        Responses=

        Option_Some(Map({Seq(key): Seq([Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in list_element.items() }) for list_element in value]) for (key, value) in input["Responses"].items() })) if "Responses" in input.keys() else Option_None(),
        UnprocessedKeys=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_KeysAndAttributes(value) for (key, value) in input["UnprocessedKeys"].items() })) if "UnprocessedKeys" in input.keys() else Option_None(),
        ConsumedCapacity=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ConsumedCapacity(list_element) for list_element in input["ConsumedCapacity"]])) if "ConsumedCapacity" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_BatchWriteItemInput(input):
    return DafnyBatchWriteItemInput(
        RequestItems=

        Map({Seq(key): Seq([AwsSdkToDafny_com_amazonaws_dynamodb_WriteRequest(list_element) for list_element in value]) for (key, value) in input["RequestItems"].items() }),
        ReturnConsumedCapacity=Option_Some(Seq(input["ReturnConsumedCapacity"])) if "ReturnConsumedCapacity" in input.keys() else Option_None(),
        ReturnItemCollectionMetrics=Option_Some(Seq(input["ReturnItemCollectionMetrics"])) if "ReturnItemCollectionMetrics" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_WriteRequest(input):
    return DafnyWriteRequest(
        PutRequest=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_PutRequest(input["PutRequest"])) if "PutRequest" in input.keys() else Option_None(),
        DeleteRequest=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_DeleteRequest(input["DeleteRequest"])) if "DeleteRequest" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_PutRequest(input):
    return DafnyPutRequest(
        Item=
        Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Item"].items() }),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DeleteRequest(input):
    return DafnyDeleteRequest(
        Key=
        Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Key"].items() }),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_BatchWriteItemOutput(input):
    return DafnyBatchWriteItemOutput(
        UnprocessedItems=

        Option_Some(Map({Seq(key): Seq([AwsSdkToDafny_com_amazonaws_dynamodb_WriteRequest(list_element) for list_element in value]) for (key, value) in input["UnprocessedItems"].items() })) if "UnprocessedItems" in input.keys() else Option_None(),
        ItemCollectionMetrics=

        Option_Some(Map({Seq(key): Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ItemCollectionMetrics(list_element) for list_element in value]) for (key, value) in input["ItemCollectionMetrics"].items() })) if "ItemCollectionMetrics" in input.keys() else Option_None(),
        ConsumedCapacity=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ConsumedCapacity(list_element) for list_element in input["ConsumedCapacity"]])) if "ConsumedCapacity" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ItemCollectionMetrics(input):
    return DafnyItemCollectionMetrics(
        ItemCollectionKey=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["ItemCollectionKey"].items() })) if "ItemCollectionKey" in input.keys() else Option_None(),
        SizeEstimateRangeGB=
        Option_Some(Seq([list_element for list_element in input["SizeEstimateRangeGB"]])) if "SizeEstimateRangeGB" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_CreateBackupInput(input):
    return DafnyCreateBackupInput(
        TableName=Seq(input["TableName"]),
        BackupName=Seq(input["BackupName"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_CreateBackupOutput(input):
    return DafnyCreateBackupOutput(
        BackupDetails=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_BackupDetails(input["BackupDetails"])) if "BackupDetails" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_BackupDetails(input):
    return DafnyBackupDetails(
        BackupArn=Seq(input["BackupArn"]),
        BackupName=Seq(input["BackupName"]),
        BackupSizeBytes=Option_Some(input["BackupSizeBytes"]) if "BackupSizeBytes" in input.keys() else Option_None(),
        BackupStatus=Seq(input["BackupStatus"]),
        BackupType=Seq(input["BackupType"]),
        BackupCreationDateTime=TypeError("TimestampShape not supported"),
        BackupExpiryDateTime=Option_Some(TypeError("TimestampShape not supported")) if "BackupExpiryDateTime" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_CreateGlobalTableInput(input):
    return DafnyCreateGlobalTableInput(
        GlobalTableName=Seq(input["GlobalTableName"]),
        ReplicationGroup=
        Seq([AwsSdkToDafny_com_amazonaws_dynamodb_Replica(list_element) for list_element in input["ReplicationGroup"]]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_Replica(input):
    return DafnyReplica(
        RegionName=Option_Some(Seq(input["RegionName"])) if "RegionName" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_CreateGlobalTableOutput(input):
    return DafnyCreateGlobalTableOutput(
        GlobalTableDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_GlobalTableDescription(input["GlobalTableDescription"])) if "GlobalTableDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_GlobalTableDescription(input):
    return DafnyGlobalTableDescription(
        ReplicationGroup=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaDescription(list_element) for list_element in input["ReplicationGroup"]])) if "ReplicationGroup" in input.keys() else Option_None(),
        GlobalTableArn=Option_Some(Seq(input["GlobalTableArn"])) if "GlobalTableArn" in input.keys() else Option_None(),
        CreationDateTime=Option_Some(TypeError("TimestampShape not supported")) if "CreationDateTime" in input.keys() else Option_None(),
        GlobalTableStatus=Option_Some(Seq(input["GlobalTableStatus"])) if "GlobalTableStatus" in input.keys() else Option_None(),
        GlobalTableName=Option_Some(Seq(input["GlobalTableName"])) if "GlobalTableName" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaDescription(input):
    return DafnyReplicaDescription(
        RegionName=Option_Some(Seq(input["RegionName"])) if "RegionName" in input.keys() else Option_None(),
        ReplicaStatus=Option_Some(Seq(input["ReplicaStatus"])) if "ReplicaStatus" in input.keys() else Option_None(),
        ReplicaStatusDescription=Option_Some(Seq(input["ReplicaStatusDescription"])) if "ReplicaStatusDescription" in input.keys() else Option_None(),
        ReplicaStatusPercentProgress=Option_Some(Seq(input["ReplicaStatusPercentProgress"])) if "ReplicaStatusPercentProgress" in input.keys() else Option_None(),
        KMSMasterKeyId=Option_Some(Seq(input["KMSMasterKeyId"])) if "KMSMasterKeyId" in input.keys() else Option_None(),
        ProvisionedThroughputOverride=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughputOverride(input["ProvisionedThroughputOverride"])) if "ProvisionedThroughputOverride" in input.keys() else Option_None(),
        GlobalSecondaryIndexes=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndexDescription(list_element) for list_element in input["GlobalSecondaryIndexes"]])) if "GlobalSecondaryIndexes" in input.keys() else Option_None(),
        ReplicaInaccessibleDateTime=Option_Some(TypeError("TimestampShape not supported")) if "ReplicaInaccessibleDateTime" in input.keys() else Option_None(),
        ReplicaTableClassSummary=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_TableClassSummary(input["ReplicaTableClassSummary"])) if "ReplicaTableClassSummary" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughputOverride(input):
    return DafnyProvisionedThroughputOverride(
        ReadCapacityUnits=Option_Some(input["ReadCapacityUnits"]) if "ReadCapacityUnits" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndexDescription(input):
    return DafnyReplicaGlobalSecondaryIndexDescription(
        IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
        ProvisionedThroughputOverride=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughputOverride(input["ProvisionedThroughputOverride"])) if "ProvisionedThroughputOverride" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_TableClassSummary(input):
    return DafnyTableClassSummary(
        TableClass=Option_Some(Seq(input["TableClass"])) if "TableClass" in input.keys() else Option_None(),
        LastUpdateDateTime=Option_Some(TypeError("TimestampShape not supported")) if "LastUpdateDateTime" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_CreateTableInput(input):
    return DafnyCreateTableInput(
        AttributeDefinitions=
        Seq([AwsSdkToDafny_com_amazonaws_dynamodb_AttributeDefinition(list_element) for list_element in input["AttributeDefinitions"]]),
        TableName=Seq(input["TableName"]),
        KeySchema=
        Seq([AwsSdkToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]]),
        LocalSecondaryIndexes=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_LocalSecondaryIndex(list_element) for list_element in input["LocalSecondaryIndexes"]])) if "LocalSecondaryIndexes" in input.keys() else Option_None(),
        GlobalSecondaryIndexes=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndex(list_element) for list_element in input["GlobalSecondaryIndexes"]])) if "GlobalSecondaryIndexes" in input.keys() else Option_None(),
        BillingMode=Option_Some(Seq(input["BillingMode"])) if "BillingMode" in input.keys() else Option_None(),
        ProvisionedThroughput=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughput(input["ProvisionedThroughput"])) if "ProvisionedThroughput" in input.keys() else Option_None(),
        StreamSpecification=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_StreamSpecification(input["StreamSpecification"])) if "StreamSpecification" in input.keys() else Option_None(),
        SSESpecification=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_SSESpecification(input["SSESpecification"])) if "SSESpecification" in input.keys() else Option_None(),
        Tags=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_Tag(list_element) for list_element in input["Tags"]])) if "Tags" in input.keys() else Option_None(),
        TableClass=Option_Some(Seq(input["TableClass"])) if "TableClass" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_AttributeDefinition(input):
    return DafnyAttributeDefinition(
        AttributeName=Seq(input["AttributeName"]),
        AttributeType=Seq(input["AttributeType"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_KeySchemaElement(input):
    return DafnyKeySchemaElement(
        AttributeName=Seq(input["AttributeName"]),
        KeyType=Seq(input["KeyType"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_LocalSecondaryIndex(input):
    return DafnyLocalSecondaryIndex(
        IndexName=Seq(input["IndexName"]),
        KeySchema=
        Seq([AwsSdkToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]]),
        Projection=AwsSdkToDafny_com_amazonaws_dynamodb_Projection(input["Projection"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_Projection(input):
    return DafnyProjection(
        ProjectionType=Option_Some(Seq(input["ProjectionType"])) if "ProjectionType" in input.keys() else Option_None(),
        NonKeyAttributes=
        Option_Some(Seq([Seq(list_element) for list_element in input["NonKeyAttributes"]])) if "NonKeyAttributes" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndex(input):
    return DafnyGlobalSecondaryIndex(
        IndexName=Seq(input["IndexName"]),
        KeySchema=
        Seq([AwsSdkToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]]),
        Projection=AwsSdkToDafny_com_amazonaws_dynamodb_Projection(input["Projection"]),
        ProvisionedThroughput=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughput(input["ProvisionedThroughput"])) if "ProvisionedThroughput" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughput(input):
    return DafnyProvisionedThroughput(
        ReadCapacityUnits=input["ReadCapacityUnits"],
        WriteCapacityUnits=input["WriteCapacityUnits"],
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_StreamSpecification(input):
    return DafnyStreamSpecification(
        StreamEnabled=input["StreamEnabled"],
        StreamViewType=Option_Some(Seq(input["StreamViewType"])) if "StreamViewType" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_SSESpecification(input):
    return DafnySSESpecification(
        Enabled=Option_Some(input["Enabled"]) if "Enabled" in input.keys() else Option_None(),
        SSEType=Option_Some(Seq(input["SSEType"])) if "SSEType" in input.keys() else Option_None(),
        KMSMasterKeyId=Option_Some(Seq(input["KMSMasterKeyId"])) if "KMSMasterKeyId" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_Tag(input):
    return DafnyTag(
        Key=Seq(input["Key"]),
        Value=Seq(input["Value"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_CreateTableOutput(input):
    return DafnyCreateTableOutput(
        TableDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_TableDescription(input["TableDescription"])) if "TableDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_TableDescription(input):
    return DafnyTableDescription(
        AttributeDefinitions=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_AttributeDefinition(list_element) for list_element in input["AttributeDefinitions"]])) if "AttributeDefinitions" in input.keys() else Option_None(),
        TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
        KeySchema=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]])) if "KeySchema" in input.keys() else Option_None(),
        TableStatus=Option_Some(Seq(input["TableStatus"])) if "TableStatus" in input.keys() else Option_None(),
        CreationDateTime=Option_Some(TypeError("TimestampShape not supported")) if "CreationDateTime" in input.keys() else Option_None(),
        ProvisionedThroughput=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughputDescription(input["ProvisionedThroughput"])) if "ProvisionedThroughput" in input.keys() else Option_None(),
        TableSizeBytes=Option_Some(input["TableSizeBytes"]) if "TableSizeBytes" in input.keys() else Option_None(),
        ItemCount=Option_Some(input["ItemCount"]) if "ItemCount" in input.keys() else Option_None(),
        TableArn=Option_Some(Seq(input["TableArn"])) if "TableArn" in input.keys() else Option_None(),
        TableId=Option_Some(Seq(input["TableId"])) if "TableId" in input.keys() else Option_None(),
        BillingModeSummary=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_BillingModeSummary(input["BillingModeSummary"])) if "BillingModeSummary" in input.keys() else Option_None(),
        LocalSecondaryIndexes=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_LocalSecondaryIndexDescription(list_element) for list_element in input["LocalSecondaryIndexes"]])) if "LocalSecondaryIndexes" in input.keys() else Option_None(),
        GlobalSecondaryIndexes=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndexDescription(list_element) for list_element in input["GlobalSecondaryIndexes"]])) if "GlobalSecondaryIndexes" in input.keys() else Option_None(),
        StreamSpecification=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_StreamSpecification(input["StreamSpecification"])) if "StreamSpecification" in input.keys() else Option_None(),
        LatestStreamLabel=Option_Some(Seq(input["LatestStreamLabel"])) if "LatestStreamLabel" in input.keys() else Option_None(),
        LatestStreamArn=Option_Some(Seq(input["LatestStreamArn"])) if "LatestStreamArn" in input.keys() else Option_None(),
        GlobalTableVersion=Option_Some(Seq(input["GlobalTableVersion"])) if "GlobalTableVersion" in input.keys() else Option_None(),
        Replicas=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaDescription(list_element) for list_element in input["Replicas"]])) if "Replicas" in input.keys() else Option_None(),
        RestoreSummary=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_RestoreSummary(input["RestoreSummary"])) if "RestoreSummary" in input.keys() else Option_None(),
        SSEDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_SSEDescription(input["SSEDescription"])) if "SSEDescription" in input.keys() else Option_None(),
        ArchivalSummary=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ArchivalSummary(input["ArchivalSummary"])) if "ArchivalSummary" in input.keys() else Option_None(),
        TableClassSummary=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_TableClassSummary(input["TableClassSummary"])) if "TableClassSummary" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughputDescription(input):
    return DafnyProvisionedThroughputDescription(
        LastIncreaseDateTime=Option_Some(TypeError("TimestampShape not supported")) if "LastIncreaseDateTime" in input.keys() else Option_None(),
        LastDecreaseDateTime=Option_Some(TypeError("TimestampShape not supported")) if "LastDecreaseDateTime" in input.keys() else Option_None(),
        NumberOfDecreasesToday=Option_Some(input["NumberOfDecreasesToday"]) if "NumberOfDecreasesToday" in input.keys() else Option_None(),
        ReadCapacityUnits=Option_Some(input["ReadCapacityUnits"]) if "ReadCapacityUnits" in input.keys() else Option_None(),
        WriteCapacityUnits=Option_Some(input["WriteCapacityUnits"]) if "WriteCapacityUnits" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_BillingModeSummary(input):
    return DafnyBillingModeSummary(
        BillingMode=Option_Some(Seq(input["BillingMode"])) if "BillingMode" in input.keys() else Option_None(),
        LastUpdateToPayPerRequestDateTime=Option_Some(TypeError("TimestampShape not supported")) if "LastUpdateToPayPerRequestDateTime" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_LocalSecondaryIndexDescription(input):
    return DafnyLocalSecondaryIndexDescription(
        IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
        KeySchema=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]])) if "KeySchema" in input.keys() else Option_None(),
        Projection=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_Projection(input["Projection"])) if "Projection" in input.keys() else Option_None(),
        IndexSizeBytes=Option_Some(input["IndexSizeBytes"]) if "IndexSizeBytes" in input.keys() else Option_None(),
        ItemCount=Option_Some(input["ItemCount"]) if "ItemCount" in input.keys() else Option_None(),
        IndexArn=Option_Some(Seq(input["IndexArn"])) if "IndexArn" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndexDescription(input):
    return DafnyGlobalSecondaryIndexDescription(
        IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
        KeySchema=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]])) if "KeySchema" in input.keys() else Option_None(),
        Projection=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_Projection(input["Projection"])) if "Projection" in input.keys() else Option_None(),
        IndexStatus=Option_Some(Seq(input["IndexStatus"])) if "IndexStatus" in input.keys() else Option_None(),
        Backfilling=Option_Some(input["Backfilling"]) if "Backfilling" in input.keys() else Option_None(),
        ProvisionedThroughput=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughputDescription(input["ProvisionedThroughput"])) if "ProvisionedThroughput" in input.keys() else Option_None(),
        IndexSizeBytes=Option_Some(input["IndexSizeBytes"]) if "IndexSizeBytes" in input.keys() else Option_None(),
        ItemCount=Option_Some(input["ItemCount"]) if "ItemCount" in input.keys() else Option_None(),
        IndexArn=Option_Some(Seq(input["IndexArn"])) if "IndexArn" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_RestoreSummary(input):
    return DafnyRestoreSummary(
        SourceBackupArn=Option_Some(Seq(input["SourceBackupArn"])) if "SourceBackupArn" in input.keys() else Option_None(),
        SourceTableArn=Option_Some(Seq(input["SourceTableArn"])) if "SourceTableArn" in input.keys() else Option_None(),
        RestoreDateTime=TypeError("TimestampShape not supported"),
        RestoreInProgress=input["RestoreInProgress"],
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_SSEDescription(input):
    return DafnySSEDescription(
        Status=Option_Some(Seq(input["Status"])) if "Status" in input.keys() else Option_None(),
        SSEType=Option_Some(Seq(input["SSEType"])) if "SSEType" in input.keys() else Option_None(),
        KMSMasterKeyArn=Option_Some(Seq(input["KMSMasterKeyArn"])) if "KMSMasterKeyArn" in input.keys() else Option_None(),
        InaccessibleEncryptionDateTime=Option_Some(TypeError("TimestampShape not supported")) if "InaccessibleEncryptionDateTime" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ArchivalSummary(input):
    return DafnyArchivalSummary(
        ArchivalDateTime=Option_Some(TypeError("TimestampShape not supported")) if "ArchivalDateTime" in input.keys() else Option_None(),
        ArchivalReason=Option_Some(Seq(input["ArchivalReason"])) if "ArchivalReason" in input.keys() else Option_None(),
        ArchivalBackupArn=Option_Some(Seq(input["ArchivalBackupArn"])) if "ArchivalBackupArn" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DeleteBackupInput(input):
    return DafnyDeleteBackupInput(
        BackupArn=Seq(input["BackupArn"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DeleteBackupOutput(input):
    return DafnyDeleteBackupOutput(
        BackupDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_BackupDescription(input["BackupDescription"])) if "BackupDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_BackupDescription(input):
    return DafnyBackupDescription(
        BackupDetails=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_BackupDetails(input["BackupDetails"])) if "BackupDetails" in input.keys() else Option_None(),
        SourceTableDetails=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_SourceTableDetails(input["SourceTableDetails"])) if "SourceTableDetails" in input.keys() else Option_None(),
        SourceTableFeatureDetails=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_SourceTableFeatureDetails(input["SourceTableFeatureDetails"])) if "SourceTableFeatureDetails" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_SourceTableDetails(input):
    return DafnySourceTableDetails(
        TableName=Seq(input["TableName"]),
        TableId=Seq(input["TableId"]),
        TableArn=Option_Some(Seq(input["TableArn"])) if "TableArn" in input.keys() else Option_None(),
        TableSizeBytes=Option_Some(input["TableSizeBytes"]) if "TableSizeBytes" in input.keys() else Option_None(),
        KeySchema=
        Seq([AwsSdkToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]]),
        TableCreationDateTime=TypeError("TimestampShape not supported"),
        ProvisionedThroughput=AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughput(input["ProvisionedThroughput"]),
        ItemCount=Option_Some(input["ItemCount"]) if "ItemCount" in input.keys() else Option_None(),
        BillingMode=Option_Some(Seq(input["BillingMode"])) if "BillingMode" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_SourceTableFeatureDetails(input):
    return DafnySourceTableFeatureDetails(
        LocalSecondaryIndexes=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_LocalSecondaryIndexInfo(list_element) for list_element in input["LocalSecondaryIndexes"]])) if "LocalSecondaryIndexes" in input.keys() else Option_None(),
        GlobalSecondaryIndexes=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndexInfo(list_element) for list_element in input["GlobalSecondaryIndexes"]])) if "GlobalSecondaryIndexes" in input.keys() else Option_None(),
        StreamDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_StreamSpecification(input["StreamDescription"])) if "StreamDescription" in input.keys() else Option_None(),
        TimeToLiveDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_TimeToLiveDescription(input["TimeToLiveDescription"])) if "TimeToLiveDescription" in input.keys() else Option_None(),
        SSEDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_SSEDescription(input["SSEDescription"])) if "SSEDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_LocalSecondaryIndexInfo(input):
    return DafnyLocalSecondaryIndexInfo(
        IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
        KeySchema=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]])) if "KeySchema" in input.keys() else Option_None(),
        Projection=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_Projection(input["Projection"])) if "Projection" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndexInfo(input):
    return DafnyGlobalSecondaryIndexInfo(
        IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
        KeySchema=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]])) if "KeySchema" in input.keys() else Option_None(),
        Projection=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_Projection(input["Projection"])) if "Projection" in input.keys() else Option_None(),
        ProvisionedThroughput=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughput(input["ProvisionedThroughput"])) if "ProvisionedThroughput" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_TimeToLiveDescription(input):
    return DafnyTimeToLiveDescription(
        TimeToLiveStatus=Option_Some(Seq(input["TimeToLiveStatus"])) if "TimeToLiveStatus" in input.keys() else Option_None(),
        AttributeName=Option_Some(Seq(input["AttributeName"])) if "AttributeName" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DeleteItemInput(input):
    return DafnyDeleteItemInput(
        TableName=Seq(input["TableName"]),
        Key=
        Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Key"].items() }),
        Expected=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_ExpectedAttributeValue(value) for (key, value) in input["Expected"].items() })) if "Expected" in input.keys() else Option_None(),
        ConditionalOperator=Option_Some(Seq(input["ConditionalOperator"])) if "ConditionalOperator" in input.keys() else Option_None(),
        ReturnValues=Option_Some(Seq(input["ReturnValues"])) if "ReturnValues" in input.keys() else Option_None(),
        ReturnConsumedCapacity=Option_Some(Seq(input["ReturnConsumedCapacity"])) if "ReturnConsumedCapacity" in input.keys() else Option_None(),
        ReturnItemCollectionMetrics=Option_Some(Seq(input["ReturnItemCollectionMetrics"])) if "ReturnItemCollectionMetrics" in input.keys() else Option_None(),
        ConditionExpression=Option_Some(Seq(input["ConditionExpression"])) if "ConditionExpression" in input.keys() else Option_None(),
        ExpressionAttributeNames=
        Option_Some(Map({Seq(key): Seq(value) for (key, value) in input["ExpressionAttributeNames"].items() })) if "ExpressionAttributeNames" in input.keys() else Option_None(),
        ExpressionAttributeValues=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["ExpressionAttributeValues"].items() })) if "ExpressionAttributeValues" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ExpectedAttributeValue(input):
    return DafnyExpectedAttributeValue(
        Value=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(input["Value"])) if "Value" in input.keys() else Option_None(),
        Exists=Option_Some(input["Exists"]) if "Exists" in input.keys() else Option_None(),
        ComparisonOperator=Option_Some(Seq(input["ComparisonOperator"])) if "ComparisonOperator" in input.keys() else Option_None(),
        AttributeValueList=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(list_element) for list_element in input["AttributeValueList"]])) if "AttributeValueList" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DeleteItemOutput(input):
    return DafnyDeleteItemOutput(
        Attributes=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Attributes"].items() })) if "Attributes" in input.keys() else Option_None(),
        ConsumedCapacity=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ConsumedCapacity(input["ConsumedCapacity"])) if "ConsumedCapacity" in input.keys() else Option_None(),
        ItemCollectionMetrics=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ItemCollectionMetrics(input["ItemCollectionMetrics"])) if "ItemCollectionMetrics" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DeleteTableInput(input):
    return DafnyDeleteTableInput(
        TableName=Seq(input["TableName"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DeleteTableOutput(input):
    return DafnyDeleteTableOutput(
        TableDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_TableDescription(input["TableDescription"])) if "TableDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeBackupInput(input):
    return DafnyDescribeBackupInput(
        BackupArn=Seq(input["BackupArn"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeBackupOutput(input):
    return DafnyDescribeBackupOutput(
        BackupDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_BackupDescription(input["BackupDescription"])) if "BackupDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeContinuousBackupsInput(input):
    return DafnyDescribeContinuousBackupsInput(
        TableName=Seq(input["TableName"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeContinuousBackupsOutput(input):
    return DafnyDescribeContinuousBackupsOutput(
        ContinuousBackupsDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ContinuousBackupsDescription(input["ContinuousBackupsDescription"])) if "ContinuousBackupsDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ContinuousBackupsDescription(input):
    return DafnyContinuousBackupsDescription(
        ContinuousBackupsStatus=Seq(input["ContinuousBackupsStatus"]),
        PointInTimeRecoveryDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_PointInTimeRecoveryDescription(input["PointInTimeRecoveryDescription"])) if "PointInTimeRecoveryDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_PointInTimeRecoveryDescription(input):
    return DafnyPointInTimeRecoveryDescription(
        PointInTimeRecoveryStatus=Option_Some(Seq(input["PointInTimeRecoveryStatus"])) if "PointInTimeRecoveryStatus" in input.keys() else Option_None(),
        EarliestRestorableDateTime=Option_Some(TypeError("TimestampShape not supported")) if "EarliestRestorableDateTime" in input.keys() else Option_None(),
        LatestRestorableDateTime=Option_Some(TypeError("TimestampShape not supported")) if "LatestRestorableDateTime" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeContributorInsightsInput(input):
    return DafnyDescribeContributorInsightsInput(
        TableName=Seq(input["TableName"]),
        IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeContributorInsightsOutput(input):
    return DafnyDescribeContributorInsightsOutput(
        TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
        IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
        ContributorInsightsRuleList=
        Option_Some(Seq([Seq(list_element) for list_element in input["ContributorInsightsRuleList"]])) if "ContributorInsightsRuleList" in input.keys() else Option_None(),
        ContributorInsightsStatus=Option_Some(Seq(input["ContributorInsightsStatus"])) if "ContributorInsightsStatus" in input.keys() else Option_None(),
        LastUpdateDateTime=Option_Some(TypeError("TimestampShape not supported")) if "LastUpdateDateTime" in input.keys() else Option_None(),
        FailureException=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_FailureException(input["FailureException"])) if "FailureException" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_FailureException(input):
    return DafnyFailureException(
        ExceptionName=Option_Some(Seq(input["ExceptionName"])) if "ExceptionName" in input.keys() else Option_None(),
        ExceptionDescription=Option_Some(Seq(input["ExceptionDescription"])) if "ExceptionDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeEndpointsRequest(input):
    return DafnyDescribeEndpointsRequest(
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeEndpointsResponse(input):
    return DafnyDescribeEndpointsResponse(
        Endpoints=
        Seq([AwsSdkToDafny_com_amazonaws_dynamodb_Endpoint(list_element) for list_element in input["Endpoints"]]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_Endpoint(input):
    return DafnyEndpoint(
        Address=Seq(input["Address"]),
        CachePeriodInMinutes=input["CachePeriodInMinutes"],
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeExportInput(input):
    return DafnyDescribeExportInput(
        ExportArn=Seq(input["ExportArn"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeExportOutput(input):
    return DafnyDescribeExportOutput(
        ExportDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ExportDescription(input["ExportDescription"])) if "ExportDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ExportDescription(input):
    return DafnyExportDescription(
        ExportArn=Option_Some(Seq(input["ExportArn"])) if "ExportArn" in input.keys() else Option_None(),
        ExportStatus=Option_Some(Seq(input["ExportStatus"])) if "ExportStatus" in input.keys() else Option_None(),
        StartTime=Option_Some(TypeError("TimestampShape not supported")) if "StartTime" in input.keys() else Option_None(),
        EndTime=Option_Some(TypeError("TimestampShape not supported")) if "EndTime" in input.keys() else Option_None(),
        ExportManifest=Option_Some(Seq(input["ExportManifest"])) if "ExportManifest" in input.keys() else Option_None(),
        TableArn=Option_Some(Seq(input["TableArn"])) if "TableArn" in input.keys() else Option_None(),
        TableId=Option_Some(Seq(input["TableId"])) if "TableId" in input.keys() else Option_None(),
        ExportTime=Option_Some(TypeError("TimestampShape not supported")) if "ExportTime" in input.keys() else Option_None(),
        ClientToken=Option_Some(Seq(input["ClientToken"])) if "ClientToken" in input.keys() else Option_None(),
        S3Bucket=Option_Some(Seq(input["S3Bucket"])) if "S3Bucket" in input.keys() else Option_None(),
        S3BucketOwner=Option_Some(Seq(input["S3BucketOwner"])) if "S3BucketOwner" in input.keys() else Option_None(),
        S3Prefix=Option_Some(Seq(input["S3Prefix"])) if "S3Prefix" in input.keys() else Option_None(),
        S3SseAlgorithm=Option_Some(Seq(input["S3SseAlgorithm"])) if "S3SseAlgorithm" in input.keys() else Option_None(),
        S3SseKmsKeyId=Option_Some(Seq(input["S3SseKmsKeyId"])) if "S3SseKmsKeyId" in input.keys() else Option_None(),
        FailureCode=Option_Some(Seq(input["FailureCode"])) if "FailureCode" in input.keys() else Option_None(),
        FailureMessage=Option_Some(Seq(input["FailureMessage"])) if "FailureMessage" in input.keys() else Option_None(),
        ExportFormat=Option_Some(Seq(input["ExportFormat"])) if "ExportFormat" in input.keys() else Option_None(),
        BilledSizeBytes=Option_Some(input["BilledSizeBytes"]) if "BilledSizeBytes" in input.keys() else Option_None(),
        ItemCount=Option_Some(input["ItemCount"]) if "ItemCount" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeGlobalTableInput(input):
    return DafnyDescribeGlobalTableInput(
        GlobalTableName=Seq(input["GlobalTableName"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeGlobalTableOutput(input):
    return DafnyDescribeGlobalTableOutput(
        GlobalTableDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_GlobalTableDescription(input["GlobalTableDescription"])) if "GlobalTableDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeGlobalTableSettingsInput(input):
    return DafnyDescribeGlobalTableSettingsInput(
        GlobalTableName=Seq(input["GlobalTableName"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeGlobalTableSettingsOutput(input):
    return DafnyDescribeGlobalTableSettingsOutput(
        GlobalTableName=Option_Some(Seq(input["GlobalTableName"])) if "GlobalTableName" in input.keys() else Option_None(),
        ReplicaSettings=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaSettingsDescription(list_element) for list_element in input["ReplicaSettings"]])) if "ReplicaSettings" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaSettingsDescription(input):
    return DafnyReplicaSettingsDescription(
        RegionName=Seq(input["RegionName"]),
        ReplicaStatus=Option_Some(Seq(input["ReplicaStatus"])) if "ReplicaStatus" in input.keys() else Option_None(),
        ReplicaBillingModeSummary=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_BillingModeSummary(input["ReplicaBillingModeSummary"])) if "ReplicaBillingModeSummary" in input.keys() else Option_None(),
        ReplicaProvisionedReadCapacityUnits=Option_Some(input["ReplicaProvisionedReadCapacityUnits"]) if "ReplicaProvisionedReadCapacityUnits" in input.keys() else Option_None(),
        ReplicaProvisionedReadCapacityAutoScalingSettings=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input["ReplicaProvisionedReadCapacityAutoScalingSettings"])) if "ReplicaProvisionedReadCapacityAutoScalingSettings" in input.keys() else Option_None(),
        ReplicaProvisionedWriteCapacityUnits=Option_Some(input["ReplicaProvisionedWriteCapacityUnits"]) if "ReplicaProvisionedWriteCapacityUnits" in input.keys() else Option_None(),
        ReplicaProvisionedWriteCapacityAutoScalingSettings=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input["ReplicaProvisionedWriteCapacityAutoScalingSettings"])) if "ReplicaProvisionedWriteCapacityAutoScalingSettings" in input.keys() else Option_None(),
        ReplicaGlobalSecondaryIndexSettings=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndexSettingsDescription(list_element) for list_element in input["ReplicaGlobalSecondaryIndexSettings"]])) if "ReplicaGlobalSecondaryIndexSettings" in input.keys() else Option_None(),
        ReplicaTableClassSummary=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_TableClassSummary(input["ReplicaTableClassSummary"])) if "ReplicaTableClassSummary" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input):
    return DafnyAutoScalingSettingsDescription(
        MinimumUnits=Option_Some(input["MinimumUnits"]) if "MinimumUnits" in input.keys() else Option_None(),
        MaximumUnits=Option_Some(input["MaximumUnits"]) if "MaximumUnits" in input.keys() else Option_None(),
        AutoScalingDisabled=Option_Some(input["AutoScalingDisabled"]) if "AutoScalingDisabled" in input.keys() else Option_None(),
        AutoScalingRoleArn=Option_Some(Seq(input["AutoScalingRoleArn"])) if "AutoScalingRoleArn" in input.keys() else Option_None(),
        ScalingPolicies=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingPolicyDescription(list_element) for list_element in input["ScalingPolicies"]])) if "ScalingPolicies" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndexSettingsDescription(input):
    return DafnyReplicaGlobalSecondaryIndexSettingsDescription(
        IndexName=Seq(input["IndexName"]),
        IndexStatus=Option_Some(Seq(input["IndexStatus"])) if "IndexStatus" in input.keys() else Option_None(),
        ProvisionedReadCapacityUnits=Option_Some(input["ProvisionedReadCapacityUnits"]) if "ProvisionedReadCapacityUnits" in input.keys() else Option_None(),
        ProvisionedReadCapacityAutoScalingSettings=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input["ProvisionedReadCapacityAutoScalingSettings"])) if "ProvisionedReadCapacityAutoScalingSettings" in input.keys() else Option_None(),
        ProvisionedWriteCapacityUnits=Option_Some(input["ProvisionedWriteCapacityUnits"]) if "ProvisionedWriteCapacityUnits" in input.keys() else Option_None(),
        ProvisionedWriteCapacityAutoScalingSettings=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input["ProvisionedWriteCapacityAutoScalingSettings"])) if "ProvisionedWriteCapacityAutoScalingSettings" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingPolicyDescription(input):
    return DafnyAutoScalingPolicyDescription(
        PolicyName=Option_Some(Seq(input["PolicyName"])) if "PolicyName" in input.keys() else Option_None(),
        TargetTrackingScalingPolicyConfiguration=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingTargetTrackingScalingPolicyConfigurationDescription(input["TargetTrackingScalingPolicyConfiguration"])) if "TargetTrackingScalingPolicyConfiguration" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingTargetTrackingScalingPolicyConfigurationDescription(input):
    return DafnyAutoScalingTargetTrackingScalingPolicyConfigurationDescription(
        DisableScaleIn=Option_Some(input["DisableScaleIn"]) if "DisableScaleIn" in input.keys() else Option_None(),
        ScaleInCooldown=Option_Some(input["ScaleInCooldown"]) if "ScaleInCooldown" in input.keys() else Option_None(),
        ScaleOutCooldown=Option_Some(input["ScaleOutCooldown"]) if "ScaleOutCooldown" in input.keys() else Option_None(),
        TargetValue=input["TargetValue"],
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeImportInput(input):
    return DafnyDescribeImportInput(
        ImportArn=Seq(input["ImportArn"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeImportOutput(input):
    return DafnyDescribeImportOutput(
        ImportTableDescription=AwsSdkToDafny_com_amazonaws_dynamodb_ImportTableDescription(input["ImportTableDescription"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ImportTableDescription(input):
    return DafnyImportTableDescription(
        ImportArn=Option_Some(Seq(input["ImportArn"])) if "ImportArn" in input.keys() else Option_None(),
        ImportStatus=Option_Some(Seq(input["ImportStatus"])) if "ImportStatus" in input.keys() else Option_None(),
        TableArn=Option_Some(Seq(input["TableArn"])) if "TableArn" in input.keys() else Option_None(),
        TableId=Option_Some(Seq(input["TableId"])) if "TableId" in input.keys() else Option_None(),
        ClientToken=Option_Some(Seq(input["ClientToken"])) if "ClientToken" in input.keys() else Option_None(),
        S3BucketSource=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_S3BucketSource(input["S3BucketSource"])) if "S3BucketSource" in input.keys() else Option_None(),
        ErrorCount=Option_Some(input["ErrorCount"]) if "ErrorCount" in input.keys() else Option_None(),
        CloudWatchLogGroupArn=Option_Some(Seq(input["CloudWatchLogGroupArn"])) if "CloudWatchLogGroupArn" in input.keys() else Option_None(),
        InputFormat=Option_Some(Seq(input["InputFormat"])) if "InputFormat" in input.keys() else Option_None(),
        InputFormatOptions=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_InputFormatOptions(input["InputFormatOptions"])) if "InputFormatOptions" in input.keys() else Option_None(),
        InputCompressionType=Option_Some(Seq(input["InputCompressionType"])) if "InputCompressionType" in input.keys() else Option_None(),
        TableCreationParameters=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_TableCreationParameters(input["TableCreationParameters"])) if "TableCreationParameters" in input.keys() else Option_None(),
        StartTime=Option_Some(TypeError("TimestampShape not supported")) if "StartTime" in input.keys() else Option_None(),
        EndTime=Option_Some(TypeError("TimestampShape not supported")) if "EndTime" in input.keys() else Option_None(),
        ProcessedSizeBytes=Option_Some(input["ProcessedSizeBytes"]) if "ProcessedSizeBytes" in input.keys() else Option_None(),
        ProcessedItemCount=Option_Some(input["ProcessedItemCount"]) if "ProcessedItemCount" in input.keys() else Option_None(),
        ImportedItemCount=Option_Some(input["ImportedItemCount"]) if "ImportedItemCount" in input.keys() else Option_None(),
        FailureCode=Option_Some(Seq(input["FailureCode"])) if "FailureCode" in input.keys() else Option_None(),
        FailureMessage=Option_Some(Seq(input["FailureMessage"])) if "FailureMessage" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_S3BucketSource(input):
    return DafnyS3BucketSource(
        S3BucketOwner=Option_Some(Seq(input["S3BucketOwner"])) if "S3BucketOwner" in input.keys() else Option_None(),
        S3Bucket=Seq(input["S3Bucket"]),
        S3KeyPrefix=Option_Some(Seq(input["S3KeyPrefix"])) if "S3KeyPrefix" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_InputFormatOptions(input):
    return DafnyInputFormatOptions(
        Csv=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_CsvOptions(input["Csv"])) if "Csv" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_TableCreationParameters(input):
    return DafnyTableCreationParameters(
        TableName=Seq(input["TableName"]),
        AttributeDefinitions=
        Seq([AwsSdkToDafny_com_amazonaws_dynamodb_AttributeDefinition(list_element) for list_element in input["AttributeDefinitions"]]),
        KeySchema=
        Seq([AwsSdkToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]]),
        BillingMode=Option_Some(Seq(input["BillingMode"])) if "BillingMode" in input.keys() else Option_None(),
        ProvisionedThroughput=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughput(input["ProvisionedThroughput"])) if "ProvisionedThroughput" in input.keys() else Option_None(),
        SSESpecification=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_SSESpecification(input["SSESpecification"])) if "SSESpecification" in input.keys() else Option_None(),
        GlobalSecondaryIndexes=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndex(list_element) for list_element in input["GlobalSecondaryIndexes"]])) if "GlobalSecondaryIndexes" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_CsvOptions(input):
    return DafnyCsvOptions(
        Delimiter=Option_Some(Seq(input["Delimiter"])) if "Delimiter" in input.keys() else Option_None(),
        HeaderList=
        Option_Some(Seq([Seq(list_element) for list_element in input["HeaderList"]])) if "HeaderList" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeKinesisStreamingDestinationInput(input):
    return DafnyDescribeKinesisStreamingDestinationInput(
        TableName=Seq(input["TableName"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeKinesisStreamingDestinationOutput(input):
    return DafnyDescribeKinesisStreamingDestinationOutput(
        TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
        KinesisDataStreamDestinations=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_KinesisDataStreamDestination(list_element) for list_element in input["KinesisDataStreamDestinations"]])) if "KinesisDataStreamDestinations" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_KinesisDataStreamDestination(input):
    return DafnyKinesisDataStreamDestination(
        StreamArn=Option_Some(Seq(input["StreamArn"])) if "StreamArn" in input.keys() else Option_None(),
        DestinationStatus=Option_Some(Seq(input["DestinationStatus"])) if "DestinationStatus" in input.keys() else Option_None(),
        DestinationStatusDescription=Option_Some(Seq(input["DestinationStatusDescription"])) if "DestinationStatusDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeLimitsInput(input):
    return DafnyDescribeLimitsInput(
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeLimitsOutput(input):
    return DafnyDescribeLimitsOutput(
        AccountMaxReadCapacityUnits=Option_Some(input["AccountMaxReadCapacityUnits"]) if "AccountMaxReadCapacityUnits" in input.keys() else Option_None(),
        AccountMaxWriteCapacityUnits=Option_Some(input["AccountMaxWriteCapacityUnits"]) if "AccountMaxWriteCapacityUnits" in input.keys() else Option_None(),
        TableMaxReadCapacityUnits=Option_Some(input["TableMaxReadCapacityUnits"]) if "TableMaxReadCapacityUnits" in input.keys() else Option_None(),
        TableMaxWriteCapacityUnits=Option_Some(input["TableMaxWriteCapacityUnits"]) if "TableMaxWriteCapacityUnits" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeTableInput(input):
    return DafnyDescribeTableInput(
        TableName=Seq(input["TableName"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeTableOutput(input):
    return DafnyDescribeTableOutput(
        Table=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_TableDescription(input["Table"])) if "Table" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeTableReplicaAutoScalingInput(input):
    return DafnyDescribeTableReplicaAutoScalingInput(
        TableName=Seq(input["TableName"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeTableReplicaAutoScalingOutput(input):
    return DafnyDescribeTableReplicaAutoScalingOutput(
        TableAutoScalingDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_TableAutoScalingDescription(input["TableAutoScalingDescription"])) if "TableAutoScalingDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_TableAutoScalingDescription(input):
    return DafnyTableAutoScalingDescription(
        TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
        TableStatus=Option_Some(Seq(input["TableStatus"])) if "TableStatus" in input.keys() else Option_None(),
        Replicas=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaAutoScalingDescription(list_element) for list_element in input["Replicas"]])) if "Replicas" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaAutoScalingDescription(input):
    return DafnyReplicaAutoScalingDescription(
        RegionName=Option_Some(Seq(input["RegionName"])) if "RegionName" in input.keys() else Option_None(),
        GlobalSecondaryIndexes=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndexAutoScalingDescription(list_element) for list_element in input["GlobalSecondaryIndexes"]])) if "GlobalSecondaryIndexes" in input.keys() else Option_None(),
        ReplicaProvisionedReadCapacityAutoScalingSettings=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input["ReplicaProvisionedReadCapacityAutoScalingSettings"])) if "ReplicaProvisionedReadCapacityAutoScalingSettings" in input.keys() else Option_None(),
        ReplicaProvisionedWriteCapacityAutoScalingSettings=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input["ReplicaProvisionedWriteCapacityAutoScalingSettings"])) if "ReplicaProvisionedWriteCapacityAutoScalingSettings" in input.keys() else Option_None(),
        ReplicaStatus=Option_Some(Seq(input["ReplicaStatus"])) if "ReplicaStatus" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndexAutoScalingDescription(input):
    return DafnyReplicaGlobalSecondaryIndexAutoScalingDescription(
        IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
        IndexStatus=Option_Some(Seq(input["IndexStatus"])) if "IndexStatus" in input.keys() else Option_None(),
        ProvisionedReadCapacityAutoScalingSettings=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input["ProvisionedReadCapacityAutoScalingSettings"])) if "ProvisionedReadCapacityAutoScalingSettings" in input.keys() else Option_None(),
        ProvisionedWriteCapacityAutoScalingSettings=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input["ProvisionedWriteCapacityAutoScalingSettings"])) if "ProvisionedWriteCapacityAutoScalingSettings" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeTimeToLiveInput(input):
    return DafnyDescribeTimeToLiveInput(
        TableName=Seq(input["TableName"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DescribeTimeToLiveOutput(input):
    return DafnyDescribeTimeToLiveOutput(
        TimeToLiveDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_TimeToLiveDescription(input["TimeToLiveDescription"])) if "TimeToLiveDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DisableKinesisStreamingDestinationInput(input):
    return DafnyDisableKinesisStreamingDestinationInput(
        TableName=Seq(input["TableName"]),
        StreamArn=Seq(input["StreamArn"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DisableKinesisStreamingDestinationOutput(input):
    return DafnyDisableKinesisStreamingDestinationOutput(
        TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
        StreamArn=Option_Some(Seq(input["StreamArn"])) if "StreamArn" in input.keys() else Option_None(),
        DestinationStatus=Option_Some(Seq(input["DestinationStatus"])) if "DestinationStatus" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_EnableKinesisStreamingDestinationInput(input):
    return DafnyEnableKinesisStreamingDestinationInput(
        TableName=Seq(input["TableName"]),
        StreamArn=Seq(input["StreamArn"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_EnableKinesisStreamingDestinationOutput(input):
    return DafnyEnableKinesisStreamingDestinationOutput(
        TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
        StreamArn=Option_Some(Seq(input["StreamArn"])) if "StreamArn" in input.keys() else Option_None(),
        DestinationStatus=Option_Some(Seq(input["DestinationStatus"])) if "DestinationStatus" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ExecuteStatementInput(input):
    return DafnyExecuteStatementInput(
        Statement=Seq(input["Statement"]),
        Parameters=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(list_element) for list_element in input["Parameters"]])) if "Parameters" in input.keys() else Option_None(),
        ConsistentRead=Option_Some(input["ConsistentRead"]) if "ConsistentRead" in input.keys() else Option_None(),
        NextToken=Option_Some(Seq(input["NextToken"])) if "NextToken" in input.keys() else Option_None(),
        ReturnConsumedCapacity=Option_Some(Seq(input["ReturnConsumedCapacity"])) if "ReturnConsumedCapacity" in input.keys() else Option_None(),
        Limit=Option_Some(input["Limit"]) if "Limit" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ExecuteStatementOutput(input):
    return DafnyExecuteStatementOutput(
        Items=

        Option_Some(Seq([Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in list_element.items() }) for list_element in input["Items"]])) if "Items" in input.keys() else Option_None(),
        NextToken=Option_Some(Seq(input["NextToken"])) if "NextToken" in input.keys() else Option_None(),
        ConsumedCapacity=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ConsumedCapacity(input["ConsumedCapacity"])) if "ConsumedCapacity" in input.keys() else Option_None(),
        LastEvaluatedKey=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["LastEvaluatedKey"].items() })) if "LastEvaluatedKey" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ExecuteTransactionInput(input):
    return DafnyExecuteTransactionInput(
        TransactStatements=
        Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ParameterizedStatement(list_element) for list_element in input["TransactStatements"]]),
        ClientRequestToken=Option_Some(Seq(input["ClientRequestToken"])) if "ClientRequestToken" in input.keys() else Option_None(),
        ReturnConsumedCapacity=Option_Some(Seq(input["ReturnConsumedCapacity"])) if "ReturnConsumedCapacity" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ParameterizedStatement(input):
    return DafnyParameterizedStatement(
        Statement=Seq(input["Statement"]),
        Parameters=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(list_element) for list_element in input["Parameters"]])) if "Parameters" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ExecuteTransactionOutput(input):
    return DafnyExecuteTransactionOutput(
        Responses=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ItemResponse(list_element) for list_element in input["Responses"]])) if "Responses" in input.keys() else Option_None(),
        ConsumedCapacity=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ConsumedCapacity(list_element) for list_element in input["ConsumedCapacity"]])) if "ConsumedCapacity" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ItemResponse(input):
    return DafnyItemResponse(
        Item=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Item"].items() })) if "Item" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ExportTableToPointInTimeInput(input):
    return DafnyExportTableToPointInTimeInput(
        TableArn=Seq(input["TableArn"]),
        ExportTime=Option_Some(TypeError("TimestampShape not supported")) if "ExportTime" in input.keys() else Option_None(),
        ClientToken=Option_Some(Seq(input["ClientToken"])) if "ClientToken" in input.keys() else Option_None(),
        S3Bucket=Seq(input["S3Bucket"]),
        S3BucketOwner=Option_Some(Seq(input["S3BucketOwner"])) if "S3BucketOwner" in input.keys() else Option_None(),
        S3Prefix=Option_Some(Seq(input["S3Prefix"])) if "S3Prefix" in input.keys() else Option_None(),
        S3SseAlgorithm=Option_Some(Seq(input["S3SseAlgorithm"])) if "S3SseAlgorithm" in input.keys() else Option_None(),
        S3SseKmsKeyId=Option_Some(Seq(input["S3SseKmsKeyId"])) if "S3SseKmsKeyId" in input.keys() else Option_None(),
        ExportFormat=Option_Some(Seq(input["ExportFormat"])) if "ExportFormat" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ExportTableToPointInTimeOutput(input):
    return DafnyExportTableToPointInTimeOutput(
        ExportDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ExportDescription(input["ExportDescription"])) if "ExportDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_GetItemInput(input):
    return DafnyGetItemInput(
        TableName=Seq(input["TableName"]),
        Key=
        Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Key"].items() }),
        AttributesToGet=
        Option_Some(Seq([Seq(list_element) for list_element in input["AttributesToGet"]])) if "AttributesToGet" in input.keys() else Option_None(),
        ConsistentRead=Option_Some(input["ConsistentRead"]) if "ConsistentRead" in input.keys() else Option_None(),
        ReturnConsumedCapacity=Option_Some(Seq(input["ReturnConsumedCapacity"])) if "ReturnConsumedCapacity" in input.keys() else Option_None(),
        ProjectionExpression=Option_Some(Seq(input["ProjectionExpression"])) if "ProjectionExpression" in input.keys() else Option_None(),
        ExpressionAttributeNames=
        Option_Some(Map({Seq(key): Seq(value) for (key, value) in input["ExpressionAttributeNames"].items() })) if "ExpressionAttributeNames" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_GetItemOutput(input):
    return DafnyGetItemOutput(
        Item=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Item"].items() })) if "Item" in input.keys() else Option_None(),
        ConsumedCapacity=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ConsumedCapacity(input["ConsumedCapacity"])) if "ConsumedCapacity" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ImportTableInput(input):
    return DafnyImportTableInput(
        ClientToken=Option_Some(Seq(input["ClientToken"])) if "ClientToken" in input.keys() else Option_None(),
        S3BucketSource=AwsSdkToDafny_com_amazonaws_dynamodb_S3BucketSource(input["S3BucketSource"]),
        InputFormat=Seq(input["InputFormat"]),
        InputFormatOptions=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_InputFormatOptions(input["InputFormatOptions"])) if "InputFormatOptions" in input.keys() else Option_None(),
        InputCompressionType=Option_Some(Seq(input["InputCompressionType"])) if "InputCompressionType" in input.keys() else Option_None(),
        TableCreationParameters=AwsSdkToDafny_com_amazonaws_dynamodb_TableCreationParameters(input["TableCreationParameters"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ImportTableOutput(input):
    return DafnyImportTableOutput(
        ImportTableDescription=AwsSdkToDafny_com_amazonaws_dynamodb_ImportTableDescription(input["ImportTableDescription"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ListBackupsInput(input):
    return DafnyListBackupsInput(
        TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
        Limit=Option_Some(input["Limit"]) if "Limit" in input.keys() else Option_None(),
        TimeRangeLowerBound=Option_Some(TypeError("TimestampShape not supported")) if "TimeRangeLowerBound" in input.keys() else Option_None(),
        TimeRangeUpperBound=Option_Some(TypeError("TimestampShape not supported")) if "TimeRangeUpperBound" in input.keys() else Option_None(),
        ExclusiveStartBackupArn=Option_Some(Seq(input["ExclusiveStartBackupArn"])) if "ExclusiveStartBackupArn" in input.keys() else Option_None(),
        BackupType=Option_Some(Seq(input["BackupType"])) if "BackupType" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ListBackupsOutput(input):
    return DafnyListBackupsOutput(
        BackupSummaries=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_BackupSummary(list_element) for list_element in input["BackupSummaries"]])) if "BackupSummaries" in input.keys() else Option_None(),
        LastEvaluatedBackupArn=Option_Some(Seq(input["LastEvaluatedBackupArn"])) if "LastEvaluatedBackupArn" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_BackupSummary(input):
    return DafnyBackupSummary(
        TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
        TableId=Option_Some(Seq(input["TableId"])) if "TableId" in input.keys() else Option_None(),
        TableArn=Option_Some(Seq(input["TableArn"])) if "TableArn" in input.keys() else Option_None(),
        BackupArn=Option_Some(Seq(input["BackupArn"])) if "BackupArn" in input.keys() else Option_None(),
        BackupName=Option_Some(Seq(input["BackupName"])) if "BackupName" in input.keys() else Option_None(),
        BackupCreationDateTime=Option_Some(TypeError("TimestampShape not supported")) if "BackupCreationDateTime" in input.keys() else Option_None(),
        BackupExpiryDateTime=Option_Some(TypeError("TimestampShape not supported")) if "BackupExpiryDateTime" in input.keys() else Option_None(),
        BackupStatus=Option_Some(Seq(input["BackupStatus"])) if "BackupStatus" in input.keys() else Option_None(),
        BackupType=Option_Some(Seq(input["BackupType"])) if "BackupType" in input.keys() else Option_None(),
        BackupSizeBytes=Option_Some(input["BackupSizeBytes"]) if "BackupSizeBytes" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ListContributorInsightsInput(input):
    return DafnyListContributorInsightsInput(
        TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
        NextToken=Option_Some(Seq(input["NextToken"])) if "NextToken" in input.keys() else Option_None(),
        MaxResults=Option_Some(input["MaxResults"]) if "MaxResults" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ListContributorInsightsOutput(input):
    return DafnyListContributorInsightsOutput(
        ContributorInsightsSummaries=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ContributorInsightsSummary(list_element) for list_element in input["ContributorInsightsSummaries"]])) if "ContributorInsightsSummaries" in input.keys() else Option_None(),
        NextToken=Option_Some(Seq(input["NextToken"])) if "NextToken" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ContributorInsightsSummary(input):
    return DafnyContributorInsightsSummary(
        TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
        IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
        ContributorInsightsStatus=Option_Some(Seq(input["ContributorInsightsStatus"])) if "ContributorInsightsStatus" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ListExportsInput(input):
    return DafnyListExportsInput(
        TableArn=Option_Some(Seq(input["TableArn"])) if "TableArn" in input.keys() else Option_None(),
        MaxResults=Option_Some(input["MaxResults"]) if "MaxResults" in input.keys() else Option_None(),
        NextToken=Option_Some(Seq(input["NextToken"])) if "NextToken" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ListExportsOutput(input):
    return DafnyListExportsOutput(
        ExportSummaries=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ExportSummary(list_element) for list_element in input["ExportSummaries"]])) if "ExportSummaries" in input.keys() else Option_None(),
        NextToken=Option_Some(Seq(input["NextToken"])) if "NextToken" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ExportSummary(input):
    return DafnyExportSummary(
        ExportArn=Option_Some(Seq(input["ExportArn"])) if "ExportArn" in input.keys() else Option_None(),
        ExportStatus=Option_Some(Seq(input["ExportStatus"])) if "ExportStatus" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ListGlobalTablesInput(input):
    return DafnyListGlobalTablesInput(
        ExclusiveStartGlobalTableName=Option_Some(Seq(input["ExclusiveStartGlobalTableName"])) if "ExclusiveStartGlobalTableName" in input.keys() else Option_None(),
        Limit=Option_Some(input["Limit"]) if "Limit" in input.keys() else Option_None(),
        RegionName=Option_Some(Seq(input["RegionName"])) if "RegionName" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ListGlobalTablesOutput(input):
    return DafnyListGlobalTablesOutput(
        GlobalTables=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_GlobalTable(list_element) for list_element in input["GlobalTables"]])) if "GlobalTables" in input.keys() else Option_None(),
        LastEvaluatedGlobalTableName=Option_Some(Seq(input["LastEvaluatedGlobalTableName"])) if "LastEvaluatedGlobalTableName" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_GlobalTable(input):
    return DafnyGlobalTable(
        GlobalTableName=Option_Some(Seq(input["GlobalTableName"])) if "GlobalTableName" in input.keys() else Option_None(),
        ReplicationGroup=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_Replica(list_element) for list_element in input["ReplicationGroup"]])) if "ReplicationGroup" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ListImportsInput(input):
    return DafnyListImportsInput(
        TableArn=Option_Some(Seq(input["TableArn"])) if "TableArn" in input.keys() else Option_None(),
        PageSize=Option_Some(input["PageSize"]) if "PageSize" in input.keys() else Option_None(),
        NextToken=Option_Some(Seq(input["NextToken"])) if "NextToken" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ListImportsOutput(input):
    return DafnyListImportsOutput(
        ImportSummaryList=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ImportSummary(list_element) for list_element in input["ImportSummaryList"]])) if "ImportSummaryList" in input.keys() else Option_None(),
        NextToken=Option_Some(Seq(input["NextToken"])) if "NextToken" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ImportSummary(input):
    return DafnyImportSummary(
        ImportArn=Option_Some(Seq(input["ImportArn"])) if "ImportArn" in input.keys() else Option_None(),
        ImportStatus=Option_Some(Seq(input["ImportStatus"])) if "ImportStatus" in input.keys() else Option_None(),
        TableArn=Option_Some(Seq(input["TableArn"])) if "TableArn" in input.keys() else Option_None(),
        S3BucketSource=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_S3BucketSource(input["S3BucketSource"])) if "S3BucketSource" in input.keys() else Option_None(),
        CloudWatchLogGroupArn=Option_Some(Seq(input["CloudWatchLogGroupArn"])) if "CloudWatchLogGroupArn" in input.keys() else Option_None(),
        InputFormat=Option_Some(Seq(input["InputFormat"])) if "InputFormat" in input.keys() else Option_None(),
        StartTime=Option_Some(TypeError("TimestampShape not supported")) if "StartTime" in input.keys() else Option_None(),
        EndTime=Option_Some(TypeError("TimestampShape not supported")) if "EndTime" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ListTablesInput(input):
    return DafnyListTablesInput(
        ExclusiveStartTableName=Option_Some(Seq(input["ExclusiveStartTableName"])) if "ExclusiveStartTableName" in input.keys() else Option_None(),
        Limit=Option_Some(input["Limit"]) if "Limit" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ListTablesOutput(input):
    return DafnyListTablesOutput(
        TableNames=
        Option_Some(Seq([Seq(list_element) for list_element in input["TableNames"]])) if "TableNames" in input.keys() else Option_None(),
        LastEvaluatedTableName=Option_Some(Seq(input["LastEvaluatedTableName"])) if "LastEvaluatedTableName" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ListTagsOfResourceInput(input):
    return DafnyListTagsOfResourceInput(
        ResourceArn=Seq(input["ResourceArn"]),
        NextToken=Option_Some(Seq(input["NextToken"])) if "NextToken" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ListTagsOfResourceOutput(input):
    return DafnyListTagsOfResourceOutput(
        Tags=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_Tag(list_element) for list_element in input["Tags"]])) if "Tags" in input.keys() else Option_None(),
        NextToken=Option_Some(Seq(input["NextToken"])) if "NextToken" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_PutItemInput(input):
    return DafnyPutItemInput(
        TableName=Seq(input["TableName"]),
        Item=
        Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Item"].items() }),
        Expected=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_ExpectedAttributeValue(value) for (key, value) in input["Expected"].items() })) if "Expected" in input.keys() else Option_None(),
        ReturnValues=Option_Some(Seq(input["ReturnValues"])) if "ReturnValues" in input.keys() else Option_None(),
        ReturnConsumedCapacity=Option_Some(Seq(input["ReturnConsumedCapacity"])) if "ReturnConsumedCapacity" in input.keys() else Option_None(),
        ReturnItemCollectionMetrics=Option_Some(Seq(input["ReturnItemCollectionMetrics"])) if "ReturnItemCollectionMetrics" in input.keys() else Option_None(),
        ConditionalOperator=Option_Some(Seq(input["ConditionalOperator"])) if "ConditionalOperator" in input.keys() else Option_None(),
        ConditionExpression=Option_Some(Seq(input["ConditionExpression"])) if "ConditionExpression" in input.keys() else Option_None(),
        ExpressionAttributeNames=
        Option_Some(Map({Seq(key): Seq(value) for (key, value) in input["ExpressionAttributeNames"].items() })) if "ExpressionAttributeNames" in input.keys() else Option_None(),
        ExpressionAttributeValues=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["ExpressionAttributeValues"].items() })) if "ExpressionAttributeValues" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_PutItemOutput(input):
    return DafnyPutItemOutput(
        Attributes=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Attributes"].items() })) if "Attributes" in input.keys() else Option_None(),
        ConsumedCapacity=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ConsumedCapacity(input["ConsumedCapacity"])) if "ConsumedCapacity" in input.keys() else Option_None(),
        ItemCollectionMetrics=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ItemCollectionMetrics(input["ItemCollectionMetrics"])) if "ItemCollectionMetrics" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_QueryInput(input):
    return DafnyQueryInput(
        TableName=Seq(input["TableName"]),
        IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
        Select=Option_Some(Seq(input["Select"])) if "Select" in input.keys() else Option_None(),
        AttributesToGet=
        Option_Some(Seq([Seq(list_element) for list_element in input["AttributesToGet"]])) if "AttributesToGet" in input.keys() else Option_None(),
        Limit=Option_Some(input["Limit"]) if "Limit" in input.keys() else Option_None(),
        ConsistentRead=Option_Some(input["ConsistentRead"]) if "ConsistentRead" in input.keys() else Option_None(),
        KeyConditions=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_Condition(value) for (key, value) in input["KeyConditions"].items() })) if "KeyConditions" in input.keys() else Option_None(),
        QueryFilter=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_Condition(value) for (key, value) in input["QueryFilter"].items() })) if "QueryFilter" in input.keys() else Option_None(),
        ConditionalOperator=Option_Some(Seq(input["ConditionalOperator"])) if "ConditionalOperator" in input.keys() else Option_None(),
        ScanIndexForward=Option_Some(input["ScanIndexForward"]) if "ScanIndexForward" in input.keys() else Option_None(),
        ExclusiveStartKey=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["ExclusiveStartKey"].items() })) if "ExclusiveStartKey" in input.keys() else Option_None(),
        ReturnConsumedCapacity=Option_Some(Seq(input["ReturnConsumedCapacity"])) if "ReturnConsumedCapacity" in input.keys() else Option_None(),
        ProjectionExpression=Option_Some(Seq(input["ProjectionExpression"])) if "ProjectionExpression" in input.keys() else Option_None(),
        FilterExpression=Option_Some(Seq(input["FilterExpression"])) if "FilterExpression" in input.keys() else Option_None(),
        KeyConditionExpression=Option_Some(Seq(input["KeyConditionExpression"])) if "KeyConditionExpression" in input.keys() else Option_None(),
        ExpressionAttributeNames=
        Option_Some(Map({Seq(key): Seq(value) for (key, value) in input["ExpressionAttributeNames"].items() })) if "ExpressionAttributeNames" in input.keys() else Option_None(),
        ExpressionAttributeValues=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["ExpressionAttributeValues"].items() })) if "ExpressionAttributeValues" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_Condition(input):
    return DafnyCondition(
        AttributeValueList=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(list_element) for list_element in input["AttributeValueList"]])) if "AttributeValueList" in input.keys() else Option_None(),
        ComparisonOperator=Seq(input["ComparisonOperator"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_QueryOutput(input):
    return DafnyQueryOutput(
        Items=

        Option_Some(Seq([Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in list_element.items() }) for list_element in input["Items"]])) if "Items" in input.keys() else Option_None(),
        Count=Option_Some(input["Count"]) if "Count" in input.keys() else Option_None(),
        ScannedCount=Option_Some(input["ScannedCount"]) if "ScannedCount" in input.keys() else Option_None(),
        LastEvaluatedKey=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["LastEvaluatedKey"].items() })) if "LastEvaluatedKey" in input.keys() else Option_None(),
        ConsumedCapacity=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ConsumedCapacity(input["ConsumedCapacity"])) if "ConsumedCapacity" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_RestoreTableFromBackupInput(input):
    return DafnyRestoreTableFromBackupInput(
        TargetTableName=Seq(input["TargetTableName"]),
        BackupArn=Seq(input["BackupArn"]),
        BillingModeOverride=Option_Some(Seq(input["BillingModeOverride"])) if "BillingModeOverride" in input.keys() else Option_None(),
        GlobalSecondaryIndexOverride=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndex(list_element) for list_element in input["GlobalSecondaryIndexOverride"]])) if "GlobalSecondaryIndexOverride" in input.keys() else Option_None(),
        LocalSecondaryIndexOverride=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_LocalSecondaryIndex(list_element) for list_element in input["LocalSecondaryIndexOverride"]])) if "LocalSecondaryIndexOverride" in input.keys() else Option_None(),
        ProvisionedThroughputOverride=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughput(input["ProvisionedThroughputOverride"])) if "ProvisionedThroughputOverride" in input.keys() else Option_None(),
        SSESpecificationOverride=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_SSESpecification(input["SSESpecificationOverride"])) if "SSESpecificationOverride" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_RestoreTableFromBackupOutput(input):
    return DafnyRestoreTableFromBackupOutput(
        TableDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_TableDescription(input["TableDescription"])) if "TableDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_RestoreTableToPointInTimeInput(input):
    return DafnyRestoreTableToPointInTimeInput(
        SourceTableArn=Option_Some(Seq(input["SourceTableArn"])) if "SourceTableArn" in input.keys() else Option_None(),
        SourceTableName=Option_Some(Seq(input["SourceTableName"])) if "SourceTableName" in input.keys() else Option_None(),
        TargetTableName=Seq(input["TargetTableName"]),
        UseLatestRestorableTime=Option_Some(input["UseLatestRestorableTime"]) if "UseLatestRestorableTime" in input.keys() else Option_None(),
        RestoreDateTime=Option_Some(TypeError("TimestampShape not supported")) if "RestoreDateTime" in input.keys() else Option_None(),
        BillingModeOverride=Option_Some(Seq(input["BillingModeOverride"])) if "BillingModeOverride" in input.keys() else Option_None(),
        GlobalSecondaryIndexOverride=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndex(list_element) for list_element in input["GlobalSecondaryIndexOverride"]])) if "GlobalSecondaryIndexOverride" in input.keys() else Option_None(),
        LocalSecondaryIndexOverride=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_LocalSecondaryIndex(list_element) for list_element in input["LocalSecondaryIndexOverride"]])) if "LocalSecondaryIndexOverride" in input.keys() else Option_None(),
        ProvisionedThroughputOverride=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughput(input["ProvisionedThroughputOverride"])) if "ProvisionedThroughputOverride" in input.keys() else Option_None(),
        SSESpecificationOverride=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_SSESpecification(input["SSESpecificationOverride"])) if "SSESpecificationOverride" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_RestoreTableToPointInTimeOutput(input):
    return DafnyRestoreTableToPointInTimeOutput(
        TableDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_TableDescription(input["TableDescription"])) if "TableDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ScanInput(input):
    return DafnyScanInput(
        TableName=Seq(input["TableName"]),
        IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
        AttributesToGet=
        Option_Some(Seq([Seq(list_element) for list_element in input["AttributesToGet"]])) if "AttributesToGet" in input.keys() else Option_None(),
        Limit=Option_Some(input["Limit"]) if "Limit" in input.keys() else Option_None(),
        Select=Option_Some(Seq(input["Select"])) if "Select" in input.keys() else Option_None(),
        ScanFilter=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_Condition(value) for (key, value) in input["ScanFilter"].items() })) if "ScanFilter" in input.keys() else Option_None(),
        ConditionalOperator=Option_Some(Seq(input["ConditionalOperator"])) if "ConditionalOperator" in input.keys() else Option_None(),
        ExclusiveStartKey=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["ExclusiveStartKey"].items() })) if "ExclusiveStartKey" in input.keys() else Option_None(),
        ReturnConsumedCapacity=Option_Some(Seq(input["ReturnConsumedCapacity"])) if "ReturnConsumedCapacity" in input.keys() else Option_None(),
        TotalSegments=Option_Some(input["TotalSegments"]) if "TotalSegments" in input.keys() else Option_None(),
        Segment=Option_Some(input["Segment"]) if "Segment" in input.keys() else Option_None(),
        ProjectionExpression=Option_Some(Seq(input["ProjectionExpression"])) if "ProjectionExpression" in input.keys() else Option_None(),
        FilterExpression=Option_Some(Seq(input["FilterExpression"])) if "FilterExpression" in input.keys() else Option_None(),
        ExpressionAttributeNames=
        Option_Some(Map({Seq(key): Seq(value) for (key, value) in input["ExpressionAttributeNames"].items() })) if "ExpressionAttributeNames" in input.keys() else Option_None(),
        ExpressionAttributeValues=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["ExpressionAttributeValues"].items() })) if "ExpressionAttributeValues" in input.keys() else Option_None(),
        ConsistentRead=Option_Some(input["ConsistentRead"]) if "ConsistentRead" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ScanOutput(input):
    return DafnyScanOutput(
        Items=

        Option_Some(Seq([Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in list_element.items() }) for list_element in input["Items"]])) if "Items" in input.keys() else Option_None(),
        Count=Option_Some(input["Count"]) if "Count" in input.keys() else Option_None(),
        ScannedCount=Option_Some(input["ScannedCount"]) if "ScannedCount" in input.keys() else Option_None(),
        LastEvaluatedKey=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["LastEvaluatedKey"].items() })) if "LastEvaluatedKey" in input.keys() else Option_None(),
        ConsumedCapacity=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ConsumedCapacity(input["ConsumedCapacity"])) if "ConsumedCapacity" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_TagResourceInput(input):
    return DafnyTagResourceInput(
        ResourceArn=Seq(input["ResourceArn"]),
        Tags=
        Seq([AwsSdkToDafny_com_amazonaws_dynamodb_Tag(list_element) for list_element in input["Tags"]]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_TransactGetItemsInput(input):
    return DafnyTransactGetItemsInput(
        TransactItems=
        Seq([AwsSdkToDafny_com_amazonaws_dynamodb_TransactGetItem(list_element) for list_element in input["TransactItems"]]),
        ReturnConsumedCapacity=Option_Some(Seq(input["ReturnConsumedCapacity"])) if "ReturnConsumedCapacity" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_TransactGetItem(input):
    return DafnyTransactGetItem(
        Get=AwsSdkToDafny_com_amazonaws_dynamodb_Get(input["Get"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_Get(input):
    return DafnyGet(
        Key=
        Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Key"].items() }),
        TableName=Seq(input["TableName"]),
        ProjectionExpression=Option_Some(Seq(input["ProjectionExpression"])) if "ProjectionExpression" in input.keys() else Option_None(),
        ExpressionAttributeNames=
        Option_Some(Map({Seq(key): Seq(value) for (key, value) in input["ExpressionAttributeNames"].items() })) if "ExpressionAttributeNames" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_TransactGetItemsOutput(input):
    return DafnyTransactGetItemsOutput(
        ConsumedCapacity=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ConsumedCapacity(list_element) for list_element in input["ConsumedCapacity"]])) if "ConsumedCapacity" in input.keys() else Option_None(),
        Responses=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ItemResponse(list_element) for list_element in input["Responses"]])) if "Responses" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_TransactWriteItemsInput(input):
    return DafnyTransactWriteItemsInput(
        TransactItems=
        Seq([AwsSdkToDafny_com_amazonaws_dynamodb_TransactWriteItem(list_element) for list_element in input["TransactItems"]]),
        ReturnConsumedCapacity=Option_Some(Seq(input["ReturnConsumedCapacity"])) if "ReturnConsumedCapacity" in input.keys() else Option_None(),
        ReturnItemCollectionMetrics=Option_Some(Seq(input["ReturnItemCollectionMetrics"])) if "ReturnItemCollectionMetrics" in input.keys() else Option_None(),
        ClientRequestToken=Option_Some(Seq(input["ClientRequestToken"])) if "ClientRequestToken" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_TransactWriteItem(input):
    return DafnyTransactWriteItem(
        ConditionCheck=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ConditionCheck(input["ConditionCheck"])) if "ConditionCheck" in input.keys() else Option_None(),
        Put=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_Put(input["Put"])) if "Put" in input.keys() else Option_None(),
        Delete=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_Delete(input["Delete"])) if "Delete" in input.keys() else Option_None(),
        Update=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_Update(input["Update"])) if "Update" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ConditionCheck(input):
    return DafnyConditionCheck(
        Key=
        Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Key"].items() }),
        TableName=Seq(input["TableName"]),
        ConditionExpression=Seq(input["ConditionExpression"]),
        ExpressionAttributeNames=
        Option_Some(Map({Seq(key): Seq(value) for (key, value) in input["ExpressionAttributeNames"].items() })) if "ExpressionAttributeNames" in input.keys() else Option_None(),
        ExpressionAttributeValues=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["ExpressionAttributeValues"].items() })) if "ExpressionAttributeValues" in input.keys() else Option_None(),
        ReturnValuesOnConditionCheckFailure=Option_Some(Seq(input["ReturnValuesOnConditionCheckFailure"])) if "ReturnValuesOnConditionCheckFailure" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_Put(input):
    return DafnyPut(
        Item=
        Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Item"].items() }),
        TableName=Seq(input["TableName"]),
        ConditionExpression=Option_Some(Seq(input["ConditionExpression"])) if "ConditionExpression" in input.keys() else Option_None(),
        ExpressionAttributeNames=
        Option_Some(Map({Seq(key): Seq(value) for (key, value) in input["ExpressionAttributeNames"].items() })) if "ExpressionAttributeNames" in input.keys() else Option_None(),
        ExpressionAttributeValues=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["ExpressionAttributeValues"].items() })) if "ExpressionAttributeValues" in input.keys() else Option_None(),
        ReturnValuesOnConditionCheckFailure=Option_Some(Seq(input["ReturnValuesOnConditionCheckFailure"])) if "ReturnValuesOnConditionCheckFailure" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_Delete(input):
    return DafnyDelete(
        Key=
        Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Key"].items() }),
        TableName=Seq(input["TableName"]),
        ConditionExpression=Option_Some(Seq(input["ConditionExpression"])) if "ConditionExpression" in input.keys() else Option_None(),
        ExpressionAttributeNames=
        Option_Some(Map({Seq(key): Seq(value) for (key, value) in input["ExpressionAttributeNames"].items() })) if "ExpressionAttributeNames" in input.keys() else Option_None(),
        ExpressionAttributeValues=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["ExpressionAttributeValues"].items() })) if "ExpressionAttributeValues" in input.keys() else Option_None(),
        ReturnValuesOnConditionCheckFailure=Option_Some(Seq(input["ReturnValuesOnConditionCheckFailure"])) if "ReturnValuesOnConditionCheckFailure" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_Update(input):
    return DafnyUpdate(
        Key=
        Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Key"].items() }),
        UpdateExpression=Seq(input["UpdateExpression"]),
        TableName=Seq(input["TableName"]),
        ConditionExpression=Option_Some(Seq(input["ConditionExpression"])) if "ConditionExpression" in input.keys() else Option_None(),
        ExpressionAttributeNames=
        Option_Some(Map({Seq(key): Seq(value) for (key, value) in input["ExpressionAttributeNames"].items() })) if "ExpressionAttributeNames" in input.keys() else Option_None(),
        ExpressionAttributeValues=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["ExpressionAttributeValues"].items() })) if "ExpressionAttributeValues" in input.keys() else Option_None(),
        ReturnValuesOnConditionCheckFailure=Option_Some(Seq(input["ReturnValuesOnConditionCheckFailure"])) if "ReturnValuesOnConditionCheckFailure" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_TransactWriteItemsOutput(input):
    return DafnyTransactWriteItemsOutput(
        ConsumedCapacity=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ConsumedCapacity(list_element) for list_element in input["ConsumedCapacity"]])) if "ConsumedCapacity" in input.keys() else Option_None(),
        ItemCollectionMetrics=

        Option_Some(Map({Seq(key): Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ItemCollectionMetrics(list_element) for list_element in value]) for (key, value) in input["ItemCollectionMetrics"].items() })) if "ItemCollectionMetrics" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UntagResourceInput(input):
    return DafnyUntagResourceInput(
        ResourceArn=Seq(input["ResourceArn"]),
        TagKeys=
        Seq([Seq(list_element) for list_element in input["TagKeys"]]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateContinuousBackupsInput(input):
    return DafnyUpdateContinuousBackupsInput(
        TableName=Seq(input["TableName"]),
        PointInTimeRecoverySpecification=AwsSdkToDafny_com_amazonaws_dynamodb_PointInTimeRecoverySpecification(input["PointInTimeRecoverySpecification"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_PointInTimeRecoverySpecification(input):
    return DafnyPointInTimeRecoverySpecification(
        PointInTimeRecoveryEnabled=input["PointInTimeRecoveryEnabled"],
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateContinuousBackupsOutput(input):
    return DafnyUpdateContinuousBackupsOutput(
        ContinuousBackupsDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ContinuousBackupsDescription(input["ContinuousBackupsDescription"])) if "ContinuousBackupsDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateContributorInsightsInput(input):
    return DafnyUpdateContributorInsightsInput(
        TableName=Seq(input["TableName"]),
        IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
        ContributorInsightsAction=Seq(input["ContributorInsightsAction"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateContributorInsightsOutput(input):
    return DafnyUpdateContributorInsightsOutput(
        TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
        IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
        ContributorInsightsStatus=Option_Some(Seq(input["ContributorInsightsStatus"])) if "ContributorInsightsStatus" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateGlobalTableInput(input):
    return DafnyUpdateGlobalTableInput(
        GlobalTableName=Seq(input["GlobalTableName"]),
        ReplicaUpdates=
        Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaUpdate(list_element) for list_element in input["ReplicaUpdates"]]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaUpdate(input):
    return DafnyReplicaUpdate(
        Create=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_CreateReplicaAction(input["Create"])) if "Create" in input.keys() else Option_None(),
        Delete=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_DeleteReplicaAction(input["Delete"])) if "Delete" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_CreateReplicaAction(input):
    return DafnyCreateReplicaAction(
        RegionName=Seq(input["RegionName"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DeleteReplicaAction(input):
    return DafnyDeleteReplicaAction(
        RegionName=Seq(input["RegionName"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateGlobalTableOutput(input):
    return DafnyUpdateGlobalTableOutput(
        GlobalTableDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_GlobalTableDescription(input["GlobalTableDescription"])) if "GlobalTableDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateGlobalTableSettingsInput(input):
    return DafnyUpdateGlobalTableSettingsInput(
        GlobalTableName=Seq(input["GlobalTableName"]),
        GlobalTableBillingMode=Option_Some(Seq(input["GlobalTableBillingMode"])) if "GlobalTableBillingMode" in input.keys() else Option_None(),
        GlobalTableProvisionedWriteCapacityUnits=Option_Some(input["GlobalTableProvisionedWriteCapacityUnits"]) if "GlobalTableProvisionedWriteCapacityUnits" in input.keys() else Option_None(),
        GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsUpdate(input["GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate"])) if "GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate" in input.keys() else Option_None(),
        GlobalTableGlobalSecondaryIndexSettingsUpdate=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_GlobalTableGlobalSecondaryIndexSettingsUpdate(list_element) for list_element in input["GlobalTableGlobalSecondaryIndexSettingsUpdate"]])) if "GlobalTableGlobalSecondaryIndexSettingsUpdate" in input.keys() else Option_None(),
        ReplicaSettingsUpdate=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaSettingsUpdate(list_element) for list_element in input["ReplicaSettingsUpdate"]])) if "ReplicaSettingsUpdate" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsUpdate(input):
    return DafnyAutoScalingSettingsUpdate(
        MinimumUnits=Option_Some(input["MinimumUnits"]) if "MinimumUnits" in input.keys() else Option_None(),
        MaximumUnits=Option_Some(input["MaximumUnits"]) if "MaximumUnits" in input.keys() else Option_None(),
        AutoScalingDisabled=Option_Some(input["AutoScalingDisabled"]) if "AutoScalingDisabled" in input.keys() else Option_None(),
        AutoScalingRoleArn=Option_Some(Seq(input["AutoScalingRoleArn"])) if "AutoScalingRoleArn" in input.keys() else Option_None(),
        ScalingPolicyUpdate=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingPolicyUpdate(input["ScalingPolicyUpdate"])) if "ScalingPolicyUpdate" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingPolicyUpdate(input):
    return DafnyAutoScalingPolicyUpdate(
        PolicyName=Option_Some(Seq(input["PolicyName"])) if "PolicyName" in input.keys() else Option_None(),
        TargetTrackingScalingPolicyConfiguration=AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(input["TargetTrackingScalingPolicyConfiguration"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(input):
    return DafnyAutoScalingTargetTrackingScalingPolicyConfigurationUpdate(
        DisableScaleIn=Option_Some(input["DisableScaleIn"]) if "DisableScaleIn" in input.keys() else Option_None(),
        ScaleInCooldown=Option_Some(input["ScaleInCooldown"]) if "ScaleInCooldown" in input.keys() else Option_None(),
        ScaleOutCooldown=Option_Some(input["ScaleOutCooldown"]) if "ScaleOutCooldown" in input.keys() else Option_None(),
        TargetValue=input["TargetValue"],
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_GlobalTableGlobalSecondaryIndexSettingsUpdate(input):
    return DafnyGlobalTableGlobalSecondaryIndexSettingsUpdate(
        IndexName=Seq(input["IndexName"]),
        ProvisionedWriteCapacityUnits=Option_Some(input["ProvisionedWriteCapacityUnits"]) if "ProvisionedWriteCapacityUnits" in input.keys() else Option_None(),
        ProvisionedWriteCapacityAutoScalingSettingsUpdate=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsUpdate(input["ProvisionedWriteCapacityAutoScalingSettingsUpdate"])) if "ProvisionedWriteCapacityAutoScalingSettingsUpdate" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaSettingsUpdate(input):
    return DafnyReplicaSettingsUpdate(
        RegionName=Seq(input["RegionName"]),
        ReplicaProvisionedReadCapacityUnits=Option_Some(input["ReplicaProvisionedReadCapacityUnits"]) if "ReplicaProvisionedReadCapacityUnits" in input.keys() else Option_None(),
        ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsUpdate(input["ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate"])) if "ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate" in input.keys() else Option_None(),
        ReplicaGlobalSecondaryIndexSettingsUpdate=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndexSettingsUpdate(list_element) for list_element in input["ReplicaGlobalSecondaryIndexSettingsUpdate"]])) if "ReplicaGlobalSecondaryIndexSettingsUpdate" in input.keys() else Option_None(),
        ReplicaTableClass=Option_Some(Seq(input["ReplicaTableClass"])) if "ReplicaTableClass" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndexSettingsUpdate(input):
    return DafnyReplicaGlobalSecondaryIndexSettingsUpdate(
        IndexName=Seq(input["IndexName"]),
        ProvisionedReadCapacityUnits=Option_Some(input["ProvisionedReadCapacityUnits"]) if "ProvisionedReadCapacityUnits" in input.keys() else Option_None(),
        ProvisionedReadCapacityAutoScalingSettingsUpdate=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsUpdate(input["ProvisionedReadCapacityAutoScalingSettingsUpdate"])) if "ProvisionedReadCapacityAutoScalingSettingsUpdate" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateGlobalTableSettingsOutput(input):
    return DafnyUpdateGlobalTableSettingsOutput(
        GlobalTableName=Option_Some(Seq(input["GlobalTableName"])) if "GlobalTableName" in input.keys() else Option_None(),
        ReplicaSettings=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaSettingsDescription(list_element) for list_element in input["ReplicaSettings"]])) if "ReplicaSettings" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateItemInput(input):
    return DafnyUpdateItemInput(
        TableName=Seq(input["TableName"]),
        Key=
        Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Key"].items() }),
        AttributeUpdates=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValueUpdate(value) for (key, value) in input["AttributeUpdates"].items() })) if "AttributeUpdates" in input.keys() else Option_None(),
        Expected=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_ExpectedAttributeValue(value) for (key, value) in input["Expected"].items() })) if "Expected" in input.keys() else Option_None(),
        ConditionalOperator=Option_Some(Seq(input["ConditionalOperator"])) if "ConditionalOperator" in input.keys() else Option_None(),
        ReturnValues=Option_Some(Seq(input["ReturnValues"])) if "ReturnValues" in input.keys() else Option_None(),
        ReturnConsumedCapacity=Option_Some(Seq(input["ReturnConsumedCapacity"])) if "ReturnConsumedCapacity" in input.keys() else Option_None(),
        ReturnItemCollectionMetrics=Option_Some(Seq(input["ReturnItemCollectionMetrics"])) if "ReturnItemCollectionMetrics" in input.keys() else Option_None(),
        UpdateExpression=Option_Some(Seq(input["UpdateExpression"])) if "UpdateExpression" in input.keys() else Option_None(),
        ConditionExpression=Option_Some(Seq(input["ConditionExpression"])) if "ConditionExpression" in input.keys() else Option_None(),
        ExpressionAttributeNames=
        Option_Some(Map({Seq(key): Seq(value) for (key, value) in input["ExpressionAttributeNames"].items() })) if "ExpressionAttributeNames" in input.keys() else Option_None(),
        ExpressionAttributeValues=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["ExpressionAttributeValues"].items() })) if "ExpressionAttributeValues" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValueUpdate(input):
    return DafnyAttributeValueUpdate(
        Value=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(input["Value"])) if "Value" in input.keys() else Option_None(),
        Action=Option_Some(Seq(input["Action"])) if "Action" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateItemOutput(input):
    return DafnyUpdateItemOutput(
        Attributes=
        Option_Some(Map({Seq(key): AwsSdkToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Attributes"].items() })) if "Attributes" in input.keys() else Option_None(),
        ConsumedCapacity=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ConsumedCapacity(input["ConsumedCapacity"])) if "ConsumedCapacity" in input.keys() else Option_None(),
        ItemCollectionMetrics=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ItemCollectionMetrics(input["ItemCollectionMetrics"])) if "ItemCollectionMetrics" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateTableInput(input):
    return DafnyUpdateTableInput(
        AttributeDefinitions=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_AttributeDefinition(list_element) for list_element in input["AttributeDefinitions"]])) if "AttributeDefinitions" in input.keys() else Option_None(),
        TableName=Seq(input["TableName"]),
        BillingMode=Option_Some(Seq(input["BillingMode"])) if "BillingMode" in input.keys() else Option_None(),
        ProvisionedThroughput=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughput(input["ProvisionedThroughput"])) if "ProvisionedThroughput" in input.keys() else Option_None(),
        GlobalSecondaryIndexUpdates=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndexUpdate(list_element) for list_element in input["GlobalSecondaryIndexUpdates"]])) if "GlobalSecondaryIndexUpdates" in input.keys() else Option_None(),
        StreamSpecification=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_StreamSpecification(input["StreamSpecification"])) if "StreamSpecification" in input.keys() else Option_None(),
        SSESpecification=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_SSESpecification(input["SSESpecification"])) if "SSESpecification" in input.keys() else Option_None(),
        ReplicaUpdates=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ReplicationGroupUpdate(list_element) for list_element in input["ReplicaUpdates"]])) if "ReplicaUpdates" in input.keys() else Option_None(),
        TableClass=Option_Some(Seq(input["TableClass"])) if "TableClass" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndexUpdate(input):
    return DafnyGlobalSecondaryIndexUpdate(
        Update=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_UpdateGlobalSecondaryIndexAction(input["Update"])) if "Update" in input.keys() else Option_None(),
        Create=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_CreateGlobalSecondaryIndexAction(input["Create"])) if "Create" in input.keys() else Option_None(),
        Delete=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_DeleteGlobalSecondaryIndexAction(input["Delete"])) if "Delete" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateGlobalSecondaryIndexAction(input):
    return DafnyUpdateGlobalSecondaryIndexAction(
        IndexName=Seq(input["IndexName"]),
        ProvisionedThroughput=AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughput(input["ProvisionedThroughput"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_CreateGlobalSecondaryIndexAction(input):
    return DafnyCreateGlobalSecondaryIndexAction(
        IndexName=Seq(input["IndexName"]),
        KeySchema=
        Seq([AwsSdkToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]]),
        Projection=AwsSdkToDafny_com_amazonaws_dynamodb_Projection(input["Projection"]),
        ProvisionedThroughput=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughput(input["ProvisionedThroughput"])) if "ProvisionedThroughput" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DeleteGlobalSecondaryIndexAction(input):
    return DafnyDeleteGlobalSecondaryIndexAction(
        IndexName=Seq(input["IndexName"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ReplicationGroupUpdate(input):
    return DafnyReplicationGroupUpdate(
        Create=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_CreateReplicationGroupMemberAction(input["Create"])) if "Create" in input.keys() else Option_None(),
        Update=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_UpdateReplicationGroupMemberAction(input["Update"])) if "Update" in input.keys() else Option_None(),
        Delete=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_DeleteReplicationGroupMemberAction(input["Delete"])) if "Delete" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_CreateReplicationGroupMemberAction(input):
    return DafnyCreateReplicationGroupMemberAction(
        RegionName=Seq(input["RegionName"]),
        KMSMasterKeyId=Option_Some(Seq(input["KMSMasterKeyId"])) if "KMSMasterKeyId" in input.keys() else Option_None(),
        ProvisionedThroughputOverride=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughputOverride(input["ProvisionedThroughputOverride"])) if "ProvisionedThroughputOverride" in input.keys() else Option_None(),
        GlobalSecondaryIndexes=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndex(list_element) for list_element in input["GlobalSecondaryIndexes"]])) if "GlobalSecondaryIndexes" in input.keys() else Option_None(),
        TableClassOverride=Option_Some(Seq(input["TableClassOverride"])) if "TableClassOverride" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateReplicationGroupMemberAction(input):
    return DafnyUpdateReplicationGroupMemberAction(
        RegionName=Seq(input["RegionName"]),
        KMSMasterKeyId=Option_Some(Seq(input["KMSMasterKeyId"])) if "KMSMasterKeyId" in input.keys() else Option_None(),
        ProvisionedThroughputOverride=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughputOverride(input["ProvisionedThroughputOverride"])) if "ProvisionedThroughputOverride" in input.keys() else Option_None(),
        GlobalSecondaryIndexes=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndex(list_element) for list_element in input["GlobalSecondaryIndexes"]])) if "GlobalSecondaryIndexes" in input.keys() else Option_None(),
        TableClassOverride=Option_Some(Seq(input["TableClassOverride"])) if "TableClassOverride" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_DeleteReplicationGroupMemberAction(input):
    return DafnyDeleteReplicationGroupMemberAction(
        RegionName=Seq(input["RegionName"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndex(input):
    return DafnyReplicaGlobalSecondaryIndex(
        IndexName=Seq(input["IndexName"]),
        ProvisionedThroughputOverride=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_ProvisionedThroughputOverride(input["ProvisionedThroughputOverride"])) if "ProvisionedThroughputOverride" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateTableOutput(input):
    return DafnyUpdateTableOutput(
        TableDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_TableDescription(input["TableDescription"])) if "TableDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateTableReplicaAutoScalingInput(input):
    return DafnyUpdateTableReplicaAutoScalingInput(
        GlobalSecondaryIndexUpdates=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndexAutoScalingUpdate(list_element) for list_element in input["GlobalSecondaryIndexUpdates"]])) if "GlobalSecondaryIndexUpdates" in input.keys() else Option_None(),
        TableName=Seq(input["TableName"]),
        ProvisionedWriteCapacityAutoScalingUpdate=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsUpdate(input["ProvisionedWriteCapacityAutoScalingUpdate"])) if "ProvisionedWriteCapacityAutoScalingUpdate" in input.keys() else Option_None(),
        ReplicaUpdates=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaAutoScalingUpdate(list_element) for list_element in input["ReplicaUpdates"]])) if "ReplicaUpdates" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndexAutoScalingUpdate(input):
    return DafnyGlobalSecondaryIndexAutoScalingUpdate(
        IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
        ProvisionedWriteCapacityAutoScalingUpdate=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsUpdate(input["ProvisionedWriteCapacityAutoScalingUpdate"])) if "ProvisionedWriteCapacityAutoScalingUpdate" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaAutoScalingUpdate(input):
    return DafnyReplicaAutoScalingUpdate(
        RegionName=Seq(input["RegionName"]),
        ReplicaGlobalSecondaryIndexUpdates=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndexAutoScalingUpdate(list_element) for list_element in input["ReplicaGlobalSecondaryIndexUpdates"]])) if "ReplicaGlobalSecondaryIndexUpdates" in input.keys() else Option_None(),
        ReplicaProvisionedReadCapacityAutoScalingUpdate=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsUpdate(input["ReplicaProvisionedReadCapacityAutoScalingUpdate"])) if "ReplicaProvisionedReadCapacityAutoScalingUpdate" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndexAutoScalingUpdate(input):
    return DafnyReplicaGlobalSecondaryIndexAutoScalingUpdate(
        IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
        ProvisionedReadCapacityAutoScalingUpdate=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_AutoScalingSettingsUpdate(input["ProvisionedReadCapacityAutoScalingUpdate"])) if "ProvisionedReadCapacityAutoScalingUpdate" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateTableReplicaAutoScalingOutput(input):
    return DafnyUpdateTableReplicaAutoScalingOutput(
        TableAutoScalingDescription=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_TableAutoScalingDescription(input["TableAutoScalingDescription"])) if "TableAutoScalingDescription" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateTimeToLiveInput(input):
    return DafnyUpdateTimeToLiveInput(
        TableName=Seq(input["TableName"]),
        TimeToLiveSpecification=AwsSdkToDafny_com_amazonaws_dynamodb_TimeToLiveSpecification(input["TimeToLiveSpecification"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_TimeToLiveSpecification(input):
    return DafnyTimeToLiveSpecification(
        Enabled=input["Enabled"],
        AttributeName=Seq(input["AttributeName"]),
    )

def AwsSdkToDafny_com_amazonaws_dynamodb_UpdateTimeToLiveOutput(input):
    return DafnyUpdateTimeToLiveOutput(
        TimeToLiveSpecification=Option_Some(AwsSdkToDafny_com_amazonaws_dynamodb_TimeToLiveSpecification(input["TimeToLiveSpecification"])) if "TimeToLiveSpecification" in input.keys() else Option_None(),
    )
