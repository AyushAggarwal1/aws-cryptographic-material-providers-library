# Code generated by smithy-python-codegen DO NOT EDIT.

from Wrappers import Option_None, Option_Some
from _dafny import Map, Seq
import module_
from software_amazon_cryptography_services_dynamodb_internaldafny_types import (
    ArchivalSummary_ArchivalSummary as DafnyArchivalSummary,
    AttributeDefinition_AttributeDefinition as DafnyAttributeDefinition,
    AttributeValue_B,
    AttributeValue_BOOL,
    AttributeValue_BS,
    AttributeValue_L,
    AttributeValue_M,
    AttributeValue_N,
    AttributeValue_NS,
    AttributeValue_NULL,
    AttributeValue_S,
    AttributeValue_SS,
    AutoScalingPolicyDescription_AutoScalingPolicyDescription as DafnyAutoScalingPolicyDescription,
    AutoScalingSettingsDescription_AutoScalingSettingsDescription as DafnyAutoScalingSettingsDescription,
    AutoScalingTargetTrackingScalingPolicyConfigurationDescription_AutoScalingTargetTrackingScalingPolicyConfigurationDescription as DafnyAutoScalingTargetTrackingScalingPolicyConfigurationDescription,
    BackupDescription_BackupDescription as DafnyBackupDescription,
    BackupDetails_BackupDetails as DafnyBackupDetails,
    BackupSummary_BackupSummary as DafnyBackupSummary,
    BatchExecuteStatementOutput_BatchExecuteStatementOutput as DafnyBatchExecuteStatementOutput,
    BatchGetItemOutput_BatchGetItemOutput as DafnyBatchGetItemOutput,
    BatchStatementError_BatchStatementError as DafnyBatchStatementError,
    BatchStatementResponse_BatchStatementResponse as DafnyBatchStatementResponse,
    BatchWriteItemOutput_BatchWriteItemOutput as DafnyBatchWriteItemOutput,
    BillingModeSummary_BillingModeSummary as DafnyBillingModeSummary,
    Capacity_Capacity as DafnyCapacity,
    ConsumedCapacity_ConsumedCapacity as DafnyConsumedCapacity,
    ContinuousBackupsDescription_ContinuousBackupsDescription as DafnyContinuousBackupsDescription,
    ContributorInsightsSummary_ContributorInsightsSummary as DafnyContributorInsightsSummary,
    CreateBackupOutput_CreateBackupOutput as DafnyCreateBackupOutput,
    CreateGlobalTableOutput_CreateGlobalTableOutput as DafnyCreateGlobalTableOutput,
    CreateTableOutput_CreateTableOutput as DafnyCreateTableOutput,
    CsvOptions_CsvOptions as DafnyCsvOptions,
    DeleteBackupOutput_DeleteBackupOutput as DafnyDeleteBackupOutput,
    DeleteItemOutput_DeleteItemOutput as DafnyDeleteItemOutput,
    DeleteRequest_DeleteRequest as DafnyDeleteRequest,
    DeleteTableOutput_DeleteTableOutput as DafnyDeleteTableOutput,
    DescribeBackupOutput_DescribeBackupOutput as DafnyDescribeBackupOutput,
    DescribeContinuousBackupsOutput_DescribeContinuousBackupsOutput as DafnyDescribeContinuousBackupsOutput,
    DescribeContributorInsightsOutput_DescribeContributorInsightsOutput as DafnyDescribeContributorInsightsOutput,
    DescribeEndpointsResponse_DescribeEndpointsResponse as DafnyDescribeEndpointsResponse,
    DescribeExportOutput_DescribeExportOutput as DafnyDescribeExportOutput,
    DescribeGlobalTableOutput_DescribeGlobalTableOutput as DafnyDescribeGlobalTableOutput,
    DescribeGlobalTableSettingsOutput_DescribeGlobalTableSettingsOutput as DafnyDescribeGlobalTableSettingsOutput,
    DescribeImportOutput_DescribeImportOutput as DafnyDescribeImportOutput,
    DescribeKinesisStreamingDestinationOutput_DescribeKinesisStreamingDestinationOutput as DafnyDescribeKinesisStreamingDestinationOutput,
    DescribeLimitsOutput_DescribeLimitsOutput as DafnyDescribeLimitsOutput,
    DescribeTableOutput_DescribeTableOutput as DafnyDescribeTableOutput,
    DescribeTableReplicaAutoScalingOutput_DescribeTableReplicaAutoScalingOutput as DafnyDescribeTableReplicaAutoScalingOutput,
    DescribeTimeToLiveOutput_DescribeTimeToLiveOutput as DafnyDescribeTimeToLiveOutput,
    DisableKinesisStreamingDestinationOutput_DisableKinesisStreamingDestinationOutput as DafnyDisableKinesisStreamingDestinationOutput,
    EnableKinesisStreamingDestinationOutput_EnableKinesisStreamingDestinationOutput as DafnyEnableKinesisStreamingDestinationOutput,
    Endpoint_Endpoint as DafnyEndpoint,
    ExecuteStatementOutput_ExecuteStatementOutput as DafnyExecuteStatementOutput,
    ExecuteTransactionOutput_ExecuteTransactionOutput as DafnyExecuteTransactionOutput,
    ExportDescription_ExportDescription as DafnyExportDescription,
    ExportSummary_ExportSummary as DafnyExportSummary,
    ExportTableToPointInTimeOutput_ExportTableToPointInTimeOutput as DafnyExportTableToPointInTimeOutput,
    FailureException_FailureException as DafnyFailureException,
    GetItemOutput_GetItemOutput as DafnyGetItemOutput,
    GlobalSecondaryIndexDescription_GlobalSecondaryIndexDescription as DafnyGlobalSecondaryIndexDescription,
    GlobalSecondaryIndexInfo_GlobalSecondaryIndexInfo as DafnyGlobalSecondaryIndexInfo,
    GlobalSecondaryIndex_GlobalSecondaryIndex as DafnyGlobalSecondaryIndex,
    GlobalTableDescription_GlobalTableDescription as DafnyGlobalTableDescription,
    GlobalTable_GlobalTable as DafnyGlobalTable,
    ImportSummary_ImportSummary as DafnyImportSummary,
    ImportTableDescription_ImportTableDescription as DafnyImportTableDescription,
    ImportTableOutput_ImportTableOutput as DafnyImportTableOutput,
    InputFormatOptions_InputFormatOptions as DafnyInputFormatOptions,
    ItemCollectionMetrics_ItemCollectionMetrics as DafnyItemCollectionMetrics,
    ItemResponse_ItemResponse as DafnyItemResponse,
    KeySchemaElement_KeySchemaElement as DafnyKeySchemaElement,
    KeysAndAttributes_KeysAndAttributes as DafnyKeysAndAttributes,
    KinesisDataStreamDestination_KinesisDataStreamDestination as DafnyKinesisDataStreamDestination,
    ListBackupsOutput_ListBackupsOutput as DafnyListBackupsOutput,
    ListContributorInsightsOutput_ListContributorInsightsOutput as DafnyListContributorInsightsOutput,
    ListExportsOutput_ListExportsOutput as DafnyListExportsOutput,
    ListGlobalTablesOutput_ListGlobalTablesOutput as DafnyListGlobalTablesOutput,
    ListImportsOutput_ListImportsOutput as DafnyListImportsOutput,
    ListTablesOutput_ListTablesOutput as DafnyListTablesOutput,
    ListTagsOfResourceOutput_ListTagsOfResourceOutput as DafnyListTagsOfResourceOutput,
    LocalSecondaryIndexDescription_LocalSecondaryIndexDescription as DafnyLocalSecondaryIndexDescription,
    LocalSecondaryIndexInfo_LocalSecondaryIndexInfo as DafnyLocalSecondaryIndexInfo,
    PointInTimeRecoveryDescription_PointInTimeRecoveryDescription as DafnyPointInTimeRecoveryDescription,
    Projection_Projection as DafnyProjection,
    ProvisionedThroughputDescription_ProvisionedThroughputDescription as DafnyProvisionedThroughputDescription,
    ProvisionedThroughputOverride_ProvisionedThroughputOverride as DafnyProvisionedThroughputOverride,
    ProvisionedThroughput_ProvisionedThroughput as DafnyProvisionedThroughput,
    PutItemOutput_PutItemOutput as DafnyPutItemOutput,
    PutRequest_PutRequest as DafnyPutRequest,
    QueryOutput_QueryOutput as DafnyQueryOutput,
    ReplicaAutoScalingDescription_ReplicaAutoScalingDescription as DafnyReplicaAutoScalingDescription,
    ReplicaDescription_ReplicaDescription as DafnyReplicaDescription,
    ReplicaGlobalSecondaryIndexAutoScalingDescription_ReplicaGlobalSecondaryIndexAutoScalingDescription as DafnyReplicaGlobalSecondaryIndexAutoScalingDescription,
    ReplicaGlobalSecondaryIndexDescription_ReplicaGlobalSecondaryIndexDescription as DafnyReplicaGlobalSecondaryIndexDescription,
    ReplicaGlobalSecondaryIndexSettingsDescription_ReplicaGlobalSecondaryIndexSettingsDescription as DafnyReplicaGlobalSecondaryIndexSettingsDescription,
    ReplicaSettingsDescription_ReplicaSettingsDescription as DafnyReplicaSettingsDescription,
    Replica_Replica as DafnyReplica,
    RestoreSummary_RestoreSummary as DafnyRestoreSummary,
    RestoreTableFromBackupOutput_RestoreTableFromBackupOutput as DafnyRestoreTableFromBackupOutput,
    RestoreTableToPointInTimeOutput_RestoreTableToPointInTimeOutput as DafnyRestoreTableToPointInTimeOutput,
    S3BucketSource_S3BucketSource as DafnyS3BucketSource,
    SSEDescription_SSEDescription as DafnySSEDescription,
    SSESpecification_SSESpecification as DafnySSESpecification,
    ScanOutput_ScanOutput as DafnyScanOutput,
    SourceTableDetails_SourceTableDetails as DafnySourceTableDetails,
    SourceTableFeatureDetails_SourceTableFeatureDetails as DafnySourceTableFeatureDetails,
    StreamSpecification_StreamSpecification as DafnyStreamSpecification,
    TableAutoScalingDescription_TableAutoScalingDescription as DafnyTableAutoScalingDescription,
    TableClassSummary_TableClassSummary as DafnyTableClassSummary,
    TableCreationParameters_TableCreationParameters as DafnyTableCreationParameters,
    TableDescription_TableDescription as DafnyTableDescription,
    Tag_Tag as DafnyTag,
    TimeToLiveDescription_TimeToLiveDescription as DafnyTimeToLiveDescription,
    TimeToLiveSpecification_TimeToLiveSpecification as DafnyTimeToLiveSpecification,
    TransactGetItemsOutput_TransactGetItemsOutput as DafnyTransactGetItemsOutput,
    TransactWriteItemsOutput_TransactWriteItemsOutput as DafnyTransactWriteItemsOutput,
    UpdateContinuousBackupsOutput_UpdateContinuousBackupsOutput as DafnyUpdateContinuousBackupsOutput,
    UpdateContributorInsightsOutput_UpdateContributorInsightsOutput as DafnyUpdateContributorInsightsOutput,
    UpdateGlobalTableOutput_UpdateGlobalTableOutput as DafnyUpdateGlobalTableOutput,
    UpdateGlobalTableSettingsOutput_UpdateGlobalTableSettingsOutput as DafnyUpdateGlobalTableSettingsOutput,
    UpdateItemOutput_UpdateItemOutput as DafnyUpdateItemOutput,
    UpdateTableOutput_UpdateTableOutput as DafnyUpdateTableOutput,
    UpdateTableReplicaAutoScalingOutput_UpdateTableReplicaAutoScalingOutput as DafnyUpdateTableReplicaAutoScalingOutput,
    UpdateTimeToLiveOutput_UpdateTimeToLiveOutput as DafnyUpdateTimeToLiveOutput,
    WriteRequest_WriteRequest as DafnyWriteRequest,
)



def SmithyToDafny_com_amazonaws_dynamodb_BatchExecuteStatementOutput(input):
  return DafnyBatchExecuteStatementOutput(Responses=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_BatchStatementResponse(list_element) for list_element in input["Responses"]])) if "Responses" in input.keys() else Option_None(),
ConsumedCapacity=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ConsumedCapacity(list_element) for list_element in input["ConsumedCapacity"]])) if "ConsumedCapacity" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_BatchStatementResponse(input):
  return DafnyBatchStatementResponse(Error=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_BatchStatementError(input["Error"])) if "Error" in input.keys() else Option_None(),
TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
Item=Option_Some(Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Item"].items() })) if "Item" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ConsumedCapacity(input):
  return DafnyConsumedCapacity(TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
CapacityUnits=Option_Some(input["CapacityUnits"]) if "CapacityUnits" in input.keys() else Option_None(),
ReadCapacityUnits=Option_Some(input["ReadCapacityUnits"]) if "ReadCapacityUnits" in input.keys() else Option_None(),
WriteCapacityUnits=Option_Some(input["WriteCapacityUnits"]) if "WriteCapacityUnits" in input.keys() else Option_None(),
Table=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_Capacity(input["Table"])) if "Table" in input.keys() else Option_None(),
LocalSecondaryIndexes=Option_Some(Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_Capacity(value) for (key, value) in input["LocalSecondaryIndexes"].items() })) if "LocalSecondaryIndexes" in input.keys() else Option_None(),
GlobalSecondaryIndexes=Option_Some(Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_Capacity(value) for (key, value) in input["GlobalSecondaryIndexes"].items() })) if "GlobalSecondaryIndexes" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_BatchStatementError(input):
  return DafnyBatchStatementError(Code=Option_Some(Seq(input["Code"])) if "Code" in input.keys() else Option_None(),
Message=Option_Some(Seq(input["Message"])) if "Message" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(input):
    if "S" in input.keys():
        AttributeValue_union_value = AttributeValue_S(Seq(input["S"]))
    elif "N" in input.keys():
        AttributeValue_union_value = AttributeValue_N(Seq(input["N"]))
    elif "B" in input.keys():
        AttributeValue_union_value = AttributeValue_B(Seq(input["B"]))

    elif "SS" in input.keys():
        AttributeValue_union_value = AttributeValue_SS(Seq([Seq(list_element) for list_element in input["SS"]]))

    elif "NS" in input.keys():
        AttributeValue_union_value = AttributeValue_NS(Seq([Seq(list_element) for list_element in input["NS"]]))

    elif "BS" in input.keys():
        AttributeValue_union_value = AttributeValue_BS(Seq([Seq(list_element) for list_element in input["BS"]]))

    elif "M" in input.keys():
        AttributeValue_union_value = AttributeValue_M(Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["M"].items() }))

    elif "L" in input.keys():
        AttributeValue_union_value = AttributeValue_L(Seq([SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(list_element) for list_element in input["L"]]))
    elif "NULL" in input.keys():
        AttributeValue_union_value = AttributeValue_NULL(input["NULL"])
    elif "BOOL" in input.keys():
        AttributeValue_union_value = AttributeValue_BOOL(input["BOOL"])
    else:
        raise ValueError("No recognized union value in union type: " + input)

    return AttributeValue_union_value

def SmithyToDafny_com_amazonaws_dynamodb_Capacity(input):
  return DafnyCapacity(ReadCapacityUnits=Option_Some(input["ReadCapacityUnits"]) if "ReadCapacityUnits" in input.keys() else Option_None(),
WriteCapacityUnits=Option_Some(input["WriteCapacityUnits"]) if "WriteCapacityUnits" in input.keys() else Option_None(),
CapacityUnits=Option_Some(input["CapacityUnits"]) if "CapacityUnits" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_BatchGetItemOutput(input):
  return DafnyBatchGetItemOutput(Responses=Option_Some(Map({Seq(key): Seq([Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in list_element.items() }) for list_element in value]) for (key, value) in input["Responses"].items() })) if "Responses" in input.keys() else Option_None(),
UnprocessedKeys=Option_Some(Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_KeysAndAttributes(value) for (key, value) in input["UnprocessedKeys"].items() })) if "UnprocessedKeys" in input.keys() else Option_None(),
ConsumedCapacity=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ConsumedCapacity(list_element) for list_element in input["ConsumedCapacity"]])) if "ConsumedCapacity" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_KeysAndAttributes(input):
  return DafnyKeysAndAttributes(Keys=Seq([Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in list_element.items() }) for list_element in input["Keys"]]),
AttributesToGet=Option_Some(Seq([Seq(list_element) for list_element in input["AttributesToGet"]])) if "AttributesToGet" in input.keys() else Option_None(),
ConsistentRead=Option_Some(input["ConsistentRead"]) if "ConsistentRead" in input.keys() else Option_None(),
ProjectionExpression=Option_Some(Seq(input["ProjectionExpression"])) if "ProjectionExpression" in input.keys() else Option_None(),
ExpressionAttributeNames=Option_Some(Map({Seq(key): Seq(value) for (key, value) in input["ExpressionAttributeNames"].items() })) if "ExpressionAttributeNames" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_BatchWriteItemOutput(input):
  return DafnyBatchWriteItemOutput(UnprocessedItems=Option_Some(Map({Seq(key): Seq([SmithyToDafny_com_amazonaws_dynamodb_WriteRequest(list_element) for list_element in value]) for (key, value) in input["UnprocessedItems"].items() })) if "UnprocessedItems" in input.keys() else Option_None(),
ItemCollectionMetrics=Option_Some(Map({Seq(key): Seq([SmithyToDafny_com_amazonaws_dynamodb_ItemCollectionMetrics(list_element) for list_element in value]) for (key, value) in input["ItemCollectionMetrics"].items() })) if "ItemCollectionMetrics" in input.keys() else Option_None(),
ConsumedCapacity=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ConsumedCapacity(list_element) for list_element in input["ConsumedCapacity"]])) if "ConsumedCapacity" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_WriteRequest(input):
  return DafnyWriteRequest(PutRequest=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_PutRequest(input["PutRequest"])) if "PutRequest" in input.keys() else Option_None(),
DeleteRequest=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_DeleteRequest(input["DeleteRequest"])) if "DeleteRequest" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ItemCollectionMetrics(input):
  return DafnyItemCollectionMetrics(ItemCollectionKey=Option_Some(Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["ItemCollectionKey"].items() })) if "ItemCollectionKey" in input.keys() else Option_None(),
SizeEstimateRangeGB=Option_Some(Seq([list_element for list_element in input["SizeEstimateRangeGB"]])) if "SizeEstimateRangeGB" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_PutRequest(input):
  return DafnyPutRequest(Item=Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Item"].items() }),
)

def SmithyToDafny_com_amazonaws_dynamodb_DeleteRequest(input):
  return DafnyDeleteRequest(Key=Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Key"].items() }),
)

def SmithyToDafny_com_amazonaws_dynamodb_CreateBackupOutput(input):
  return DafnyCreateBackupOutput(BackupDetails=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_BackupDetails(input["BackupDetails"])) if "BackupDetails" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_BackupDetails(input):
  return DafnyBackupDetails(BackupArn=Seq(input["BackupArn"]),
BackupName=Seq(input["BackupName"]),
BackupSizeBytes=Option_Some(input["BackupSizeBytes"]) if "BackupSizeBytes" in input.keys() else Option_None(),
BackupStatus=Seq(input["BackupStatus"]),
BackupType=Seq(input["BackupType"]),
BackupCreationDateTime=input["BackupCreationDateTime"],
BackupExpiryDateTime=Option_Some(input["BackupExpiryDateTime"]) if "BackupExpiryDateTime" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_CreateGlobalTableOutput(input):
  return DafnyCreateGlobalTableOutput(GlobalTableDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_GlobalTableDescription(input["GlobalTableDescription"])) if "GlobalTableDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_GlobalTableDescription(input):
  return DafnyGlobalTableDescription(ReplicationGroup=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ReplicaDescription(list_element) for list_element in input["ReplicationGroup"]])) if "ReplicationGroup" in input.keys() else Option_None(),
GlobalTableArn=Option_Some(Seq(input["GlobalTableArn"])) if "GlobalTableArn" in input.keys() else Option_None(),
CreationDateTime=Option_Some(input["CreationDateTime"]) if "CreationDateTime" in input.keys() else Option_None(),
GlobalTableStatus=Option_Some(Seq(input["GlobalTableStatus"])) if "GlobalTableStatus" in input.keys() else Option_None(),
GlobalTableName=Option_Some(Seq(input["GlobalTableName"])) if "GlobalTableName" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ReplicaDescription(input):
  return DafnyReplicaDescription(RegionName=Option_Some(Seq(input["RegionName"])) if "RegionName" in input.keys() else Option_None(),
ReplicaStatus=Option_Some(Seq(input["ReplicaStatus"])) if "ReplicaStatus" in input.keys() else Option_None(),
ReplicaStatusDescription=Option_Some(Seq(input["ReplicaStatusDescription"])) if "ReplicaStatusDescription" in input.keys() else Option_None(),
ReplicaStatusPercentProgress=Option_Some(Seq(input["ReplicaStatusPercentProgress"])) if "ReplicaStatusPercentProgress" in input.keys() else Option_None(),
KMSMasterKeyId=Option_Some(Seq(input["KMSMasterKeyId"])) if "KMSMasterKeyId" in input.keys() else Option_None(),
ProvisionedThroughputOverride=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ProvisionedThroughputOverride(input["ProvisionedThroughputOverride"])) if "ProvisionedThroughputOverride" in input.keys() else Option_None(),
GlobalSecondaryIndexes=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndexDescription(list_element) for list_element in input["GlobalSecondaryIndexes"]])) if "GlobalSecondaryIndexes" in input.keys() else Option_None(),
ReplicaInaccessibleDateTime=Option_Some(input["ReplicaInaccessibleDateTime"]) if "ReplicaInaccessibleDateTime" in input.keys() else Option_None(),
ReplicaTableClassSummary=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_TableClassSummary(input["ReplicaTableClassSummary"])) if "ReplicaTableClassSummary" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ProvisionedThroughputOverride(input):
  return DafnyProvisionedThroughputOverride(ReadCapacityUnits=Option_Some(input["ReadCapacityUnits"]) if "ReadCapacityUnits" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndexDescription(input):
  return DafnyReplicaGlobalSecondaryIndexDescription(IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
ProvisionedThroughputOverride=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ProvisionedThroughputOverride(input["ProvisionedThroughputOverride"])) if "ProvisionedThroughputOverride" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_TableClassSummary(input):
  return DafnyTableClassSummary(TableClass=Option_Some(Seq(input["TableClass"])) if "TableClass" in input.keys() else Option_None(),
LastUpdateDateTime=Option_Some(input["LastUpdateDateTime"]) if "LastUpdateDateTime" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_CreateTableOutput(input):
  return DafnyCreateTableOutput(TableDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_TableDescription(input["TableDescription"])) if "TableDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_TableDescription(input):
  return DafnyTableDescription(AttributeDefinitions=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_AttributeDefinition(list_element) for list_element in input["AttributeDefinitions"]])) if "AttributeDefinitions" in input.keys() else Option_None(),
TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
KeySchema=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]])) if "KeySchema" in input.keys() else Option_None(),
TableStatus=Option_Some(Seq(input["TableStatus"])) if "TableStatus" in input.keys() else Option_None(),
CreationDateTime=Option_Some(input["CreationDateTime"]) if "CreationDateTime" in input.keys() else Option_None(),
ProvisionedThroughput=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ProvisionedThroughputDescription(input["ProvisionedThroughput"])) if "ProvisionedThroughput" in input.keys() else Option_None(),
TableSizeBytes=Option_Some(input["TableSizeBytes"]) if "TableSizeBytes" in input.keys() else Option_None(),
ItemCount=Option_Some(input["ItemCount"]) if "ItemCount" in input.keys() else Option_None(),
TableArn=Option_Some(Seq(input["TableArn"])) if "TableArn" in input.keys() else Option_None(),
TableId=Option_Some(Seq(input["TableId"])) if "TableId" in input.keys() else Option_None(),
BillingModeSummary=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_BillingModeSummary(input["BillingModeSummary"])) if "BillingModeSummary" in input.keys() else Option_None(),
LocalSecondaryIndexes=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_LocalSecondaryIndexDescription(list_element) for list_element in input["LocalSecondaryIndexes"]])) if "LocalSecondaryIndexes" in input.keys() else Option_None(),
GlobalSecondaryIndexes=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndexDescription(list_element) for list_element in input["GlobalSecondaryIndexes"]])) if "GlobalSecondaryIndexes" in input.keys() else Option_None(),
StreamSpecification=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_StreamSpecification(input["StreamSpecification"])) if "StreamSpecification" in input.keys() else Option_None(),
LatestStreamLabel=Option_Some(Seq(input["LatestStreamLabel"])) if "LatestStreamLabel" in input.keys() else Option_None(),
LatestStreamArn=Option_Some(Seq(input["LatestStreamArn"])) if "LatestStreamArn" in input.keys() else Option_None(),
GlobalTableVersion=Option_Some(Seq(input["GlobalTableVersion"])) if "GlobalTableVersion" in input.keys() else Option_None(),
Replicas=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ReplicaDescription(list_element) for list_element in input["Replicas"]])) if "Replicas" in input.keys() else Option_None(),
RestoreSummary=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_RestoreSummary(input["RestoreSummary"])) if "RestoreSummary" in input.keys() else Option_None(),
SSEDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_SSEDescription(input["SSEDescription"])) if "SSEDescription" in input.keys() else Option_None(),
ArchivalSummary=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ArchivalSummary(input["ArchivalSummary"])) if "ArchivalSummary" in input.keys() else Option_None(),
TableClassSummary=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_TableClassSummary(input["TableClassSummary"])) if "TableClassSummary" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_AttributeDefinition(input):
  return DafnyAttributeDefinition(AttributeName=Seq(input["AttributeName"]),
AttributeType=Seq(input["AttributeType"]),
)

def SmithyToDafny_com_amazonaws_dynamodb_KeySchemaElement(input):
  return DafnyKeySchemaElement(AttributeName=Seq(input["AttributeName"]),
KeyType=Seq(input["KeyType"]),
)

def SmithyToDafny_com_amazonaws_dynamodb_ProvisionedThroughputDescription(input):
  return DafnyProvisionedThroughputDescription(LastIncreaseDateTime=Option_Some(input["LastIncreaseDateTime"]) if "LastIncreaseDateTime" in input.keys() else Option_None(),
LastDecreaseDateTime=Option_Some(input["LastDecreaseDateTime"]) if "LastDecreaseDateTime" in input.keys() else Option_None(),
NumberOfDecreasesToday=Option_Some(input["NumberOfDecreasesToday"]) if "NumberOfDecreasesToday" in input.keys() else Option_None(),
ReadCapacityUnits=Option_Some(input["ReadCapacityUnits"]) if "ReadCapacityUnits" in input.keys() else Option_None(),
WriteCapacityUnits=Option_Some(input["WriteCapacityUnits"]) if "WriteCapacityUnits" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_BillingModeSummary(input):
  return DafnyBillingModeSummary(BillingMode=Option_Some(Seq(input["BillingMode"])) if "BillingMode" in input.keys() else Option_None(),
LastUpdateToPayPerRequestDateTime=Option_Some(input["LastUpdateToPayPerRequestDateTime"]) if "LastUpdateToPayPerRequestDateTime" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_LocalSecondaryIndexDescription(input):
  return DafnyLocalSecondaryIndexDescription(IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
KeySchema=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]])) if "KeySchema" in input.keys() else Option_None(),
Projection=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_Projection(input["Projection"])) if "Projection" in input.keys() else Option_None(),
IndexSizeBytes=Option_Some(input["IndexSizeBytes"]) if "IndexSizeBytes" in input.keys() else Option_None(),
ItemCount=Option_Some(input["ItemCount"]) if "ItemCount" in input.keys() else Option_None(),
IndexArn=Option_Some(Seq(input["IndexArn"])) if "IndexArn" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndexDescription(input):
  return DafnyGlobalSecondaryIndexDescription(IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
KeySchema=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]])) if "KeySchema" in input.keys() else Option_None(),
Projection=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_Projection(input["Projection"])) if "Projection" in input.keys() else Option_None(),
IndexStatus=Option_Some(Seq(input["IndexStatus"])) if "IndexStatus" in input.keys() else Option_None(),
Backfilling=Option_Some(input["Backfilling"]) if "Backfilling" in input.keys() else Option_None(),
ProvisionedThroughput=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ProvisionedThroughputDescription(input["ProvisionedThroughput"])) if "ProvisionedThroughput" in input.keys() else Option_None(),
IndexSizeBytes=Option_Some(input["IndexSizeBytes"]) if "IndexSizeBytes" in input.keys() else Option_None(),
ItemCount=Option_Some(input["ItemCount"]) if "ItemCount" in input.keys() else Option_None(),
IndexArn=Option_Some(Seq(input["IndexArn"])) if "IndexArn" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_StreamSpecification(input):
  return DafnyStreamSpecification(StreamEnabled=input["StreamEnabled"],
StreamViewType=Option_Some(Seq(input["StreamViewType"])) if "StreamViewType" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_RestoreSummary(input):
  return DafnyRestoreSummary(SourceBackupArn=Option_Some(Seq(input["SourceBackupArn"])) if "SourceBackupArn" in input.keys() else Option_None(),
SourceTableArn=Option_Some(Seq(input["SourceTableArn"])) if "SourceTableArn" in input.keys() else Option_None(),
RestoreDateTime=input["RestoreDateTime"],
RestoreInProgress=input["RestoreInProgress"],
)

def SmithyToDafny_com_amazonaws_dynamodb_SSEDescription(input):
  return DafnySSEDescription(Status=Option_Some(Seq(input["Status"])) if "Status" in input.keys() else Option_None(),
SSEType=Option_Some(Seq(input["SSEType"])) if "SSEType" in input.keys() else Option_None(),
KMSMasterKeyArn=Option_Some(Seq(input["KMSMasterKeyArn"])) if "KMSMasterKeyArn" in input.keys() else Option_None(),
InaccessibleEncryptionDateTime=Option_Some(input["InaccessibleEncryptionDateTime"]) if "InaccessibleEncryptionDateTime" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ArchivalSummary(input):
  return DafnyArchivalSummary(ArchivalDateTime=Option_Some(input["ArchivalDateTime"]) if "ArchivalDateTime" in input.keys() else Option_None(),
ArchivalReason=Option_Some(Seq(input["ArchivalReason"])) if "ArchivalReason" in input.keys() else Option_None(),
ArchivalBackupArn=Option_Some(Seq(input["ArchivalBackupArn"])) if "ArchivalBackupArn" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_Projection(input):
  return DafnyProjection(ProjectionType=Option_Some(Seq(input["ProjectionType"])) if "ProjectionType" in input.keys() else Option_None(),
NonKeyAttributes=Option_Some(Seq([Seq(list_element) for list_element in input["NonKeyAttributes"]])) if "NonKeyAttributes" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_DeleteBackupOutput(input):
  return DafnyDeleteBackupOutput(BackupDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_BackupDescription(input["BackupDescription"])) if "BackupDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_BackupDescription(input):
  return DafnyBackupDescription(BackupDetails=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_BackupDetails(input["BackupDetails"])) if "BackupDetails" in input.keys() else Option_None(),
SourceTableDetails=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_SourceTableDetails(input["SourceTableDetails"])) if "SourceTableDetails" in input.keys() else Option_None(),
SourceTableFeatureDetails=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_SourceTableFeatureDetails(input["SourceTableFeatureDetails"])) if "SourceTableFeatureDetails" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_SourceTableDetails(input):
  return DafnySourceTableDetails(TableName=Seq(input["TableName"]),
TableId=Seq(input["TableId"]),
TableArn=Option_Some(Seq(input["TableArn"])) if "TableArn" in input.keys() else Option_None(),
TableSizeBytes=Option_Some(input["TableSizeBytes"]) if "TableSizeBytes" in input.keys() else Option_None(),
KeySchema=Seq([SmithyToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]]),
TableCreationDateTime=input["TableCreationDateTime"],
ProvisionedThroughput=SmithyToDafny_com_amazonaws_dynamodb_ProvisionedThroughput(input["ProvisionedThroughput"]),
ItemCount=Option_Some(input["ItemCount"]) if "ItemCount" in input.keys() else Option_None(),
BillingMode=Option_Some(Seq(input["BillingMode"])) if "BillingMode" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_SourceTableFeatureDetails(input):
  return DafnySourceTableFeatureDetails(LocalSecondaryIndexes=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_LocalSecondaryIndexInfo(list_element) for list_element in input["LocalSecondaryIndexes"]])) if "LocalSecondaryIndexes" in input.keys() else Option_None(),
GlobalSecondaryIndexes=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndexInfo(list_element) for list_element in input["GlobalSecondaryIndexes"]])) if "GlobalSecondaryIndexes" in input.keys() else Option_None(),
StreamDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_StreamSpecification(input["StreamDescription"])) if "StreamDescription" in input.keys() else Option_None(),
TimeToLiveDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_TimeToLiveDescription(input["TimeToLiveDescription"])) if "TimeToLiveDescription" in input.keys() else Option_None(),
SSEDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_SSEDescription(input["SSEDescription"])) if "SSEDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ProvisionedThroughput(input):
  return DafnyProvisionedThroughput(ReadCapacityUnits=input["ReadCapacityUnits"],
WriteCapacityUnits=input["WriteCapacityUnits"],
)

def SmithyToDafny_com_amazonaws_dynamodb_LocalSecondaryIndexInfo(input):
  return DafnyLocalSecondaryIndexInfo(IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
KeySchema=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]])) if "KeySchema" in input.keys() else Option_None(),
Projection=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_Projection(input["Projection"])) if "Projection" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndexInfo(input):
  return DafnyGlobalSecondaryIndexInfo(IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
KeySchema=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]])) if "KeySchema" in input.keys() else Option_None(),
Projection=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_Projection(input["Projection"])) if "Projection" in input.keys() else Option_None(),
ProvisionedThroughput=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ProvisionedThroughput(input["ProvisionedThroughput"])) if "ProvisionedThroughput" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_TimeToLiveDescription(input):
  return DafnyTimeToLiveDescription(TimeToLiveStatus=Option_Some(Seq(input["TimeToLiveStatus"])) if "TimeToLiveStatus" in input.keys() else Option_None(),
AttributeName=Option_Some(Seq(input["AttributeName"])) if "AttributeName" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_DeleteItemOutput(input):
  return DafnyDeleteItemOutput(Attributes=Option_Some(Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Attributes"].items() })) if "Attributes" in input.keys() else Option_None(),
ConsumedCapacity=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ConsumedCapacity(input["ConsumedCapacity"])) if "ConsumedCapacity" in input.keys() else Option_None(),
ItemCollectionMetrics=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ItemCollectionMetrics(input["ItemCollectionMetrics"])) if "ItemCollectionMetrics" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_DeleteTableOutput(input):
  return DafnyDeleteTableOutput(TableDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_TableDescription(input["TableDescription"])) if "TableDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_DescribeBackupOutput(input):
  return DafnyDescribeBackupOutput(BackupDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_BackupDescription(input["BackupDescription"])) if "BackupDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_DescribeContinuousBackupsOutput(input):
  return DafnyDescribeContinuousBackupsOutput(ContinuousBackupsDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ContinuousBackupsDescription(input["ContinuousBackupsDescription"])) if "ContinuousBackupsDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ContinuousBackupsDescription(input):
  return DafnyContinuousBackupsDescription(ContinuousBackupsStatus=Seq(input["ContinuousBackupsStatus"]),
PointInTimeRecoveryDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_PointInTimeRecoveryDescription(input["PointInTimeRecoveryDescription"])) if "PointInTimeRecoveryDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_PointInTimeRecoveryDescription(input):
  return DafnyPointInTimeRecoveryDescription(PointInTimeRecoveryStatus=Option_Some(Seq(input["PointInTimeRecoveryStatus"])) if "PointInTimeRecoveryStatus" in input.keys() else Option_None(),
EarliestRestorableDateTime=Option_Some(input["EarliestRestorableDateTime"]) if "EarliestRestorableDateTime" in input.keys() else Option_None(),
LatestRestorableDateTime=Option_Some(input["LatestRestorableDateTime"]) if "LatestRestorableDateTime" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_DescribeContributorInsightsOutput(input):
  return DafnyDescribeContributorInsightsOutput(TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
ContributorInsightsRuleList=Option_Some(Seq([Seq(list_element) for list_element in input["ContributorInsightsRuleList"]])) if "ContributorInsightsRuleList" in input.keys() else Option_None(),
ContributorInsightsStatus=Option_Some(Seq(input["ContributorInsightsStatus"])) if "ContributorInsightsStatus" in input.keys() else Option_None(),
LastUpdateDateTime=Option_Some(input["LastUpdateDateTime"]) if "LastUpdateDateTime" in input.keys() else Option_None(),
FailureException=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_FailureException(input["FailureException"])) if "FailureException" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_FailureException(input):
  return DafnyFailureException(ExceptionName=Option_Some(Seq(input["ExceptionName"])) if "ExceptionName" in input.keys() else Option_None(),
ExceptionDescription=Option_Some(Seq(input["ExceptionDescription"])) if "ExceptionDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_DescribeEndpointsResponse(input):
  return DafnyDescribeEndpointsResponse(Endpoints=Seq([SmithyToDafny_com_amazonaws_dynamodb_Endpoint(list_element) for list_element in input["Endpoints"]]),
)

def SmithyToDafny_com_amazonaws_dynamodb_Endpoint(input):
  return DafnyEndpoint(Address=Seq(input["Address"]),
CachePeriodInMinutes=input["CachePeriodInMinutes"],
)

def SmithyToDafny_com_amazonaws_dynamodb_DescribeExportOutput(input):
  return DafnyDescribeExportOutput(ExportDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ExportDescription(input["ExportDescription"])) if "ExportDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ExportDescription(input):
  return DafnyExportDescription(ExportArn=Option_Some(Seq(input["ExportArn"])) if "ExportArn" in input.keys() else Option_None(),
ExportStatus=Option_Some(Seq(input["ExportStatus"])) if "ExportStatus" in input.keys() else Option_None(),
StartTime=Option_Some(input["StartTime"]) if "StartTime" in input.keys() else Option_None(),
EndTime=Option_Some(input["EndTime"]) if "EndTime" in input.keys() else Option_None(),
ExportManifest=Option_Some(Seq(input["ExportManifest"])) if "ExportManifest" in input.keys() else Option_None(),
TableArn=Option_Some(Seq(input["TableArn"])) if "TableArn" in input.keys() else Option_None(),
TableId=Option_Some(Seq(input["TableId"])) if "TableId" in input.keys() else Option_None(),
ExportTime=Option_Some(input["ExportTime"]) if "ExportTime" in input.keys() else Option_None(),
ClientToken=Option_Some(Seq(input["ClientToken"])) if "ClientToken" in input.keys() else Option_None(),
S3Bucket=Option_Some(Seq(input["S3Bucket"])) if "S3Bucket" in input.keys() else Option_None(),
S3BucketOwner=Option_Some(Seq(input["S3BucketOwner"])) if "S3BucketOwner" in input.keys() else Option_None(),
S3Prefix=Option_Some(Seq(input["S3Prefix"])) if "S3Prefix" in input.keys() else Option_None(),
S3SseAlgorithm=Option_Some(Seq(input["S3SseAlgorithm"])) if "S3SseAlgorithm" in input.keys() else Option_None(),
S3SseKmsKeyId=Option_Some(Seq(input["S3SseKmsKeyId"])) if "S3SseKmsKeyId" in input.keys() else Option_None(),
FailureCode=Option_Some(Seq(input["FailureCode"])) if "FailureCode" in input.keys() else Option_None(),
FailureMessage=Option_Some(Seq(input["FailureMessage"])) if "FailureMessage" in input.keys() else Option_None(),
ExportFormat=Option_Some(Seq(input["ExportFormat"])) if "ExportFormat" in input.keys() else Option_None(),
BilledSizeBytes=Option_Some(input["BilledSizeBytes"]) if "BilledSizeBytes" in input.keys() else Option_None(),
ItemCount=Option_Some(input["ItemCount"]) if "ItemCount" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_DescribeGlobalTableOutput(input):
  return DafnyDescribeGlobalTableOutput(GlobalTableDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_GlobalTableDescription(input["GlobalTableDescription"])) if "GlobalTableDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_DescribeGlobalTableSettingsOutput(input):
  return DafnyDescribeGlobalTableSettingsOutput(GlobalTableName=Option_Some(Seq(input["GlobalTableName"])) if "GlobalTableName" in input.keys() else Option_None(),
ReplicaSettings=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ReplicaSettingsDescription(list_element) for list_element in input["ReplicaSettings"]])) if "ReplicaSettings" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ReplicaSettingsDescription(input):
  return DafnyReplicaSettingsDescription(RegionName=Seq(input["RegionName"]),
ReplicaStatus=Option_Some(Seq(input["ReplicaStatus"])) if "ReplicaStatus" in input.keys() else Option_None(),
ReplicaBillingModeSummary=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_BillingModeSummary(input["ReplicaBillingModeSummary"])) if "ReplicaBillingModeSummary" in input.keys() else Option_None(),
ReplicaProvisionedReadCapacityUnits=Option_Some(input["ReplicaProvisionedReadCapacityUnits"]) if "ReplicaProvisionedReadCapacityUnits" in input.keys() else Option_None(),
ReplicaProvisionedReadCapacityAutoScalingSettings=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input["ReplicaProvisionedReadCapacityAutoScalingSettings"])) if "ReplicaProvisionedReadCapacityAutoScalingSettings" in input.keys() else Option_None(),
ReplicaProvisionedWriteCapacityUnits=Option_Some(input["ReplicaProvisionedWriteCapacityUnits"]) if "ReplicaProvisionedWriteCapacityUnits" in input.keys() else Option_None(),
ReplicaProvisionedWriteCapacityAutoScalingSettings=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input["ReplicaProvisionedWriteCapacityAutoScalingSettings"])) if "ReplicaProvisionedWriteCapacityAutoScalingSettings" in input.keys() else Option_None(),
ReplicaGlobalSecondaryIndexSettings=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndexSettingsDescription(list_element) for list_element in input["ReplicaGlobalSecondaryIndexSettings"]])) if "ReplicaGlobalSecondaryIndexSettings" in input.keys() else Option_None(),
ReplicaTableClassSummary=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_TableClassSummary(input["ReplicaTableClassSummary"])) if "ReplicaTableClassSummary" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input):
  return DafnyAutoScalingSettingsDescription(MinimumUnits=Option_Some(input["MinimumUnits"]) if "MinimumUnits" in input.keys() else Option_None(),
MaximumUnits=Option_Some(input["MaximumUnits"]) if "MaximumUnits" in input.keys() else Option_None(),
AutoScalingDisabled=Option_Some(input["AutoScalingDisabled"]) if "AutoScalingDisabled" in input.keys() else Option_None(),
AutoScalingRoleArn=Option_Some(Seq(input["AutoScalingRoleArn"])) if "AutoScalingRoleArn" in input.keys() else Option_None(),
ScalingPolicies=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_AutoScalingPolicyDescription(list_element) for list_element in input["ScalingPolicies"]])) if "ScalingPolicies" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndexSettingsDescription(input):
  return DafnyReplicaGlobalSecondaryIndexSettingsDescription(IndexName=Seq(input["IndexName"]),
IndexStatus=Option_Some(Seq(input["IndexStatus"])) if "IndexStatus" in input.keys() else Option_None(),
ProvisionedReadCapacityUnits=Option_Some(input["ProvisionedReadCapacityUnits"]) if "ProvisionedReadCapacityUnits" in input.keys() else Option_None(),
ProvisionedReadCapacityAutoScalingSettings=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input["ProvisionedReadCapacityAutoScalingSettings"])) if "ProvisionedReadCapacityAutoScalingSettings" in input.keys() else Option_None(),
ProvisionedWriteCapacityUnits=Option_Some(input["ProvisionedWriteCapacityUnits"]) if "ProvisionedWriteCapacityUnits" in input.keys() else Option_None(),
ProvisionedWriteCapacityAutoScalingSettings=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input["ProvisionedWriteCapacityAutoScalingSettings"])) if "ProvisionedWriteCapacityAutoScalingSettings" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_AutoScalingPolicyDescription(input):
  return DafnyAutoScalingPolicyDescription(PolicyName=Option_Some(Seq(input["PolicyName"])) if "PolicyName" in input.keys() else Option_None(),
TargetTrackingScalingPolicyConfiguration=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_AutoScalingTargetTrackingScalingPolicyConfigurationDescription(input["TargetTrackingScalingPolicyConfiguration"])) if "TargetTrackingScalingPolicyConfiguration" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_AutoScalingTargetTrackingScalingPolicyConfigurationDescription(input):
  return DafnyAutoScalingTargetTrackingScalingPolicyConfigurationDescription(DisableScaleIn=Option_Some(input["DisableScaleIn"]) if "DisableScaleIn" in input.keys() else Option_None(),
ScaleInCooldown=Option_Some(input["ScaleInCooldown"]) if "ScaleInCooldown" in input.keys() else Option_None(),
ScaleOutCooldown=Option_Some(input["ScaleOutCooldown"]) if "ScaleOutCooldown" in input.keys() else Option_None(),
TargetValue=input["TargetValue"],
)

def SmithyToDafny_com_amazonaws_dynamodb_DescribeImportOutput(input):
  return DafnyDescribeImportOutput(ImportTableDescription=SmithyToDafny_com_amazonaws_dynamodb_ImportTableDescription(input["ImportTableDescription"]),
)

def SmithyToDafny_com_amazonaws_dynamodb_ImportTableDescription(input):
  return DafnyImportTableDescription(ImportArn=Option_Some(Seq(input["ImportArn"])) if "ImportArn" in input.keys() else Option_None(),
ImportStatus=Option_Some(Seq(input["ImportStatus"])) if "ImportStatus" in input.keys() else Option_None(),
TableArn=Option_Some(Seq(input["TableArn"])) if "TableArn" in input.keys() else Option_None(),
TableId=Option_Some(Seq(input["TableId"])) if "TableId" in input.keys() else Option_None(),
ClientToken=Option_Some(Seq(input["ClientToken"])) if "ClientToken" in input.keys() else Option_None(),
S3BucketSource=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_S3BucketSource(input["S3BucketSource"])) if "S3BucketSource" in input.keys() else Option_None(),
ErrorCount=Option_Some(input["ErrorCount"]) if "ErrorCount" in input.keys() else Option_None(),
CloudWatchLogGroupArn=Option_Some(Seq(input["CloudWatchLogGroupArn"])) if "CloudWatchLogGroupArn" in input.keys() else Option_None(),
InputFormat=Option_Some(Seq(input["InputFormat"])) if "InputFormat" in input.keys() else Option_None(),
InputFormatOptions=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_InputFormatOptions(input["InputFormatOptions"])) if "InputFormatOptions" in input.keys() else Option_None(),
InputCompressionType=Option_Some(Seq(input["InputCompressionType"])) if "InputCompressionType" in input.keys() else Option_None(),
TableCreationParameters=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_TableCreationParameters(input["TableCreationParameters"])) if "TableCreationParameters" in input.keys() else Option_None(),
StartTime=Option_Some(input["StartTime"]) if "StartTime" in input.keys() else Option_None(),
EndTime=Option_Some(input["EndTime"]) if "EndTime" in input.keys() else Option_None(),
ProcessedSizeBytes=Option_Some(input["ProcessedSizeBytes"]) if "ProcessedSizeBytes" in input.keys() else Option_None(),
ProcessedItemCount=Option_Some(input["ProcessedItemCount"]) if "ProcessedItemCount" in input.keys() else Option_None(),
ImportedItemCount=Option_Some(input["ImportedItemCount"]) if "ImportedItemCount" in input.keys() else Option_None(),
FailureCode=Option_Some(Seq(input["FailureCode"])) if "FailureCode" in input.keys() else Option_None(),
FailureMessage=Option_Some(Seq(input["FailureMessage"])) if "FailureMessage" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_S3BucketSource(input):
  return DafnyS3BucketSource(S3BucketOwner=Option_Some(Seq(input["S3BucketOwner"])) if "S3BucketOwner" in input.keys() else Option_None(),
S3Bucket=Seq(input["S3Bucket"]),
S3KeyPrefix=Option_Some(Seq(input["S3KeyPrefix"])) if "S3KeyPrefix" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_InputFormatOptions(input):
  return DafnyInputFormatOptions(Csv=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_CsvOptions(input["Csv"])) if "Csv" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_TableCreationParameters(input):
  return DafnyTableCreationParameters(TableName=Seq(input["TableName"]),
AttributeDefinitions=Seq([SmithyToDafny_com_amazonaws_dynamodb_AttributeDefinition(list_element) for list_element in input["AttributeDefinitions"]]),
KeySchema=Seq([SmithyToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]]),
BillingMode=Option_Some(Seq(input["BillingMode"])) if "BillingMode" in input.keys() else Option_None(),
ProvisionedThroughput=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ProvisionedThroughput(input["ProvisionedThroughput"])) if "ProvisionedThroughput" in input.keys() else Option_None(),
SSESpecification=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_SSESpecification(input["SSESpecification"])) if "SSESpecification" in input.keys() else Option_None(),
GlobalSecondaryIndexes=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndex(list_element) for list_element in input["GlobalSecondaryIndexes"]])) if "GlobalSecondaryIndexes" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_CsvOptions(input):
  return DafnyCsvOptions(Delimiter=Option_Some(Seq(input["Delimiter"])) if "Delimiter" in input.keys() else Option_None(),
HeaderList=Option_Some(Seq([Seq(list_element) for list_element in input["HeaderList"]])) if "HeaderList" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_SSESpecification(input):
  return DafnySSESpecification(Enabled=Option_Some(input["Enabled"]) if "Enabled" in input.keys() else Option_None(),
SSEType=Option_Some(Seq(input["SSEType"])) if "SSEType" in input.keys() else Option_None(),
KMSMasterKeyId=Option_Some(Seq(input["KMSMasterKeyId"])) if "KMSMasterKeyId" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_GlobalSecondaryIndex(input):
  return DafnyGlobalSecondaryIndex(IndexName=Seq(input["IndexName"]),
KeySchema=Seq([SmithyToDafny_com_amazonaws_dynamodb_KeySchemaElement(list_element) for list_element in input["KeySchema"]]),
Projection=SmithyToDafny_com_amazonaws_dynamodb_Projection(input["Projection"]),
ProvisionedThroughput=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ProvisionedThroughput(input["ProvisionedThroughput"])) if "ProvisionedThroughput" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_DescribeKinesisStreamingDestinationOutput(input):
  return DafnyDescribeKinesisStreamingDestinationOutput(TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
KinesisDataStreamDestinations=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_KinesisDataStreamDestination(list_element) for list_element in input["KinesisDataStreamDestinations"]])) if "KinesisDataStreamDestinations" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_KinesisDataStreamDestination(input):
  return DafnyKinesisDataStreamDestination(StreamArn=Option_Some(Seq(input["StreamArn"])) if "StreamArn" in input.keys() else Option_None(),
DestinationStatus=Option_Some(Seq(input["DestinationStatus"])) if "DestinationStatus" in input.keys() else Option_None(),
DestinationStatusDescription=Option_Some(Seq(input["DestinationStatusDescription"])) if "DestinationStatusDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_DescribeLimitsOutput(input):
  return DafnyDescribeLimitsOutput(AccountMaxReadCapacityUnits=Option_Some(input["AccountMaxReadCapacityUnits"]) if "AccountMaxReadCapacityUnits" in input.keys() else Option_None(),
AccountMaxWriteCapacityUnits=Option_Some(input["AccountMaxWriteCapacityUnits"]) if "AccountMaxWriteCapacityUnits" in input.keys() else Option_None(),
TableMaxReadCapacityUnits=Option_Some(input["TableMaxReadCapacityUnits"]) if "TableMaxReadCapacityUnits" in input.keys() else Option_None(),
TableMaxWriteCapacityUnits=Option_Some(input["TableMaxWriteCapacityUnits"]) if "TableMaxWriteCapacityUnits" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_DescribeTableOutput(input):
  return DafnyDescribeTableOutput(Table=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_TableDescription(input["Table"])) if "Table" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_DescribeTableReplicaAutoScalingOutput(input):
  return DafnyDescribeTableReplicaAutoScalingOutput(TableAutoScalingDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_TableAutoScalingDescription(input["TableAutoScalingDescription"])) if "TableAutoScalingDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_TableAutoScalingDescription(input):
  return DafnyTableAutoScalingDescription(TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
TableStatus=Option_Some(Seq(input["TableStatus"])) if "TableStatus" in input.keys() else Option_None(),
Replicas=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ReplicaAutoScalingDescription(list_element) for list_element in input["Replicas"]])) if "Replicas" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ReplicaAutoScalingDescription(input):
  return DafnyReplicaAutoScalingDescription(RegionName=Option_Some(Seq(input["RegionName"])) if "RegionName" in input.keys() else Option_None(),
GlobalSecondaryIndexes=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndexAutoScalingDescription(list_element) for list_element in input["GlobalSecondaryIndexes"]])) if "GlobalSecondaryIndexes" in input.keys() else Option_None(),
ReplicaProvisionedReadCapacityAutoScalingSettings=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input["ReplicaProvisionedReadCapacityAutoScalingSettings"])) if "ReplicaProvisionedReadCapacityAutoScalingSettings" in input.keys() else Option_None(),
ReplicaProvisionedWriteCapacityAutoScalingSettings=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input["ReplicaProvisionedWriteCapacityAutoScalingSettings"])) if "ReplicaProvisionedWriteCapacityAutoScalingSettings" in input.keys() else Option_None(),
ReplicaStatus=Option_Some(Seq(input["ReplicaStatus"])) if "ReplicaStatus" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ReplicaGlobalSecondaryIndexAutoScalingDescription(input):
  return DafnyReplicaGlobalSecondaryIndexAutoScalingDescription(IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
IndexStatus=Option_Some(Seq(input["IndexStatus"])) if "IndexStatus" in input.keys() else Option_None(),
ProvisionedReadCapacityAutoScalingSettings=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input["ProvisionedReadCapacityAutoScalingSettings"])) if "ProvisionedReadCapacityAutoScalingSettings" in input.keys() else Option_None(),
ProvisionedWriteCapacityAutoScalingSettings=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_AutoScalingSettingsDescription(input["ProvisionedWriteCapacityAutoScalingSettings"])) if "ProvisionedWriteCapacityAutoScalingSettings" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_DescribeTimeToLiveOutput(input):
  return DafnyDescribeTimeToLiveOutput(TimeToLiveDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_TimeToLiveDescription(input["TimeToLiveDescription"])) if "TimeToLiveDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_DisableKinesisStreamingDestinationOutput(input):
  return DafnyDisableKinesisStreamingDestinationOutput(TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
StreamArn=Option_Some(Seq(input["StreamArn"])) if "StreamArn" in input.keys() else Option_None(),
DestinationStatus=Option_Some(Seq(input["DestinationStatus"])) if "DestinationStatus" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_EnableKinesisStreamingDestinationOutput(input):
  return DafnyEnableKinesisStreamingDestinationOutput(TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
StreamArn=Option_Some(Seq(input["StreamArn"])) if "StreamArn" in input.keys() else Option_None(),
DestinationStatus=Option_Some(Seq(input["DestinationStatus"])) if "DestinationStatus" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ExecuteStatementOutput(input):
  return DafnyExecuteStatementOutput(Items=Option_Some(Seq([Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in list_element.items() }) for list_element in input["Items"]])) if "Items" in input.keys() else Option_None(),
NextToken=Option_Some(Seq(input["NextToken"])) if "NextToken" in input.keys() else Option_None(),
ConsumedCapacity=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ConsumedCapacity(input["ConsumedCapacity"])) if "ConsumedCapacity" in input.keys() else Option_None(),
LastEvaluatedKey=Option_Some(Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["LastEvaluatedKey"].items() })) if "LastEvaluatedKey" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ExecuteTransactionOutput(input):
  return DafnyExecuteTransactionOutput(Responses=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ItemResponse(list_element) for list_element in input["Responses"]])) if "Responses" in input.keys() else Option_None(),
ConsumedCapacity=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ConsumedCapacity(list_element) for list_element in input["ConsumedCapacity"]])) if "ConsumedCapacity" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ItemResponse(input):
  return DafnyItemResponse(Item=Option_Some(Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Item"].items() })) if "Item" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ExportTableToPointInTimeOutput(input):
  return DafnyExportTableToPointInTimeOutput(ExportDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ExportDescription(input["ExportDescription"])) if "ExportDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_GetItemOutput(input):
  return DafnyGetItemOutput(Item=Option_Some(Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Item"].items() })) if "Item" in input.keys() else Option_None(),
ConsumedCapacity=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ConsumedCapacity(input["ConsumedCapacity"])) if "ConsumedCapacity" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ImportTableOutput(input):
  return DafnyImportTableOutput(ImportTableDescription=SmithyToDafny_com_amazonaws_dynamodb_ImportTableDescription(input["ImportTableDescription"]),
)

def SmithyToDafny_com_amazonaws_dynamodb_ListBackupsOutput(input):
  return DafnyListBackupsOutput(BackupSummaries=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_BackupSummary(list_element) for list_element in input["BackupSummaries"]])) if "BackupSummaries" in input.keys() else Option_None(),
LastEvaluatedBackupArn=Option_Some(Seq(input["LastEvaluatedBackupArn"])) if "LastEvaluatedBackupArn" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_BackupSummary(input):
  return DafnyBackupSummary(TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
TableId=Option_Some(Seq(input["TableId"])) if "TableId" in input.keys() else Option_None(),
TableArn=Option_Some(Seq(input["TableArn"])) if "TableArn" in input.keys() else Option_None(),
BackupArn=Option_Some(Seq(input["BackupArn"])) if "BackupArn" in input.keys() else Option_None(),
BackupName=Option_Some(Seq(input["BackupName"])) if "BackupName" in input.keys() else Option_None(),
BackupCreationDateTime=Option_Some(input["BackupCreationDateTime"]) if "BackupCreationDateTime" in input.keys() else Option_None(),
BackupExpiryDateTime=Option_Some(input["BackupExpiryDateTime"]) if "BackupExpiryDateTime" in input.keys() else Option_None(),
BackupStatus=Option_Some(Seq(input["BackupStatus"])) if "BackupStatus" in input.keys() else Option_None(),
BackupType=Option_Some(Seq(input["BackupType"])) if "BackupType" in input.keys() else Option_None(),
BackupSizeBytes=Option_Some(input["BackupSizeBytes"]) if "BackupSizeBytes" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ListContributorInsightsOutput(input):
  return DafnyListContributorInsightsOutput(ContributorInsightsSummaries=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ContributorInsightsSummary(list_element) for list_element in input["ContributorInsightsSummaries"]])) if "ContributorInsightsSummaries" in input.keys() else Option_None(),
NextToken=Option_Some(Seq(input["NextToken"])) if "NextToken" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ContributorInsightsSummary(input):
  return DafnyContributorInsightsSummary(TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
ContributorInsightsStatus=Option_Some(Seq(input["ContributorInsightsStatus"])) if "ContributorInsightsStatus" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ListExportsOutput(input):
  return DafnyListExportsOutput(ExportSummaries=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ExportSummary(list_element) for list_element in input["ExportSummaries"]])) if "ExportSummaries" in input.keys() else Option_None(),
NextToken=Option_Some(Seq(input["NextToken"])) if "NextToken" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ExportSummary(input):
  return DafnyExportSummary(ExportArn=Option_Some(Seq(input["ExportArn"])) if "ExportArn" in input.keys() else Option_None(),
ExportStatus=Option_Some(Seq(input["ExportStatus"])) if "ExportStatus" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ListGlobalTablesOutput(input):
  return DafnyListGlobalTablesOutput(GlobalTables=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_GlobalTable(list_element) for list_element in input["GlobalTables"]])) if "GlobalTables" in input.keys() else Option_None(),
LastEvaluatedGlobalTableName=Option_Some(Seq(input["LastEvaluatedGlobalTableName"])) if "LastEvaluatedGlobalTableName" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_GlobalTable(input):
  return DafnyGlobalTable(GlobalTableName=Option_Some(Seq(input["GlobalTableName"])) if "GlobalTableName" in input.keys() else Option_None(),
ReplicationGroup=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_Replica(list_element) for list_element in input["ReplicationGroup"]])) if "ReplicationGroup" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_Replica(input):
  return DafnyReplica(RegionName=Option_Some(Seq(input["RegionName"])) if "RegionName" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ListImportsOutput(input):
  return DafnyListImportsOutput(ImportSummaryList=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ImportSummary(list_element) for list_element in input["ImportSummaryList"]])) if "ImportSummaryList" in input.keys() else Option_None(),
NextToken=Option_Some(Seq(input["NextToken"])) if "NextToken" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ImportSummary(input):
  return DafnyImportSummary(ImportArn=Option_Some(Seq(input["ImportArn"])) if "ImportArn" in input.keys() else Option_None(),
ImportStatus=Option_Some(Seq(input["ImportStatus"])) if "ImportStatus" in input.keys() else Option_None(),
TableArn=Option_Some(Seq(input["TableArn"])) if "TableArn" in input.keys() else Option_None(),
S3BucketSource=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_S3BucketSource(input["S3BucketSource"])) if "S3BucketSource" in input.keys() else Option_None(),
CloudWatchLogGroupArn=Option_Some(Seq(input["CloudWatchLogGroupArn"])) if "CloudWatchLogGroupArn" in input.keys() else Option_None(),
InputFormat=Option_Some(Seq(input["InputFormat"])) if "InputFormat" in input.keys() else Option_None(),
StartTime=Option_Some(input["StartTime"]) if "StartTime" in input.keys() else Option_None(),
EndTime=Option_Some(input["EndTime"]) if "EndTime" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ListTablesOutput(input):
  return DafnyListTablesOutput(TableNames=Option_Some(Seq([Seq(list_element) for list_element in input["TableNames"]])) if "TableNames" in input.keys() else Option_None(),
LastEvaluatedTableName=Option_Some(Seq(input["LastEvaluatedTableName"])) if "LastEvaluatedTableName" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ListTagsOfResourceOutput(input):
  return DafnyListTagsOfResourceOutput(Tags=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_Tag(list_element) for list_element in input["Tags"]])) if "Tags" in input.keys() else Option_None(),
NextToken=Option_Some(Seq(input["NextToken"])) if "NextToken" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_Tag(input):
  return DafnyTag(Key=Seq(input["Key"]),
Value=Seq(input["Value"]),
)

def SmithyToDafny_com_amazonaws_dynamodb_PutItemOutput(input):
  return DafnyPutItemOutput(Attributes=Option_Some(Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Attributes"].items() })) if "Attributes" in input.keys() else Option_None(),
ConsumedCapacity=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ConsumedCapacity(input["ConsumedCapacity"])) if "ConsumedCapacity" in input.keys() else Option_None(),
ItemCollectionMetrics=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ItemCollectionMetrics(input["ItemCollectionMetrics"])) if "ItemCollectionMetrics" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_QueryOutput(input):
  return DafnyQueryOutput(Items=Option_Some(Seq([Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in list_element.items() }) for list_element in input["Items"]])) if "Items" in input.keys() else Option_None(),
Count=Option_Some(input["Count"]) if "Count" in input.keys() else Option_None(),
ScannedCount=Option_Some(input["ScannedCount"]) if "ScannedCount" in input.keys() else Option_None(),
LastEvaluatedKey=Option_Some(Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["LastEvaluatedKey"].items() })) if "LastEvaluatedKey" in input.keys() else Option_None(),
ConsumedCapacity=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ConsumedCapacity(input["ConsumedCapacity"])) if "ConsumedCapacity" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_RestoreTableFromBackupOutput(input):
  return DafnyRestoreTableFromBackupOutput(TableDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_TableDescription(input["TableDescription"])) if "TableDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_RestoreTableToPointInTimeOutput(input):
  return DafnyRestoreTableToPointInTimeOutput(TableDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_TableDescription(input["TableDescription"])) if "TableDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_ScanOutput(input):
  return DafnyScanOutput(Items=Option_Some(Seq([Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in list_element.items() }) for list_element in input["Items"]])) if "Items" in input.keys() else Option_None(),
Count=Option_Some(input["Count"]) if "Count" in input.keys() else Option_None(),
ScannedCount=Option_Some(input["ScannedCount"]) if "ScannedCount" in input.keys() else Option_None(),
LastEvaluatedKey=Option_Some(Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["LastEvaluatedKey"].items() })) if "LastEvaluatedKey" in input.keys() else Option_None(),
ConsumedCapacity=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ConsumedCapacity(input["ConsumedCapacity"])) if "ConsumedCapacity" in input.keys() else Option_None(),
)

def SmithyToDafny_smithy_api_Unit(input):
  return None

def SmithyToDafny_com_amazonaws_dynamodb_TransactGetItemsOutput(input):
  return DafnyTransactGetItemsOutput(ConsumedCapacity=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ConsumedCapacity(list_element) for list_element in input["ConsumedCapacity"]])) if "ConsumedCapacity" in input.keys() else Option_None(),
Responses=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ItemResponse(list_element) for list_element in input["Responses"]])) if "Responses" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_TransactWriteItemsOutput(input):
  return DafnyTransactWriteItemsOutput(ConsumedCapacity=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ConsumedCapacity(list_element) for list_element in input["ConsumedCapacity"]])) if "ConsumedCapacity" in input.keys() else Option_None(),
ItemCollectionMetrics=Option_Some(Map({Seq(key): Seq([SmithyToDafny_com_amazonaws_dynamodb_ItemCollectionMetrics(list_element) for list_element in value]) for (key, value) in input["ItemCollectionMetrics"].items() })) if "ItemCollectionMetrics" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_UpdateContinuousBackupsOutput(input):
  return DafnyUpdateContinuousBackupsOutput(ContinuousBackupsDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ContinuousBackupsDescription(input["ContinuousBackupsDescription"])) if "ContinuousBackupsDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_UpdateContributorInsightsOutput(input):
  return DafnyUpdateContributorInsightsOutput(TableName=Option_Some(Seq(input["TableName"])) if "TableName" in input.keys() else Option_None(),
IndexName=Option_Some(Seq(input["IndexName"])) if "IndexName" in input.keys() else Option_None(),
ContributorInsightsStatus=Option_Some(Seq(input["ContributorInsightsStatus"])) if "ContributorInsightsStatus" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_UpdateGlobalTableOutput(input):
  return DafnyUpdateGlobalTableOutput(GlobalTableDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_GlobalTableDescription(input["GlobalTableDescription"])) if "GlobalTableDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_UpdateGlobalTableSettingsOutput(input):
  return DafnyUpdateGlobalTableSettingsOutput(GlobalTableName=Option_Some(Seq(input["GlobalTableName"])) if "GlobalTableName" in input.keys() else Option_None(),
ReplicaSettings=Option_Some(Seq([SmithyToDafny_com_amazonaws_dynamodb_ReplicaSettingsDescription(list_element) for list_element in input["ReplicaSettings"]])) if "ReplicaSettings" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_UpdateItemOutput(input):
  return DafnyUpdateItemOutput(Attributes=Option_Some(Map({Seq(key): SmithyToDafny_com_amazonaws_dynamodb_AttributeValue(value) for (key, value) in input["Attributes"].items() })) if "Attributes" in input.keys() else Option_None(),
ConsumedCapacity=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ConsumedCapacity(input["ConsumedCapacity"])) if "ConsumedCapacity" in input.keys() else Option_None(),
ItemCollectionMetrics=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_ItemCollectionMetrics(input["ItemCollectionMetrics"])) if "ItemCollectionMetrics" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_UpdateTableOutput(input):
  return DafnyUpdateTableOutput(TableDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_TableDescription(input["TableDescription"])) if "TableDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_UpdateTableReplicaAutoScalingOutput(input):
  return DafnyUpdateTableReplicaAutoScalingOutput(TableAutoScalingDescription=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_TableAutoScalingDescription(input["TableAutoScalingDescription"])) if "TableAutoScalingDescription" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_UpdateTimeToLiveOutput(input):
  return DafnyUpdateTimeToLiveOutput(TimeToLiveSpecification=Option_Some(SmithyToDafny_com_amazonaws_dynamodb_TimeToLiveSpecification(input["TimeToLiveSpecification"])) if "TimeToLiveSpecification" in input.keys() else Option_None(),
)

def SmithyToDafny_com_amazonaws_dynamodb_TimeToLiveSpecification(input):
  return DafnyTimeToLiveSpecification(Enabled=input["Enabled"],
AttributeName=Seq(input["AttributeName"]),
)
