# Code generated by smithy-python-codegen DO NOT EDIT.

import module_
from software_amazon_cryptography_services_kms_internaldafny_types import (
    CancelKeyDeletionRequest_CancelKeyDeletionRequest as DafnyCancelKeyDeletionRequest,
    CancelKeyDeletionResponse_CancelKeyDeletionResponse as DafnyCancelKeyDeletionResponse,
    ConnectCustomKeyStoreRequest_ConnectCustomKeyStoreRequest as DafnyConnectCustomKeyStoreRequest,
    ConnectCustomKeyStoreResponse_ConnectCustomKeyStoreResponse as DafnyConnectCustomKeyStoreResponse,
    CreateAliasRequest_CreateAliasRequest as DafnyCreateAliasRequest,
    CreateCustomKeyStoreRequest_CreateCustomKeyStoreRequest as DafnyCreateCustomKeyStoreRequest,
    CreateCustomKeyStoreResponse_CreateCustomKeyStoreResponse as DafnyCreateCustomKeyStoreResponse,
    CreateGrantRequest_CreateGrantRequest as DafnyCreateGrantRequest,
    CreateGrantResponse_CreateGrantResponse as DafnyCreateGrantResponse,
    CreateKeyRequest_CreateKeyRequest as DafnyCreateKeyRequest,
    CreateKeyResponse_CreateKeyResponse as DafnyCreateKeyResponse,
    DecryptRequest_DecryptRequest as DafnyDecryptRequest,
    DecryptResponse_DecryptResponse as DafnyDecryptResponse,
    DeleteAliasRequest_DeleteAliasRequest as DafnyDeleteAliasRequest,
    DeleteCustomKeyStoreRequest_DeleteCustomKeyStoreRequest as DafnyDeleteCustomKeyStoreRequest,
    DeleteCustomKeyStoreResponse_DeleteCustomKeyStoreResponse as DafnyDeleteCustomKeyStoreResponse,
    DeleteImportedKeyMaterialRequest_DeleteImportedKeyMaterialRequest as DafnyDeleteImportedKeyMaterialRequest,
    DescribeCustomKeyStoresRequest_DescribeCustomKeyStoresRequest as DafnyDescribeCustomKeyStoresRequest,
    DescribeCustomKeyStoresResponse_DescribeCustomKeyStoresResponse as DafnyDescribeCustomKeyStoresResponse,
    DescribeKeyRequest_DescribeKeyRequest as DafnyDescribeKeyRequest,
    DescribeKeyResponse_DescribeKeyResponse as DafnyDescribeKeyResponse,
    DisableKeyRequest_DisableKeyRequest as DafnyDisableKeyRequest,
    DisableKeyRotationRequest_DisableKeyRotationRequest as DafnyDisableKeyRotationRequest,
    DisconnectCustomKeyStoreRequest_DisconnectCustomKeyStoreRequest as DafnyDisconnectCustomKeyStoreRequest,
    DisconnectCustomKeyStoreResponse_DisconnectCustomKeyStoreResponse as DafnyDisconnectCustomKeyStoreResponse,
    EnableKeyRequest_EnableKeyRequest as DafnyEnableKeyRequest,
    EnableKeyRotationRequest_EnableKeyRotationRequest as DafnyEnableKeyRotationRequest,
    EncryptRequest_EncryptRequest as DafnyEncryptRequest,
    EncryptResponse_EncryptResponse as DafnyEncryptResponse,
    GenerateDataKeyPairRequest_GenerateDataKeyPairRequest as DafnyGenerateDataKeyPairRequest,
    GenerateDataKeyPairResponse_GenerateDataKeyPairResponse as DafnyGenerateDataKeyPairResponse,
    GenerateDataKeyPairWithoutPlaintextRequest_GenerateDataKeyPairWithoutPlaintextRequest as DafnyGenerateDataKeyPairWithoutPlaintextRequest,
    GenerateDataKeyPairWithoutPlaintextResponse_GenerateDataKeyPairWithoutPlaintextResponse as DafnyGenerateDataKeyPairWithoutPlaintextResponse,
    GenerateDataKeyRequest_GenerateDataKeyRequest as DafnyGenerateDataKeyRequest,
    GenerateDataKeyResponse_GenerateDataKeyResponse as DafnyGenerateDataKeyResponse,
    GenerateDataKeyWithoutPlaintextRequest_GenerateDataKeyWithoutPlaintextRequest as DafnyGenerateDataKeyWithoutPlaintextRequest,
    GenerateDataKeyWithoutPlaintextResponse_GenerateDataKeyWithoutPlaintextResponse as DafnyGenerateDataKeyWithoutPlaintextResponse,
    GenerateRandomRequest_GenerateRandomRequest as DafnyGenerateRandomRequest,
    GenerateRandomResponse_GenerateRandomResponse as DafnyGenerateRandomResponse,
    GetKeyPolicyRequest_GetKeyPolicyRequest as DafnyGetKeyPolicyRequest,
    GetKeyPolicyResponse_GetKeyPolicyResponse as DafnyGetKeyPolicyResponse,
    GetKeyRotationStatusRequest_GetKeyRotationStatusRequest as DafnyGetKeyRotationStatusRequest,
    GetKeyRotationStatusResponse_GetKeyRotationStatusResponse as DafnyGetKeyRotationStatusResponse,
    GetParametersForImportRequest_GetParametersForImportRequest as DafnyGetParametersForImportRequest,
    GetParametersForImportResponse_GetParametersForImportResponse as DafnyGetParametersForImportResponse,
    GetPublicKeyRequest_GetPublicKeyRequest as DafnyGetPublicKeyRequest,
    GetPublicKeyResponse_GetPublicKeyResponse as DafnyGetPublicKeyResponse,
    ImportKeyMaterialRequest_ImportKeyMaterialRequest as DafnyImportKeyMaterialRequest,
    ImportKeyMaterialResponse_ImportKeyMaterialResponse as DafnyImportKeyMaterialResponse,
    ListAliasesRequest_ListAliasesRequest as DafnyListAliasesRequest,
    ListAliasesResponse_ListAliasesResponse as DafnyListAliasesResponse,
    ListGrantsRequest_ListGrantsRequest as DafnyListGrantsRequest,
    ListGrantsResponse_ListGrantsResponse as DafnyListGrantsResponse,
    ListKeyPoliciesRequest_ListKeyPoliciesRequest as DafnyListKeyPoliciesRequest,
    ListKeyPoliciesResponse_ListKeyPoliciesResponse as DafnyListKeyPoliciesResponse,
    ListResourceTagsRequest_ListResourceTagsRequest as DafnyListResourceTagsRequest,
    ListResourceTagsResponse_ListResourceTagsResponse as DafnyListResourceTagsResponse,
    PutKeyPolicyRequest_PutKeyPolicyRequest as DafnyPutKeyPolicyRequest,
    ReEncryptRequest_ReEncryptRequest as DafnyReEncryptRequest,
    ReEncryptResponse_ReEncryptResponse as DafnyReEncryptResponse,
    ReplicateKeyRequest_ReplicateKeyRequest as DafnyReplicateKeyRequest,
    ReplicateKeyResponse_ReplicateKeyResponse as DafnyReplicateKeyResponse,
    RetireGrantRequest_RetireGrantRequest as DafnyRetireGrantRequest,
    RevokeGrantRequest_RevokeGrantRequest as DafnyRevokeGrantRequest,
    ScheduleKeyDeletionRequest_ScheduleKeyDeletionRequest as DafnyScheduleKeyDeletionRequest,
    ScheduleKeyDeletionResponse_ScheduleKeyDeletionResponse as DafnyScheduleKeyDeletionResponse,
    SignRequest_SignRequest as DafnySignRequest,
    SignResponse_SignResponse as DafnySignResponse,
    TagResourceRequest_TagResourceRequest as DafnyTagResourceRequest,
    UntagResourceRequest_UntagResourceRequest as DafnyUntagResourceRequest,
    UpdateAliasRequest_UpdateAliasRequest as DafnyUpdateAliasRequest,
    UpdateCustomKeyStoreRequest_UpdateCustomKeyStoreRequest as DafnyUpdateCustomKeyStoreRequest,
    UpdateCustomKeyStoreResponse_UpdateCustomKeyStoreResponse as DafnyUpdateCustomKeyStoreResponse,
    UpdateKeyDescriptionRequest_UpdateKeyDescriptionRequest as DafnyUpdateKeyDescriptionRequest,
    UpdatePrimaryRegionRequest_UpdatePrimaryRegionRequest as DafnyUpdatePrimaryRegionRequest,
    VerifyRequest_VerifyRequest as DafnyVerifyRequest,
    VerifyResponse_VerifyResponse as DafnyVerifyResponse,
)

from . import dafny_to_aws_sdk
from .aws_sdk_to_dafny import (
    AwsSdkToDafny_com_amazonaws_kms_AliasListEntry,
    AwsSdkToDafny_com_amazonaws_kms_CancelKeyDeletionResponse,
    AwsSdkToDafny_com_amazonaws_kms_ConnectCustomKeyStoreResponse,
    AwsSdkToDafny_com_amazonaws_kms_CreateCustomKeyStoreResponse,
    AwsSdkToDafny_com_amazonaws_kms_CreateGrantResponse,
    AwsSdkToDafny_com_amazonaws_kms_CreateKeyResponse,
    AwsSdkToDafny_com_amazonaws_kms_CustomKeyStoresListEntry,
    AwsSdkToDafny_com_amazonaws_kms_DecryptResponse,
    AwsSdkToDafny_com_amazonaws_kms_DeleteCustomKeyStoreResponse,
    AwsSdkToDafny_com_amazonaws_kms_DescribeCustomKeyStoresResponse,
    AwsSdkToDafny_com_amazonaws_kms_DescribeKeyResponse,
    AwsSdkToDafny_com_amazonaws_kms_DisconnectCustomKeyStoreResponse,
    AwsSdkToDafny_com_amazonaws_kms_EncryptResponse,
    AwsSdkToDafny_com_amazonaws_kms_GenerateDataKeyPairResponse,
    AwsSdkToDafny_com_amazonaws_kms_GenerateDataKeyPairWithoutPlaintextResponse,
    AwsSdkToDafny_com_amazonaws_kms_GenerateDataKeyResponse,
    AwsSdkToDafny_com_amazonaws_kms_GenerateDataKeyWithoutPlaintextResponse,
    AwsSdkToDafny_com_amazonaws_kms_GenerateRandomResponse,
    AwsSdkToDafny_com_amazonaws_kms_GetKeyPolicyResponse,
    AwsSdkToDafny_com_amazonaws_kms_GetKeyRotationStatusResponse,
    AwsSdkToDafny_com_amazonaws_kms_GetParametersForImportResponse,
    AwsSdkToDafny_com_amazonaws_kms_GetPublicKeyResponse,
    AwsSdkToDafny_com_amazonaws_kms_GrantConstraints,
    AwsSdkToDafny_com_amazonaws_kms_GrantListEntry,
    AwsSdkToDafny_com_amazonaws_kms_ImportKeyMaterialResponse,
    AwsSdkToDafny_com_amazonaws_kms_KeyMetadata,
    AwsSdkToDafny_com_amazonaws_kms_ListAliasesResponse,
    AwsSdkToDafny_com_amazonaws_kms_ListGrantsResponse,
    AwsSdkToDafny_com_amazonaws_kms_ListKeyPoliciesResponse,
    AwsSdkToDafny_com_amazonaws_kms_ListResourceTagsResponse,
    AwsSdkToDafny_com_amazonaws_kms_MultiRegionConfiguration,
    AwsSdkToDafny_com_amazonaws_kms_MultiRegionKey,
    AwsSdkToDafny_com_amazonaws_kms_ReEncryptResponse,
    AwsSdkToDafny_com_amazonaws_kms_ReplicateKeyResponse,
    AwsSdkToDafny_com_amazonaws_kms_ScheduleKeyDeletionResponse,
    AwsSdkToDafny_com_amazonaws_kms_SignResponse,
    AwsSdkToDafny_com_amazonaws_kms_Tag,
    AwsSdkToDafny_com_amazonaws_kms_UpdateCustomKeyStoreResponse,
    AwsSdkToDafny_com_amazonaws_kms_VerifyResponse,
)


import Wrappers
from botocore.exceptions import ClientError
import software_amazon_cryptography_services_kms_internaldafny_types

def sdk_error_to_dafny_error(e: ClientError):
    '''
    Converts the provided native Smithy-modelled error
    into the corresponding Dafny error.
    '''
    if e.response['Error']['Code'] == 'AlreadyExistsException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_AlreadyExistsException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'CloudHsmClusterInUseException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_CloudHsmClusterInUseException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'CloudHsmClusterInvalidConfigurationException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_CloudHsmClusterInvalidConfigurationException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'CloudHsmClusterNotActiveException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_CloudHsmClusterNotActiveException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'CloudHsmClusterNotFoundException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_CloudHsmClusterNotFoundException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'CloudHsmClusterNotRelatedException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_CloudHsmClusterNotRelatedException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'CustomKeyStoreHasCMKsException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_CustomKeyStoreHasCMKsException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'CustomKeyStoreInvalidStateException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_CustomKeyStoreInvalidStateException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'CustomKeyStoreNameInUseException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_CustomKeyStoreNameInUseException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'CustomKeyStoreNotFoundException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_CustomKeyStoreNotFoundException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'DependencyTimeoutException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_DependencyTimeoutException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'DisabledException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_DisabledException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'ExpiredImportTokenException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_ExpiredImportTokenException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'IncorrectKeyException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_IncorrectKeyException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'IncorrectKeyMaterialException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_IncorrectKeyMaterialException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'IncorrectTrustAnchorException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_IncorrectTrustAnchorException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'InvalidAliasNameException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_InvalidAliasNameException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'InvalidArnException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_InvalidArnException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'InvalidCiphertextException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_InvalidCiphertextException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'InvalidGrantIdException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_InvalidGrantIdException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'InvalidGrantTokenException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_InvalidGrantTokenException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'InvalidImportTokenException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_InvalidImportTokenException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'InvalidKeyUsageException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_InvalidKeyUsageException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'InvalidMarkerException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_InvalidMarkerException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'KeyUnavailableException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_KeyUnavailableException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'KMSInternalException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_KMSInternalException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'KMSInvalidSignatureException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_KMSInvalidSignatureException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'KMSInvalidStateException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_KMSInvalidStateException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'LimitExceededException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_LimitExceededException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'MalformedPolicyDocumentException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_MalformedPolicyDocumentException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'NotFoundException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_NotFoundException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'TagException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_TagException(message=e.response['Error']['Message'])

    elif e.response['Error']['Code'] == 'UnsupportedOperationException':
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_UnsupportedOperationException(message=e.response['Error']['Message'])

    else:
        return software_amazon_cryptography_services_kms_internaldafny_types.Error_Opaque(obj=e)

# TODO-Python: Typehint the shim class
class KMSClientShim:
    def __init__(self, _impl, _region):
        self._impl = _impl
        self._region = _region

    def CancelKeyDeletion(self, input: DafnyCancelKeyDeletionRequest) -> DafnyCancelKeyDeletionResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_CancelKeyDeletionRequest(input)
        try:
            wrapped_response = self._impl.cancel_key_deletion(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_CancelKeyDeletionResponse(wrapped_response))

    def ConnectCustomKeyStore(self, input: DafnyConnectCustomKeyStoreRequest) -> DafnyConnectCustomKeyStoreResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ConnectCustomKeyStoreRequest(input)
        try:
            wrapped_response = self._impl.connect_custom_key_store(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_ConnectCustomKeyStoreResponse(wrapped_response))

    def CreateAlias(self, input: DafnyCreateAliasRequest) -> None:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_CreateAliasRequest(input)
        try:
            wrapped_response = self._impl.create_alias(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(None)

    def CreateCustomKeyStore(self, input: DafnyCreateCustomKeyStoreRequest) -> DafnyCreateCustomKeyStoreResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_CreateCustomKeyStoreRequest(input)
        try:
            wrapped_response = self._impl.create_custom_key_store(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_CreateCustomKeyStoreResponse(wrapped_response))

    def CreateGrant(self, input: DafnyCreateGrantRequest) -> DafnyCreateGrantResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_CreateGrantRequest(input)
        try:
            wrapped_response = self._impl.create_grant(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_CreateGrantResponse(wrapped_response))

    def CreateKey(self, input: DafnyCreateKeyRequest) -> DafnyCreateKeyResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_CreateKeyRequest(input)
        try:
            wrapped_response = self._impl.create_key(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_CreateKeyResponse(wrapped_response))

    def Decrypt(self, input: DafnyDecryptRequest) -> DafnyDecryptResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DecryptRequest(input)
        try:
            wrapped_response = self._impl.decrypt(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_DecryptResponse(wrapped_response))

    def DeleteAlias(self, input: DafnyDeleteAliasRequest) -> None:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DeleteAliasRequest(input)
        try:
            wrapped_response = self._impl.delete_alias(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(None)

    def DeleteCustomKeyStore(self, input: DafnyDeleteCustomKeyStoreRequest) -> DafnyDeleteCustomKeyStoreResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DeleteCustomKeyStoreRequest(input)
        try:
            wrapped_response = self._impl.delete_custom_key_store(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_DeleteCustomKeyStoreResponse(wrapped_response))

    def DeleteImportedKeyMaterial(self, input: DafnyDeleteImportedKeyMaterialRequest) -> None:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DeleteImportedKeyMaterialRequest(input)
        try:
            wrapped_response = self._impl.delete_imported_key_material(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(None)

    def DescribeCustomKeyStores(self, input: DafnyDescribeCustomKeyStoresRequest) -> DafnyDescribeCustomKeyStoresResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DescribeCustomKeyStoresRequest(input)
        try:
            wrapped_response = self._impl.describe_custom_key_stores(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_DescribeCustomKeyStoresResponse(wrapped_response))

    def DescribeKey(self, input: DafnyDescribeKeyRequest) -> DafnyDescribeKeyResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DescribeKeyRequest(input)
        try:
            wrapped_response = self._impl.describe_key(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_DescribeKeyResponse(wrapped_response))

    def DisableKey(self, input: DafnyDisableKeyRequest) -> None:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DisableKeyRequest(input)
        try:
            wrapped_response = self._impl.disable_key(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(None)

    def DisableKeyRotation(self, input: DafnyDisableKeyRotationRequest) -> None:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DisableKeyRotationRequest(input)
        try:
            wrapped_response = self._impl.disable_key_rotation(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(None)

    def DisconnectCustomKeyStore(self, input: DafnyDisconnectCustomKeyStoreRequest) -> DafnyDisconnectCustomKeyStoreResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DisconnectCustomKeyStoreRequest(input)
        try:
            wrapped_response = self._impl.disconnect_custom_key_store(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_DisconnectCustomKeyStoreResponse(wrapped_response))

    def EnableKey(self, input: DafnyEnableKeyRequest) -> None:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_EnableKeyRequest(input)
        try:
            wrapped_response = self._impl.enable_key(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(None)

    def EnableKeyRotation(self, input: DafnyEnableKeyRotationRequest) -> None:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_EnableKeyRotationRequest(input)
        try:
            wrapped_response = self._impl.enable_key_rotation(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(None)

    def Encrypt(self, input: DafnyEncryptRequest) -> DafnyEncryptResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_EncryptRequest(input)
        try:
            wrapped_response = self._impl.encrypt(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_EncryptResponse(wrapped_response))

    def GenerateDataKey(self, input: DafnyGenerateDataKeyRequest) -> DafnyGenerateDataKeyResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GenerateDataKeyRequest(input)
        try:
            wrapped_response = self._impl.generate_data_key(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_GenerateDataKeyResponse(wrapped_response))

    def GenerateDataKeyPair(self, input: DafnyGenerateDataKeyPairRequest) -> DafnyGenerateDataKeyPairResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GenerateDataKeyPairRequest(input)
        try:
            wrapped_response = self._impl.generate_data_key_pair(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_GenerateDataKeyPairResponse(wrapped_response))

    def GenerateDataKeyPairWithoutPlaintext(self, input: DafnyGenerateDataKeyPairWithoutPlaintextRequest) -> DafnyGenerateDataKeyPairWithoutPlaintextResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GenerateDataKeyPairWithoutPlaintextRequest(input)
        try:
            wrapped_response = self._impl.generate_data_key_pair_without_plaintext(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_GenerateDataKeyPairWithoutPlaintextResponse(wrapped_response))

    def GenerateDataKeyWithoutPlaintext(self, input: DafnyGenerateDataKeyWithoutPlaintextRequest) -> DafnyGenerateDataKeyWithoutPlaintextResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GenerateDataKeyWithoutPlaintextRequest(input)
        try:
            wrapped_response = self._impl.generate_data_key_without_plaintext(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_GenerateDataKeyWithoutPlaintextResponse(wrapped_response))

    def GenerateRandom(self, input: DafnyGenerateRandomRequest) -> DafnyGenerateRandomResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GenerateRandomRequest(input)
        try:
            wrapped_response = self._impl.generate_random(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_GenerateRandomResponse(wrapped_response))

    def GetKeyPolicy(self, input: DafnyGetKeyPolicyRequest) -> DafnyGetKeyPolicyResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GetKeyPolicyRequest(input)
        try:
            wrapped_response = self._impl.get_key_policy(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_GetKeyPolicyResponse(wrapped_response))

    def GetKeyRotationStatus(self, input: DafnyGetKeyRotationStatusRequest) -> DafnyGetKeyRotationStatusResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GetKeyRotationStatusRequest(input)
        try:
            wrapped_response = self._impl.get_key_rotation_status(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_GetKeyRotationStatusResponse(wrapped_response))

    def GetParametersForImport(self, input: DafnyGetParametersForImportRequest) -> DafnyGetParametersForImportResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GetParametersForImportRequest(input)
        try:
            wrapped_response = self._impl.get_parameters_for_import(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_GetParametersForImportResponse(wrapped_response))

    def GetPublicKey(self, input: DafnyGetPublicKeyRequest) -> DafnyGetPublicKeyResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GetPublicKeyRequest(input)
        try:
            wrapped_response = self._impl.get_public_key(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_GetPublicKeyResponse(wrapped_response))

    def ImportKeyMaterial(self, input: DafnyImportKeyMaterialRequest) -> DafnyImportKeyMaterialResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ImportKeyMaterialRequest(input)
        try:
            wrapped_response = self._impl.import_key_material(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_ImportKeyMaterialResponse(wrapped_response))

    def ListAliases(self, input: DafnyListAliasesRequest) -> DafnyListAliasesResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ListAliasesRequest(input)
        try:
            wrapped_response = self._impl.list_aliases(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_ListAliasesResponse(wrapped_response))

    def ListGrants(self, input: DafnyListGrantsRequest) -> DafnyListGrantsResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ListGrantsRequest(input)
        try:
            wrapped_response = self._impl.list_grants(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_ListGrantsResponse(wrapped_response))

    def ListKeyPolicies(self, input: DafnyListKeyPoliciesRequest) -> DafnyListKeyPoliciesResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ListKeyPoliciesRequest(input)
        try:
            wrapped_response = self._impl.list_key_policies(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_ListKeyPoliciesResponse(wrapped_response))

    def ListResourceTags(self, input: DafnyListResourceTagsRequest) -> DafnyListResourceTagsResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ListResourceTagsRequest(input)
        try:
            wrapped_response = self._impl.list_resource_tags(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_ListResourceTagsResponse(wrapped_response))

    def PutKeyPolicy(self, input: DafnyPutKeyPolicyRequest) -> None:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_PutKeyPolicyRequest(input)
        try:
            wrapped_response = self._impl.put_key_policy(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(None)

    def ReEncrypt(self, input: DafnyReEncryptRequest) -> DafnyReEncryptResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ReEncryptRequest(input)
        try:
            wrapped_response = self._impl.re_encrypt(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_ReEncryptResponse(wrapped_response))

    def ReplicateKey(self, input: DafnyReplicateKeyRequest) -> DafnyReplicateKeyResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ReplicateKeyRequest(input)
        try:
            wrapped_response = self._impl.replicate_key(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_ReplicateKeyResponse(wrapped_response))

    def RetireGrant(self, input: DafnyRetireGrantRequest) -> None:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_RetireGrantRequest(input)
        try:
            wrapped_response = self._impl.retire_grant(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(None)

    def RevokeGrant(self, input: DafnyRevokeGrantRequest) -> None:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_RevokeGrantRequest(input)
        try:
            wrapped_response = self._impl.revoke_grant(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(None)

    def ScheduleKeyDeletion(self, input: DafnyScheduleKeyDeletionRequest) -> DafnyScheduleKeyDeletionResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ScheduleKeyDeletionRequest(input)
        try:
            wrapped_response = self._impl.schedule_key_deletion(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_ScheduleKeyDeletionResponse(wrapped_response))

    def Sign(self, input: DafnySignRequest) -> DafnySignResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_SignRequest(input)
        try:
            wrapped_response = self._impl.sign(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_SignResponse(wrapped_response))

    def TagResource(self, input: DafnyTagResourceRequest) -> None:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_TagResourceRequest(input)
        try:
            wrapped_response = self._impl.tag_resource(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(None)

    def UntagResource(self, input: DafnyUntagResourceRequest) -> None:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_UntagResourceRequest(input)
        try:
            wrapped_response = self._impl.untag_resource(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(None)

    def UpdateAlias(self, input: DafnyUpdateAliasRequest) -> None:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_UpdateAliasRequest(input)
        try:
            wrapped_response = self._impl.update_alias(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(None)

    def UpdateCustomKeyStore(self, input: DafnyUpdateCustomKeyStoreRequest) -> DafnyUpdateCustomKeyStoreResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_UpdateCustomKeyStoreRequest(input)
        try:
            wrapped_response = self._impl.update_custom_key_store(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_UpdateCustomKeyStoreResponse(wrapped_response))

    def UpdateKeyDescription(self, input: DafnyUpdateKeyDescriptionRequest) -> None:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_UpdateKeyDescriptionRequest(input)
        try:
            wrapped_response = self._impl.update_key_description(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(None)

    def UpdatePrimaryRegion(self, input: DafnyUpdatePrimaryRegionRequest) -> None:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_UpdatePrimaryRegionRequest(input)
        try:
            wrapped_response = self._impl.update_primary_region(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(None)

    def Verify(self, input: DafnyVerifyRequest) -> DafnyVerifyResponse:
        unwrapped_request = dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_VerifyRequest(input)
        try:
            wrapped_response = self._impl.verify(**unwrapped_request)
        except ClientError as e:
            return Wrappers.Result_Failure(sdk_error_to_dafny_error(e))

        return Wrappers.Result_Success(AwsSdkToDafny_com_amazonaws_kms_VerifyResponse(wrapped_response))
