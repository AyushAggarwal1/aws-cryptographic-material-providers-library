# Code generated by smithy-python-codegen DO NOT EDIT.

from Wrappers import Option_None, Option_Some
from _dafny import Map, Seq
import module_
from software_amazon_cryptography_services_kms_internaldafny_types import (
    AliasListEntry_AliasListEntry as DafnyAliasListEntry,
    CancelKeyDeletionResponse_CancelKeyDeletionResponse as DafnyCancelKeyDeletionResponse,
    ConnectCustomKeyStoreResponse_ConnectCustomKeyStoreResponse as DafnyConnectCustomKeyStoreResponse,
    CreateCustomKeyStoreResponse_CreateCustomKeyStoreResponse as DafnyCreateCustomKeyStoreResponse,
    CreateGrantResponse_CreateGrantResponse as DafnyCreateGrantResponse,
    CreateKeyResponse_CreateKeyResponse as DafnyCreateKeyResponse,
    CustomKeyStoresListEntry_CustomKeyStoresListEntry as DafnyCustomKeyStoresListEntry,
    DecryptResponse_DecryptResponse as DafnyDecryptResponse,
    DeleteCustomKeyStoreResponse_DeleteCustomKeyStoreResponse as DafnyDeleteCustomKeyStoreResponse,
    DescribeCustomKeyStoresResponse_DescribeCustomKeyStoresResponse as DafnyDescribeCustomKeyStoresResponse,
    DescribeKeyResponse_DescribeKeyResponse as DafnyDescribeKeyResponse,
    DisconnectCustomKeyStoreResponse_DisconnectCustomKeyStoreResponse as DafnyDisconnectCustomKeyStoreResponse,
    EncryptResponse_EncryptResponse as DafnyEncryptResponse,
    GenerateDataKeyPairResponse_GenerateDataKeyPairResponse as DafnyGenerateDataKeyPairResponse,
    GenerateDataKeyPairWithoutPlaintextResponse_GenerateDataKeyPairWithoutPlaintextResponse as DafnyGenerateDataKeyPairWithoutPlaintextResponse,
    GenerateDataKeyResponse_GenerateDataKeyResponse as DafnyGenerateDataKeyResponse,
    GenerateDataKeyWithoutPlaintextResponse_GenerateDataKeyWithoutPlaintextResponse as DafnyGenerateDataKeyWithoutPlaintextResponse,
    GenerateRandomResponse_GenerateRandomResponse as DafnyGenerateRandomResponse,
    GetKeyPolicyResponse_GetKeyPolicyResponse as DafnyGetKeyPolicyResponse,
    GetKeyRotationStatusResponse_GetKeyRotationStatusResponse as DafnyGetKeyRotationStatusResponse,
    GetParametersForImportResponse_GetParametersForImportResponse as DafnyGetParametersForImportResponse,
    GetPublicKeyResponse_GetPublicKeyResponse as DafnyGetPublicKeyResponse,
    GrantConstraints_GrantConstraints as DafnyGrantConstraints,
    GrantListEntry_GrantListEntry as DafnyGrantListEntry,
    ImportKeyMaterialResponse_ImportKeyMaterialResponse as DafnyImportKeyMaterialResponse,
    KeyMetadata_KeyMetadata as DafnyKeyMetadata,
    ListAliasesResponse_ListAliasesResponse as DafnyListAliasesResponse,
    ListGrantsResponse_ListGrantsResponse as DafnyListGrantsResponse,
    ListKeyPoliciesResponse_ListKeyPoliciesResponse as DafnyListKeyPoliciesResponse,
    ListResourceTagsResponse_ListResourceTagsResponse as DafnyListResourceTagsResponse,
    MultiRegionConfiguration_MultiRegionConfiguration as DafnyMultiRegionConfiguration,
    MultiRegionKey_MultiRegionKey as DafnyMultiRegionKey,
    ReEncryptResponse_ReEncryptResponse as DafnyReEncryptResponse,
    ReplicateKeyResponse_ReplicateKeyResponse as DafnyReplicateKeyResponse,
    ScheduleKeyDeletionResponse_ScheduleKeyDeletionResponse as DafnyScheduleKeyDeletionResponse,
    SignResponse_SignResponse as DafnySignResponse,
    Tag_Tag as DafnyTag,
    UpdateCustomKeyStoreResponse_UpdateCustomKeyStoreResponse as DafnyUpdateCustomKeyStoreResponse,
    VerifyResponse_VerifyResponse as DafnyVerifyResponse,
)


def AwsSdkToDafny_com_amazonaws_kms_CancelKeyDeletionResponse(input):
    return DafnyCancelKeyDeletionResponse(
        KeyId=Option_Some(Seq(input["KeyId"])) if "KeyId" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_ConnectCustomKeyStoreResponse(input):
    return DafnyConnectCustomKeyStoreResponse(
    )

def AwsSdkToDafny_com_amazonaws_kms_CreateCustomKeyStoreResponse(input):
    return DafnyCreateCustomKeyStoreResponse(
        CustomKeyStoreId=Option_Some(Seq(input["CustomKeyStoreId"])) if "CustomKeyStoreId" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_CreateGrantResponse(input):
    return DafnyCreateGrantResponse(
        GrantToken=Option_Some(Seq(input["GrantToken"])) if "GrantToken" in input.keys() else Option_None(),
        GrantId=Option_Some(Seq(input["GrantId"])) if "GrantId" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_CreateKeyResponse(input):
    return DafnyCreateKeyResponse(
        KeyMetadata=Option_Some(AwsSdkToDafny_com_amazonaws_kms_KeyMetadata(input["KeyMetadata"])) if "KeyMetadata" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_KeyMetadata(input):
    return DafnyKeyMetadata(
        AWSAccountId=Option_Some(Seq(input["AWSAccountId"])) if "AWSAccountId" in input.keys() else Option_None(),
        KeyId=Seq(input["KeyId"]),
        Arn=Option_Some(Seq(input["Arn"])) if "Arn" in input.keys() else Option_None(),
        CreationDate=Option_Some(input["CreationDate"]) if "CreationDate" in input.keys() else Option_None(),
        Enabled=Option_Some(input["Enabled"]) if "Enabled" in input.keys() else Option_None(),
        Description=Option_Some(Seq(input["Description"])) if "Description" in input.keys() else Option_None(),
        KeyUsage=Option_Some(Seq(input["KeyUsage"])) if "KeyUsage" in input.keys() else Option_None(),
        KeyState=Option_Some(Seq(input["KeyState"])) if "KeyState" in input.keys() else Option_None(),
        DeletionDate=Option_Some(input["DeletionDate"]) if "DeletionDate" in input.keys() else Option_None(),
        ValidTo=Option_Some(input["ValidTo"]) if "ValidTo" in input.keys() else Option_None(),
        Origin=Option_Some(Seq(input["Origin"])) if "Origin" in input.keys() else Option_None(),
        CustomKeyStoreId=Option_Some(Seq(input["CustomKeyStoreId"])) if "CustomKeyStoreId" in input.keys() else Option_None(),
        CloudHsmClusterId=Option_Some(Seq(input["CloudHsmClusterId"])) if "CloudHsmClusterId" in input.keys() else Option_None(),
        ExpirationModel=Option_Some(Seq(input["ExpirationModel"])) if "ExpirationModel" in input.keys() else Option_None(),
        KeyManager=Option_Some(Seq(input["KeyManager"])) if "KeyManager" in input.keys() else Option_None(),
        CustomerMasterKeySpec=Option_Some(Seq(input["CustomerMasterKeySpec"])) if "CustomerMasterKeySpec" in input.keys() else Option_None(),
        KeySpec=Option_Some(Seq(input["KeySpec"])) if "KeySpec" in input.keys() else Option_None(),
        EncryptionAlgorithms=
        Option_Some(Seq([Seq(list_element) for list_element in input["EncryptionAlgorithms"]])) if "EncryptionAlgorithms" in input.keys() else Option_None(),
        SigningAlgorithms=
        Option_Some(Seq([Seq(list_element) for list_element in input["SigningAlgorithms"]])) if "SigningAlgorithms" in input.keys() else Option_None(),
        MultiRegion=Option_Some(input["MultiRegion"]) if "MultiRegion" in input.keys() else Option_None(),
        MultiRegionConfiguration=Option_Some(AwsSdkToDafny_com_amazonaws_kms_MultiRegionConfiguration(input["MultiRegionConfiguration"])) if "MultiRegionConfiguration" in input.keys() else Option_None(),
        PendingDeletionWindowInDays=Option_Some(input["PendingDeletionWindowInDays"]) if "PendingDeletionWindowInDays" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_MultiRegionConfiguration(input):
    return DafnyMultiRegionConfiguration(
        MultiRegionKeyType=Option_Some(Seq(input["MultiRegionKeyType"])) if "MultiRegionKeyType" in input.keys() else Option_None(),
        PrimaryKey=Option_Some(AwsSdkToDafny_com_amazonaws_kms_MultiRegionKey(input["PrimaryKey"])) if "PrimaryKey" in input.keys() else Option_None(),
        ReplicaKeys=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_kms_MultiRegionKey(list_element) for list_element in input["ReplicaKeys"]])) if "ReplicaKeys" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_MultiRegionKey(input):
    return DafnyMultiRegionKey(
        Arn=Option_Some(Seq(input["Arn"])) if "Arn" in input.keys() else Option_None(),
        Region=Option_Some(Seq(input["Region"])) if "Region" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_DecryptResponse(input):
    return DafnyDecryptResponse(
        KeyId=Option_Some(Seq(input["KeyId"])) if "KeyId" in input.keys() else Option_None(),
        Plaintext=Option_Some(Seq(input["Plaintext"])) if "Plaintext" in input.keys() else Option_None(),
        EncryptionAlgorithm=Option_Some(Seq(input["EncryptionAlgorithm"])) if "EncryptionAlgorithm" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_DeleteCustomKeyStoreResponse(input):
    return DafnyDeleteCustomKeyStoreResponse(
    )

def AwsSdkToDafny_com_amazonaws_kms_DescribeCustomKeyStoresResponse(input):
    return DafnyDescribeCustomKeyStoresResponse(
        CustomKeyStores=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_kms_CustomKeyStoresListEntry(list_element) for list_element in input["CustomKeyStores"]])) if "CustomKeyStores" in input.keys() else Option_None(),
        NextMarker=Option_Some(Seq(input["NextMarker"])) if "NextMarker" in input.keys() else Option_None(),
        Truncated=Option_Some(input["Truncated"]) if "Truncated" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_CustomKeyStoresListEntry(input):
    return DafnyCustomKeyStoresListEntry(
        CustomKeyStoreId=Option_Some(Seq(input["CustomKeyStoreId"])) if "CustomKeyStoreId" in input.keys() else Option_None(),
        CustomKeyStoreName=Option_Some(Seq(input["CustomKeyStoreName"])) if "CustomKeyStoreName" in input.keys() else Option_None(),
        CloudHsmClusterId=Option_Some(Seq(input["CloudHsmClusterId"])) if "CloudHsmClusterId" in input.keys() else Option_None(),
        TrustAnchorCertificate=Option_Some(Seq(input["TrustAnchorCertificate"])) if "TrustAnchorCertificate" in input.keys() else Option_None(),
        ConnectionState=Option_Some(Seq(input["ConnectionState"])) if "ConnectionState" in input.keys() else Option_None(),
        ConnectionErrorCode=Option_Some(Seq(input["ConnectionErrorCode"])) if "ConnectionErrorCode" in input.keys() else Option_None(),
        CreationDate=Option_Some(input["CreationDate"]) if "CreationDate" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_DescribeKeyResponse(input):
    return DafnyDescribeKeyResponse(
        KeyMetadata=Option_Some(AwsSdkToDafny_com_amazonaws_kms_KeyMetadata(input["KeyMetadata"])) if "KeyMetadata" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_DisconnectCustomKeyStoreResponse(input):
    return DafnyDisconnectCustomKeyStoreResponse(
    )

def AwsSdkToDafny_com_amazonaws_kms_EncryptResponse(input):
    return DafnyEncryptResponse(
        CiphertextBlob=Option_Some(Seq(input["CiphertextBlob"])) if "CiphertextBlob" in input.keys() else Option_None(),
        KeyId=Option_Some(Seq(input["KeyId"])) if "KeyId" in input.keys() else Option_None(),
        EncryptionAlgorithm=Option_Some(Seq(input["EncryptionAlgorithm"])) if "EncryptionAlgorithm" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_GenerateDataKeyResponse(input):
    return DafnyGenerateDataKeyResponse(
        CiphertextBlob=Option_Some(Seq(input["CiphertextBlob"])) if "CiphertextBlob" in input.keys() else Option_None(),
        Plaintext=Option_Some(Seq(input["Plaintext"])) if "Plaintext" in input.keys() else Option_None(),
        KeyId=Option_Some(Seq(input["KeyId"])) if "KeyId" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_GenerateDataKeyPairResponse(input):
    return DafnyGenerateDataKeyPairResponse(
        PrivateKeyCiphertextBlob=Option_Some(Seq(input["PrivateKeyCiphertextBlob"])) if "PrivateKeyCiphertextBlob" in input.keys() else Option_None(),
        PrivateKeyPlaintext=Option_Some(Seq(input["PrivateKeyPlaintext"])) if "PrivateKeyPlaintext" in input.keys() else Option_None(),
        PublicKey=Option_Some(Seq(input["PublicKey"])) if "PublicKey" in input.keys() else Option_None(),
        KeyId=Option_Some(Seq(input["KeyId"])) if "KeyId" in input.keys() else Option_None(),
        KeyPairSpec=Option_Some(Seq(input["KeyPairSpec"])) if "KeyPairSpec" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_GenerateDataKeyPairWithoutPlaintextResponse(input):
    return DafnyGenerateDataKeyPairWithoutPlaintextResponse(
        PrivateKeyCiphertextBlob=Option_Some(Seq(input["PrivateKeyCiphertextBlob"])) if "PrivateKeyCiphertextBlob" in input.keys() else Option_None(),
        PublicKey=Option_Some(Seq(input["PublicKey"])) if "PublicKey" in input.keys() else Option_None(),
        KeyId=Option_Some(Seq(input["KeyId"])) if "KeyId" in input.keys() else Option_None(),
        KeyPairSpec=Option_Some(Seq(input["KeyPairSpec"])) if "KeyPairSpec" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_GenerateDataKeyWithoutPlaintextResponse(input):
    return DafnyGenerateDataKeyWithoutPlaintextResponse(
        CiphertextBlob=Option_Some(Seq(input["CiphertextBlob"])) if "CiphertextBlob" in input.keys() else Option_None(),
        KeyId=Option_Some(Seq(input["KeyId"])) if "KeyId" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_GenerateRandomResponse(input):
    return DafnyGenerateRandomResponse(
        Plaintext=Option_Some(Seq(input["Plaintext"])) if "Plaintext" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_GetKeyPolicyResponse(input):
    return DafnyGetKeyPolicyResponse(
        Policy=Option_Some(Seq(input["Policy"])) if "Policy" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_GetKeyRotationStatusResponse(input):
    return DafnyGetKeyRotationStatusResponse(
        KeyRotationEnabled=Option_Some(input["KeyRotationEnabled"]) if "KeyRotationEnabled" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_GetParametersForImportResponse(input):
    return DafnyGetParametersForImportResponse(
        KeyId=Option_Some(Seq(input["KeyId"])) if "KeyId" in input.keys() else Option_None(),
        ImportToken=Option_Some(Seq(input["ImportToken"])) if "ImportToken" in input.keys() else Option_None(),
        PublicKey=Option_Some(Seq(input["PublicKey"])) if "PublicKey" in input.keys() else Option_None(),
        ParametersValidTo=Option_Some(input["ParametersValidTo"]) if "ParametersValidTo" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_GetPublicKeyResponse(input):
    return DafnyGetPublicKeyResponse(
        KeyId=Option_Some(Seq(input["KeyId"])) if "KeyId" in input.keys() else Option_None(),
        PublicKey=Option_Some(Seq(input["PublicKey"])) if "PublicKey" in input.keys() else Option_None(),
        CustomerMasterKeySpec=Option_Some(Seq(input["CustomerMasterKeySpec"])) if "CustomerMasterKeySpec" in input.keys() else Option_None(),
        KeySpec=Option_Some(Seq(input["KeySpec"])) if "KeySpec" in input.keys() else Option_None(),
        KeyUsage=Option_Some(Seq(input["KeyUsage"])) if "KeyUsage" in input.keys() else Option_None(),
        EncryptionAlgorithms=
        Option_Some(Seq([Seq(list_element) for list_element in input["EncryptionAlgorithms"]])) if "EncryptionAlgorithms" in input.keys() else Option_None(),
        SigningAlgorithms=
        Option_Some(Seq([Seq(list_element) for list_element in input["SigningAlgorithms"]])) if "SigningAlgorithms" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_ImportKeyMaterialResponse(input):
    return DafnyImportKeyMaterialResponse(
    )

def AwsSdkToDafny_com_amazonaws_kms_ListAliasesResponse(input):
    return DafnyListAliasesResponse(
        Aliases=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_kms_AliasListEntry(list_element) for list_element in input["Aliases"]])) if "Aliases" in input.keys() else Option_None(),
        NextMarker=Option_Some(Seq(input["NextMarker"])) if "NextMarker" in input.keys() else Option_None(),
        Truncated=Option_Some(input["Truncated"]) if "Truncated" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_AliasListEntry(input):
    return DafnyAliasListEntry(
        AliasName=Option_Some(Seq(input["AliasName"])) if "AliasName" in input.keys() else Option_None(),
        AliasArn=Option_Some(Seq(input["AliasArn"])) if "AliasArn" in input.keys() else Option_None(),
        TargetKeyId=Option_Some(Seq(input["TargetKeyId"])) if "TargetKeyId" in input.keys() else Option_None(),
        CreationDate=Option_Some(input["CreationDate"]) if "CreationDate" in input.keys() else Option_None(),
        LastUpdatedDate=Option_Some(input["LastUpdatedDate"]) if "LastUpdatedDate" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_ListGrantsResponse(input):
    return DafnyListGrantsResponse(
        Grants=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_kms_GrantListEntry(list_element) for list_element in input["Grants"]])) if "Grants" in input.keys() else Option_None(),
        NextMarker=Option_Some(Seq(input["NextMarker"])) if "NextMarker" in input.keys() else Option_None(),
        Truncated=Option_Some(input["Truncated"]) if "Truncated" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_GrantListEntry(input):
    return DafnyGrantListEntry(
        KeyId=Option_Some(Seq(input["KeyId"])) if "KeyId" in input.keys() else Option_None(),
        GrantId=Option_Some(Seq(input["GrantId"])) if "GrantId" in input.keys() else Option_None(),
        Name=Option_Some(Seq(input["Name"])) if "Name" in input.keys() else Option_None(),
        CreationDate=Option_Some(input["CreationDate"]) if "CreationDate" in input.keys() else Option_None(),
        GranteePrincipal=Option_Some(Seq(input["GranteePrincipal"])) if "GranteePrincipal" in input.keys() else Option_None(),
        RetiringPrincipal=Option_Some(Seq(input["RetiringPrincipal"])) if "RetiringPrincipal" in input.keys() else Option_None(),
        IssuingAccount=Option_Some(Seq(input["IssuingAccount"])) if "IssuingAccount" in input.keys() else Option_None(),
        Operations=
        Option_Some(Seq([Seq(list_element) for list_element in input["Operations"]])) if "Operations" in input.keys() else Option_None(),
        Constraints=Option_Some(AwsSdkToDafny_com_amazonaws_kms_GrantConstraints(input["Constraints"])) if "Constraints" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_GrantConstraints(input):
    return DafnyGrantConstraints(
        EncryptionContextSubset=
        Option_Some(Map({Seq(key): Seq(value) for (key, value) in input["EncryptionContextSubset"].items() })) if "EncryptionContextSubset" in input.keys() else Option_None(),
        EncryptionContextEquals=
        Option_Some(Map({Seq(key): Seq(value) for (key, value) in input["EncryptionContextEquals"].items() })) if "EncryptionContextEquals" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_ListKeyPoliciesResponse(input):
    return DafnyListKeyPoliciesResponse(
        PolicyNames=
        Option_Some(Seq([Seq(list_element) for list_element in input["PolicyNames"]])) if "PolicyNames" in input.keys() else Option_None(),
        NextMarker=Option_Some(Seq(input["NextMarker"])) if "NextMarker" in input.keys() else Option_None(),
        Truncated=Option_Some(input["Truncated"]) if "Truncated" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_ListResourceTagsResponse(input):
    return DafnyListResourceTagsResponse(
        Tags=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_kms_Tag(list_element) for list_element in input["Tags"]])) if "Tags" in input.keys() else Option_None(),
        NextMarker=Option_Some(Seq(input["NextMarker"])) if "NextMarker" in input.keys() else Option_None(),
        Truncated=Option_Some(input["Truncated"]) if "Truncated" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_Tag(input):
    return DafnyTag(
        TagKey=Seq(input["TagKey"]),
        TagValue=Seq(input["TagValue"]),
    )

def AwsSdkToDafny_com_amazonaws_kms_ReEncryptResponse(input):
    return DafnyReEncryptResponse(
        CiphertextBlob=Option_Some(Seq(input["CiphertextBlob"])) if "CiphertextBlob" in input.keys() else Option_None(),
        SourceKeyId=Option_Some(Seq(input["SourceKeyId"])) if "SourceKeyId" in input.keys() else Option_None(),
        KeyId=Option_Some(Seq(input["KeyId"])) if "KeyId" in input.keys() else Option_None(),
        SourceEncryptionAlgorithm=Option_Some(Seq(input["SourceEncryptionAlgorithm"])) if "SourceEncryptionAlgorithm" in input.keys() else Option_None(),
        DestinationEncryptionAlgorithm=Option_Some(Seq(input["DestinationEncryptionAlgorithm"])) if "DestinationEncryptionAlgorithm" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_ReplicateKeyResponse(input):
    return DafnyReplicateKeyResponse(
        ReplicaKeyMetadata=Option_Some(AwsSdkToDafny_com_amazonaws_kms_KeyMetadata(input["ReplicaKeyMetadata"])) if "ReplicaKeyMetadata" in input.keys() else Option_None(),
        ReplicaPolicy=Option_Some(Seq(input["ReplicaPolicy"])) if "ReplicaPolicy" in input.keys() else Option_None(),
        ReplicaTags=
        Option_Some(Seq([AwsSdkToDafny_com_amazonaws_kms_Tag(list_element) for list_element in input["ReplicaTags"]])) if "ReplicaTags" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_ScheduleKeyDeletionResponse(input):
    return DafnyScheduleKeyDeletionResponse(
        KeyId=Option_Some(Seq(input["KeyId"])) if "KeyId" in input.keys() else Option_None(),
        DeletionDate=Option_Some(input["DeletionDate"]) if "DeletionDate" in input.keys() else Option_None(),
        KeyState=Option_Some(Seq(input["KeyState"])) if "KeyState" in input.keys() else Option_None(),
        PendingWindowInDays=Option_Some(input["PendingWindowInDays"]) if "PendingWindowInDays" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_SignResponse(input):
    return DafnySignResponse(
        KeyId=Option_Some(Seq(input["KeyId"])) if "KeyId" in input.keys() else Option_None(),
        Signature=Option_Some(Seq(input["Signature"])) if "Signature" in input.keys() else Option_None(),
        SigningAlgorithm=Option_Some(Seq(input["SigningAlgorithm"])) if "SigningAlgorithm" in input.keys() else Option_None(),
    )

def AwsSdkToDafny_com_amazonaws_kms_UpdateCustomKeyStoreResponse(input):
    return DafnyUpdateCustomKeyStoreResponse(
    )

def AwsSdkToDafny_com_amazonaws_kms_VerifyResponse(input):
    return DafnyVerifyResponse(
        KeyId=Option_Some(Seq(input["KeyId"])) if "KeyId" in input.keys() else Option_None(),
        SignatureValid=Option_Some(input["SignatureValid"]) if "SignatureValid" in input.keys() else Option_None(),
        SigningAlgorithm=Option_Some(Seq(input["SigningAlgorithm"])) if "SigningAlgorithm" in input.keys() else Option_None(),
    )
